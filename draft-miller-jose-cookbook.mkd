---
title: Examples of Signing and Encrypting Data using JOSE
abbrev: JOSE Cookbook
docname: draft-miller-jose-cookbook-00
date: 
category: info

ipr: trust200902
area: Security
workgroup: JOSE Working Group
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: M. Miller
    name: Matthew Miller
    org: Cisco Systems, Inc.
    street: 1899 Wynkoop Street, Suite 600
    city: Denver
    region: CO
    code: 80202
    country: USA
    phone: +1-303-308-3204
    email: mamille2@cisco.com

informative:
    I-D.ietf-jose-json-web-algorithms:
    I-D.ietf-jose-json-web-encryption:
    I-D.ietf-jose-json-web-key:
    I-D.ietf-jose-json-web-signature:
    RFC4648:

--- abstract

A set of examples of using JavaScript Object Signing and Encryption (JOSE) to protect data.  This document illustrates a representative sampling of various JSON Web Signature (JWS) and JSON Web Encryption (JWE) results given similar inputs.


--- middle

# Introduction # {#intro}

The JavaScript Object Signing and Encryption (JOSE) technologies -- JSON Web Key (JWK) {{I-D.ietf-jose-json-web-key}}, JSON Web Signature (JWS) {{I-D.ietf-jose-json-web-signature}}, JSON Web Encryption (JWE) {{I-D.ietf-jose-json-web-encryption}}, and JSON Web Algorithms (JWA) {{I-D.ietf-jose-json-web-algorithms}} -- collectively can be used to protect content in a myriad of ways.  The full set of permutations is extremely large, and might be daunting to some.

This document provides a number of examples of signing or encrypting content using JOSE.  While not exhaustive, it does compile together a representative sample of JOSE features.  As much as possible, the same signature payload or encryption plaintext content is used to illustrate differences in various signing and encryption results.

## Conventions Used in this Document ## {#intro-conventions}

All instances of binary octet strings are represented using {{RFC4648}} base64url encoding.

Unless otherwise stated, all examples include both the Compact and JSON serializations.

All of the examples in this document include whitespace to improve formatting and readability.  Except for plaintext or payload content, whitespace is not part of the cryptographic operations.  Plaintext or payload content does include whitespace (unless otherwise noted), although line breaks (U+000A LINE FEED) have replaced spaces (U+0020 SPACE) is some cases to improve readability.


# Terminology  # {#terms}

This document inherits terminology regarding JSON Web Key (JWK) technology from {{I-D.ietf-jose-json-web-key}}, terminology regarding JSON Web Signature (JWS) technology from {{I-D.ietf-jose-json-web-signature}}, terminology regarding JSON Web Encryption (JWE) technology from {{I-D.ietf-jose-json-web-encryption}}, and terminology regarding algorithms from {{I-D.ietf-jose-json-web-algorithms}}.

# JSON Web Signature Examples # {#jws}

The following sections demonstrate how to generate various JWS objects.

## Payload Content ## {#jws-payload}

All of the succeeding examples use the following payload plaintext, serialized as UTF-8, with line breaks (U+000A LINE FEED) replacing some " " (U+0020 SPACE) characters to improve formatting:

~~~~~~~~~~
It's a dangerous business, Frodo, going out your door. You
step onto the road, and if you don't keep your feet, there's
no knowing where you might be swept off to.
~~~~~~~~~~
{: title="Payload content plaintext" }

The Payload encoded as {{RFC4648}} base64url:

~~~~~~~~~~
SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
~~~~~~~~~~
{: title="Payload content, base64url-encoded" }


## RSA v1.5 Signature ## {#jws-rsa}

This example illustrates signing content using the "RS256" (RSASSA-PKCS1-v1_5 with SHA-256) algorithm.

The following RSA private key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "bilbo.baggins@hobbiton.example",
  "use": "sig",
  "n":   "n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rH
          VTeT-O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRB
          SFKrKb2wqVwGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqk
          HHig3RBordaZ6Aj-oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD
          1NNLYD5lFHpPI9bTwJlsde3uhGqC0ZCuEHg8lhzwOHrtIQbS0F
          Vbb9k3-tVTU4fg_3L_vniUFAKwuCLqKnS2BYwdq_mzSnbLY7h_
          qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5gHdrNP5zw",
  "e":   "AQAB",
  "d":   "bWUC9B-EFRIo8kpGfh0ZuyGPvMNKvYWNtB_ikiH9k20eT-O1q_
          I78eiZkpXxXQ0UTEs2LsNRS-8uJbvQ-A1irkwMSMkK1J3XTGgd
          rhCku9gRldY7sNA_AKZGh-Q661_42rINLRCe8W-nZ34ui_qOfk
          LnK9QWDDqpaIsA-bMwWWSDFu2MUBYwkHTMEzLYGqOe04noqeq1
          hExBTHBOBdkMXiuFhUq1BU6l-DqEiWxqg82sXt2h-LMnT3046A
          OYJoRioz75tSUQfGCshWTBnP5uDjd18kKhyv07lhfSJdrPdM5P
          lyl21hsFf4L_mHCuoFau7gdsPfHPxxjVOcOpBrQzwQ",
  "p":   "3Slxg_DwTXJcb6095RoXygQCAZ5RnAvZlno1yhHtnUex_fp7AZ
          _9nRaO7HX_-SFfGQeutao2TDjDAWU4Vupk8rw9JR0AzZ0N2fvu
          IAmr_WCsmGpeNqQnev1T7IyEsnh8UMt-n5CafhkikzhEsrmndH
          6LxOrvRJlsPp6Zv8bUq0k",
  "q":   "uKE2dh-cTf6ERF4k4e_jy78GfPYUIaUyoSSJuBzp3Cubk3OCqs
          6grT8bR_cu0Dm1MZwWmtdqDyI95HrUeq3MP15vMMON8lHTeZu2
          lmKvwqW7anV5UzhM1iZ7z4yMkuUwFWoBvyY898EXvRD-hdqRxH
          lSqAZ192zB3pVFJ0s7pFc",
  "dp":  "B8PVvXkvJrj2L-GYQ7v3y9r6Kw5g9SahXBwsWUzp19TVlgI-YV
          85q1NIb1rxQtD-IsXXR3-TanevuRPRt5OBOdiMGQp8pbt26glj
          YfKU_E9xn-RULHz0-ed9E9gXLKD4VGngpz-PfQ_q29pk5xWHoJ
          p009Qf1HvChixRX59ehik",
  "dq":  "CLDmDGduhylc9o7r84rEUVn7pzQ6PF83Y-iBZx5NT-TpnOZKF1
          pErAMVeKzFEl41DlHHqqBLSM0W1sOFbwTxYWZDm6sI6og5iTbw
          QGIC3gnJKbi_7k_vJgGHwHxgPaX2PnvP-zyEkDERuf-ry4c_Z1
          1Cq9AqC2yeL6kdKT1cYF8",
  "qi":  "3PiqvXQN0zwMeE-sBvZgi289XP9XCQF3VWqPzMKnIgQp7_Tugo
          6-NZBKCQsMf3HaEGBjTVJs_jcK8-TRXvaKe-7ZMaQj8VfBdYks
          sbu0NKDDhjJ-GtiseaDVWt7dcH0cfwxgFUHpQh7FoCrjFJ6h6Z
          EpMF6xmujs4qMpPz8aaI4"
}
~~~~~~~~~~
{: #jws-rsa-key title="RSA 2048-bit Private Key"}

The protected JWS Header parameters:

~~~~~~~~~~
{
  "alg": "RS256",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~
{: title="Protected JWS Header JSON" }

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~
{: title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header (base64url-encoded) and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
jYc0gEV3V-RogN63dfD39ubQDvRFpqT0pYN2zmDfhxzLEqvWNFmINxPHuBZyNb
8FDgfU7oFPgLMdbzWP8dzebwCAQH1j_MV98HMMoaQweDy8L_6XBy6JjcxGne_o
GDyMM-gBm6VyW_xqK03pLEvmUrUlFLAVWuMpkd675wX8lPtiiEmswOqph6aCtA
LnBDMTUOlFzPpOb6B6OXctf4AG1cTfzcbyLWIGhGjqnPdqmoHldn-57eRT-G-R
-UR_XcxxvQ1b7gYAhh5_367tNnlnhIvv0RNr2UaqtnSG50B3TUVdDuJ0eHmPxW
dD6kVwiEIYeHPT4uhaRe2XgbTSx2pTQg
~~~~~~~~~~
{: title="Signature, base64url-encoded"}

The resulting JWS object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
.
jYc0gEV3V-RogN63dfD39ubQDvRFpqT0pYN2zmDfhxzLEqvWNFmINxPHuBZyNb
8FDgfU7oFPgLMdbzWP8dzebwCAQH1j_MV98HMMoaQweDy8L_6XBy6JjcxGne_o
GDyMM-gBm6VyW_xqK03pLEvmUrUlFLAVWuMpkd675wX8lPtiiEmswOqph6aCtA
LnBDMTUOlFzPpOb6B6OXctf4AG1cTfzcbyLWIGhGjqnPdqmoHldn-57eRT-G-R
-UR_XcxxvQ1b7gYAhh5_367tNnlnhIvv0RNr2UaqtnSG50B3TUVdDuJ0eHmPxW
dD6kVwiEIYeHPT4uhaRe2XgbTSx2pTQg
~~~~~~~~~~
{: title="Compact Serialization" }

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "protected":
        "eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iY
         ml0b24uZXhhbXBsZSJ9",
      "signature":
        "jYc0gEV3V-RogN63dfD39ubQDvRFpqT0pYN2zmDfhxzLEqvWNFmIN
         xPHuBZyNb8FDgfU7oFPgLMdbzWP8dzebwCAQH1j_MV98HMMoaQweD
         y8L_6XBy6JjcxGne_oGDyMM-gBm6VyW_xqK03pLEvmUrUlFLAVWuM
         pkd675wX8lPtiiEmswOqph6aCtALnBDMTUOlFzPpOb6B6OXctf4AG
         1cTfzcbyLWIGhGjqnPdqmoHldn-57eRT-G-R-UR_XcxxvQ1b7gYAh
         h5_367tNnlnhIvv0RNr2UaqtnSG50B3TUVdDuJ0eHmPxWdD6kVwiE
         IYeHPT4uhaRe2XgbTSx2pTQg"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }

## RSA-PSS Signature ## {#jws-rsapss}

This example illustrates signing content using the "PS256" (RSASSA-PSS with SHA-256) algorithm.  This example uses the RSA private key in {{jws-rsa}}.

The protected JWS Header parameters:

~~~~~~~~~~
{
  "alg": "PS384",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~
{: title="Protected JWS Header JSON" }

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~
{: title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header (base64url-encoded) and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
kmV2DSGzAWL3qq4fZOpOfW1Jn-qFa0OyEOtaL-XiDt_JQVnhurpQlT698iBkiy
wXRzcvwyY-UgeTrCDT6kPAZHN3Tj6l_bsPwHt7B1AaphZObG94tYCdyQlwdrCy
lBBaDMwwjQuSvL9MP40KLAlV5BGmnps-2rAUK9VL_HmKRcjo2dQ_VRfbaCSmmI
-aohWvcdptMyI6kZhHL_zLCOWO5RoY5YWV42u46ZdW-e06QgBZkzdHEmS2Aimx
EIy6PamU6FKvRLR3s8tiagdmBEwqiXUoRq5i3VL-XRvGMtk6jUonloTOii-nsU
6jN1AwrFGwe7kd33X6AX9CaMtOJaUZVw
~~~~~~~~~~

The resulting JWS object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
.
kmV2DSGzAWL3qq4fZOpOfW1Jn-qFa0OyEOtaL-XiDt_JQVnhurpQlT698iBkiy
wXRzcvwyY-UgeTrCDT6kPAZHN3Tj6l_bsPwHt7B1AaphZObG94tYCdyQlwdrCy
lBBaDMwwjQuSvL9MP40KLAlV5BGmnps-2rAUK9VL_HmKRcjo2dQ_VRfbaCSmmI
-aohWvcdptMyI6kZhHL_zLCOWO5RoY5YWV42u46ZdW-e06QgBZkzdHEmS2Aimx
EIy6PamU6FKvRLR3s8tiagdmBEwqiXUoRq5i3VL-XRvGMtk6jUonloTOii-nsU
6jN1AwrFGwe7kd33X6AX9CaMtOJaUZVw
~~~~~~~~~~
{: title="Compact Serialization" }

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "protected":
        "eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iY
         ml0b24uZXhhbXBsZSJ9",
      "signature":
        "kmV2DSGzAWL3qq4fZOpOfW1Jn-qFa0OyEOtaL-XiDt_JQVnhurpQl
         T698iBkiywXRzcvwyY-UgeTrCDT6kPAZHN3Tj6l_bsPwHt7B1Aaph
         ZObG94tYCdyQlwdrCylBBaDMwwjQuSvL9MP40KLAlV5BGmnps-2rA
         UK9VL_HmKRcjo2dQ_VRfbaCSmmI-aohWvcdptMyI6kZhHL_zLCOWO
         5RoY5YWV42u46ZdW-e06QgBZkzdHEmS2AimxEIy6PamU6FKvRLR3s
         8tiagdmBEwqiXUoRq5i3VL-XRvGMtk6jUonloTOii-nsU6jN1AwrF
         Gwe7kd33X6AX9CaMtOJaUZVw"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }

## ECDSA Signature ## {#jws-ecdsa}

This example illustrates signing content using the "ES512" (ECDSA with curve P-521 and SHA-512) algorithm.

The following EC private key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "EC",
  "kid": "bilbo.baggins@hobbiton.example",
  "use": "sig",
  "crv": "P-521",
  "x":   "AHKZLLOsCOzz5cY97ewNUajB957y-C-U88c3v13nmGZx6sYl_oJX
          u9A5RkTKqjqvjyekWF-7ytDyRXYgCF5cj0Kt",
  "y":   "AdymlHvOiLxXkEhayXQnNCvDX4h9htZaCJN34kfmC6pV5OhQHira
          VySsUdaQkAgDPrwQrJmbnX9cwlGfP-HqHZR1",
  "d":   "CFE43av1ypdfWGD5GgjpHW1fmnatQBh2akdmgLVc0znoq2xytfrN
          sqKlCsJb0IZkfdPi5umehMosNgn98Xf-sm0"
}
~~~~~~~~~~
{: title="Elliptic Curve P-521 Private Key"}

The protected JWS Header parameters:

~~~~~~~~~~
{
  "alg": "ES512",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~
{: title="Protected JWS Header JSON" }

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~
{: title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header (base64url-encoded) and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
GU4icJRWWqP0nDHX2HqiIZGueMWosZnx-RHjbNkkuJuVtW6ylbiHAHuOIuH9RD
dnildrg7VGvnjVK2Jv_47gyLQc8kweURgG5Zg6vauw6TyH7feCxMpfZ8BEqLSL
cLa_UUwYNLAFMB3FwQMIgSJJi7u510k1B6Nh-KcNJmViDeD2gA
~~~~~~~~~~
{: title="Signature, base64url-encoded"}

The resulting JWS object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3V
yIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9uJ3
Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3Ugb
WlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
.
GU4icJRWWqP0nDHX2HqiIZGueMWosZnx-RHjbNkkuJuVtW6ylbiHAHuOIuH9RD
dnildrg7VGvnjVK2Jv_47gyLQc8kweURgG5Zg6vauw6TyH7feCxMpfZ8BEqLSL
cLa_UUwYNLAFMB3FwQMIgSJJi7u510k1B6Nh-KcNJmViDeD2gA
~~~~~~~~~~
{: title="Compact Serialization" }

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "protected":
        "eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iY
         ml0b24uZXhhbXBsZSJ9",
      "signature":
        "GU4icJRWWqP0nDHX2HqiIZGueMWosZnx-RHjbNkkuJuVtW6ylbiHA
         HuOIuH9RDdnildrg7VGvnjVK2Jv_47gyLQc8kweURgG5Zg6vauw6T
         yH7feCxMpfZ8BEqLSLcLa_UUwYNLAFMB3FwQMIgSJJi7u510k1B6N
         h-KcNJmViDeD2gA"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }

## HMAC-SHA2 Integrity Protection ## {#jws-hmac}

This example illustrates integrity protecting content using the "HS256" (HMAC-SHA-256) algorithm.

The following AES symmetric key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "oct",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037",
  "use": "sig",
  "k":   "hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg"
}
~~~~~~~~~~
{: title="AES 256-bit symmetric key"}

The protected JWS Header parameters:

~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~
{: title="Protected JWS Header JSON" }

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~
{: title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header (base64url-encoded) and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
BC8xgQaFNKeZieRI0z7wDzbpRyG_ombR9gDU22IBJEM
~~~~~~~~~~
{: title="Signature, base64url-encoded"}

The resulting JWS object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
.
SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
.
BC8xgQaFNKeZieRI0z7wDzbpRyG_ombR9gDU22IBJEM
~~~~~~~~~~
{: title="Compact Serialization" }

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "protected":
        "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxY
         i1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature":
        "BC8xgQaFNKeZieRI0z7wDzbpRyG_ombR9gDU22IBJEM"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }


## Protecting Specific Header Fields ## {#jws-somefields}

This example illustrates a signature where only certain header parameters are protected.  Since this example contains both unprotected and protected header parameters, only the JSON serialization is possible.

This example uses the AES symmetric key from {{jws-hmac}}.

The unprotected JWS header parameters:

~~~~~~~~~~
{
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~
{: title="Unprotected JWS Header JSON" }

The protected JWS header parameters:

~~~~~~~~~~
{
  "alg": "HS256"
}
~~~~~~~~~~
{: title="Protected JWS Header JSON" }

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJIUzI1NiJ9
~~~~~~~~~~
{: title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
LHbXRdr8vWfAWIPsViW2RDE5edTLiChP_6fRTDbwHBM
~~~~~~~~~~
{: title="Signature, base64url-encoded"}

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "protected":
        "eyJhbGciOiJIUzI1NiJ9",
      "header": {
        "kid":
          "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature":
        "LHbXRdr8vWfAWIPsViW2RDE5edTLiChP_6fRTDbwHBM"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }


## Protecting Content Only ## {#jws-nofields}

This example illustrates a signature where none of the header parameters are protected.  Since this example contains only unprotected header parameters, only the JSON serialization is possible.

This example uses the AES symmetric key from {{jws-hmac}}.

The unprotected JWS header parameters:

~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~
{: title="Unprotected JWS Header JSON" }

Performing the signature operation over the combined empty protected JWS header and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08
~~~~~~~~~~
{: title="Signature, base64url-encoded"}

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "header": {
        "alg":
          "HS256",
        "kid":
          "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature":
        "RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }


## Multiple Signatures ## {#jws-multi}
This example illustrates multiple signatures applied to the same payload.  Since this example contains more than one signature, only the JSON serialization is possible.

This example uses the keys from {{jws-rsa}}, {{jws-ecdsa}}, and {{jws-hmac}} for signatures 1, 2, and 3 (respecitively).

The unprotected JWS header parameters for the first signature:

~~~~~~~~~~
{
  "alg": "RS256",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~
{: title="Signature #1 unprotected JWS Header JSON" }

Performing the first signature operation over the combined empty protected JWS header and the Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
ZWNbrJhJ2h8tU2VRuSRiyfNQzcTyOzEHAXJtUrW5rfhbDQ0BvTVkanmE1vzQX3
Nv6CUMbNSsgcPVtk445t8fD-A8Eo_2Czi5STRFVNDVIiPTkw1iWGYUsKOHFEWy
Q3lcKOI77ppFgmkBypdqtYQ1E4OB6gOuK4wF3f2s0RWpm8jUC5u-1KPwqFmGR3
JsDxIIITaD7DbLxPN3Cm7e4JLireOrZtaeQxypKT1_D0OMMo0L3EejyPB6FKkf
n118HQ4hwGsTg_24ZsiV94ep64nROWR-R4Gkxpr61uQFvy6IeS4kV6n--USD8N
5m4zLwljEWssVakmr__aq7MUBniv5vtA
~~~~~~~~~~
{: title="Signature #1, base64url-encoded"}

The unprotected JWS header parameters for the second signature:

~~~~~~~~~~
{
  "alg": "ES512",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~
{: title="Unprotected JWS Header JSON, second signature" }

Performing the second signature operation over the combined empty Protected JWS header and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
GliCVJY7BmN6pRTLfpWIKBjczIXDJjFlXluppc24eYWPCJCNP8z1YRp9mBn7wq
UkU0xPaSzcq-GppxhQTUq27TsORK11Ab3i74DiNmsy_usLDyzlSh2UCW-jF6WA
H1jq0fCa32H4zxnTIJV_uwMDyLuuXdwgHLfDoA1hEyUoqeY50A
~~~~~~~~~~
{: title="Signature #2, base64url-encoded"}

The unprotected JWS header parameters for the third signature:

~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~
{: title="Unprotected JWS Header JSON, third signature" }

Performing the third signature operation over the combined empty Protected JWS header and Payload content (base64url-encoded) produces the following signature:

~~~~~~~~~~
RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08
~~~~~~~~~~
{: title="Signature #2, base64url-encoded"}

The resulting JWS object, using the JSON serialization:

~~~~~~~~~~
{
  "payload":
    "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
     CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
     B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
     uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
  "signatures": [
    {
      "header": {
        "alg": "RS256",
        "kid": "bilbo.baggins@hobbiton.example"
      },
      "signature":
        "ZWNbrJhJ2h8tU2VRuSRiyfNQzcTyOzEHAXJtUrW5rfhbDQ0BvTVka
         nmE1vzQX3Nv6CUMbNSsgcPVtk445t8fD-A8Eo_2Czi5STRFVNDVIi
         PTkw1iWGYUsKOHFEWyQ3lcKOI77ppFgmkBypdqtYQ1E4OB6gOuK4w
         F3f2s0RWpm8jUC5u-1KPwqFmGR3JsDxIIITaD7DbLxPN3Cm7e4JLi
         reOrZtaeQxypKT1_D0OMMo0L3EejyPB6FKkfn118HQ4hwGsTg_24Z
         siV94ep64nROWR-R4Gkxpr61uQFvy6IeS4kV6n--USD8N5m4zLwlj
         EWssVakmr__aq7MUBniv5vtA"
    },
    {
      "header": {
        "alg": "ES512",
        "kid": "bilbo.baggins@hobbiton.example"
      },
      "signature":
        "GliCVJY7BmN6pRTLfpWIKBjczIXDJjFlXluppc24eYWPCJCNP8z1Y
         Rp9mBn7wqUkU0xPaSzcq-GppxhQTUq27TsORK11Ab3i74DiNmsy_u
         sLDyzlSh2UCW-jF6WAH1jq0fCa32H4zxnTIJV_uwMDyLuuXdwgHLf
         DoA1hEyUoqeY50A"
    },
    {
      "header": {
        "alg": "HS256",
        "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature":
        "RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08"
    }
  ]
}
~~~~~~~~~~
{: title="JSON Serialization" }


# JSON Web Encryption Examples # {#jwe}

The following sections demonstrate how to generate various JWE objects.

## Plaintext Content ## {#jwe-plaintext}

All of the succeeding examples (unless otherwise noted) use the following plaintext content, serialized as UTF-8, with line breaks (U+000A LINE FEED) replacing some " " (U+0020 SPACE) characters to improve formatting:

~~~~~~~~~~
You can trust us to stick with you through thick and thin--to
the bitter end. And you can trust us to keep any secret of
yours--closer than you keep it yourself. But you cannot trust
us to let you face trouble alone, and go off without a word.
We are your friends, Frodo.
~~~~~~~~~~
{: title="Plaintext content" }


## Key Encryption using RSA v1.5 and AES-HMAC-SHA2 ## {#jwe-rsa15}

This example illustrates encrypting content using the "RSA1_5" (RSAES-PKCS1-v1_5) key encryption algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

The Plaintext content from {{jwe-plaintext}} is used for this example.

The following RSA key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "frodo.baggins@hobbiton.example",
  "use": "enc",
  "n":   "maxhbsmBtdQ3CNrKvprUE6n9lYcregDMLYNeTAWcLj8NnPU9XIYe
          gTHVHQjxKDSHP2l-F5jS7sppG1wgdAqZyhnWvXhYNvcM7RfgKxqN
          x_xAHx6f3yy7s-M9PSNCwPC2lh6UAkR4I00EhV9lrypM9Pi4lBUo
          p9t5fS9W5UNwaAllhrd-osQGPjIeI1deHTwx-ZTHu3C60Pu_LJIl
          6hKn9wbwaUmA4cR5Bd2pgbaY7ASgsjCUbtYJaNIHSoHXprUdJZKU
          MAzV0WOKPfA6OPI4oypBadjvMZ4ZAj3BnXaSYsEZhaueTXvZB4eZ
          OAjIyh2e_VOIKVMsnDrJYAVotGlvMQ",
  "e":   "AQAB"
}
~~~~~~~~~~
{: title="RSA 2048-bit Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "e" and "n" are necessary for the encryption operation.)

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "RSA1_5",
  "kid": "frodo.baggins@hobbiton.example",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
vQ6_Pof-pnIBBB_qhAxzuusbc25hFCB1pJuBIN7yMNU
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given RSA key results in the following encrypted key:

~~~~~~~~~~
IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4sJ7xpNo
vR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1vQuC_TYslbSDLHx
nnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJmvWt_XrDp9tBby0xyjdwd
teAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2AKyuE10KEMbBo8EJVf1PP1JSS73qy
UqEt8oo0OHlYTicOwwwwhyiNshdrA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJa
B-u6qkDMAwA1tJEch4R58z9WsYKyrhAw
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
mR-7lneQlGq9vxe_udL4LA
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation on the Plaintext using the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7zqSkl
a_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVweYeYc_l7m2
vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8-PSEXb4GlBi22iQ
goXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maWZiglK4XckGv7-whchA42
VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--aTLxGtl9sR7z1ZgAyfRqoSs0S
op9J35heE89JveLIAjnuXH2ShsF0lW6T4HEYXFh9QsAF4TRdnpRs4
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
3AIdtJkgAkWuhBdFo8iL8A
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
.
IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4sJ7xpNo
vR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1vQuC_TYslbSDLHx
nnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJmvWt_XrDp9tBby0xyjdwd
teAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2AKyuE10KEMbBo8EJVf1PP1JSS73qy
UqEt8oo0OHlYTicOwwwwhyiNshdrA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJa
B-u6qkDMAwA1tJEch4R58z9WsYKyrhAw
.
mR-7lneQlGq9vxe_udL4LA
.
LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7zqSkl
a_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVweYeYc_l7m2
vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8-PSEXb4GlBi22iQ
goXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maWZiglK4XckGv7-whchA42
VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--aTLxGtl9sR7z1ZgAyfRqoSs0S
op9J35heE89JveLIAjnuXH2ShsF0lW6T4HEYXFh9QsAF4TRdnpRs4
.
3AIdtJkgAkWuhBdFo8iL8A
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": {
    "encrypted_key":
      "IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4
       sJ7xpNovR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1v
       QuC_TYslbSDLHxnnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJ
       mvWt_XrDp9tBby0xyjdwdteAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2A
       KyuE10KEMbBo8EJVf1PP1JSS73qyUqEt8oo0OHlYTicOwwwwhyiNshd
       rA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJaB-u6qkDMAwA1tJEch4R5
       8z9WsYKyrhAw"
  },
  "protected":
    "eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpd
     G9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
  "iv":
    "mR-7lneQlGq9vxe_udL4LA",
  "ciphertext":
    "LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7
     zqSkla_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVw
     eYeYc_l7m2vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8
     -PSEXb4GlBi22iQgoXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maW
     ZiglK4XckGv7-whchA42VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--
     aTLxGtl9sR7z1ZgAyfRqoSs0Sop9J35heE89JveLIAjnuXH2ShsF0lW6T
     4HEYXFh9QsAF4TRdnpRs4",
  "tag":
    "3AIdtJkgAkWuhBdFo8iL8A"
}
~~~~~~~~~~
{: title="JSON Serialization"}

## Key Encryption using RSA-OAEP with A256GCM ## {#jwe-rsa_oaep}

This example illustrates encrypting content using the "RSA-OAEP" (RSAES-OAEP) key encryption algorithm and the "A256GCM" (AES-GCM) content encryption algorithm.

The Plaintext content from {{jwe-plaintext}} is used for this example.

The following RSA key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "samwise.gamgee@hobbiton.example",
  "use": "enc",
  "alg": "RSA-OAEP",
  "n":   "wbdxI55VaanZXPY29Lg5hdmv2XhvqAhoxUkanfzf2-5zVUxa6prH
          RrI4pP1AhoqJRlZfYtWWd5mmHRG2pAHIlh0ySJ9wi0BioZBl1XP2
          e-C-FyXJGcTy0HdKQWlrfhTm42EW7Vv04r4gfao6uxjLGwfpGrZL
          arohiWCPnkNrg71S2CuNZSQBIPGjXfkmIy2tl_VWgGnL22GplyXj
          5YlBLdxXp3XeStsqo571utNfoUTU8E4qdzJ3U1DItoVkPGsMwlmm
          nJiwA7sXRItBCivR4M5qnZtdw-7v4WuR4779ubDuJ5nalMv2S66-
          RPcnFAzWSKxtBDnFJJDGIUe7Tzizjg1nms0Xq_yPub_UOlWn0ec8
          5FCft1hACpWG8schrOBeNqHBODFskYpUc2LC5JA2TaPF2dA67dg1
          TTsC_FupfQ2kNGcE1LgprxKHcVWYQb86B-HozjHZcqtauBzFNV5t
          bTuB-TpkcvJfNcFLlH3b8mb-H_ox35FjqBSAjLKyoeqfKTpVjvXh
          d09knwgJf6VKq6UC418_TOljMVfFTWXUxlnfhOOnzW6HSSzD1c9W
          rCuVzsUMv54szidQ9wf1cYWf3g5qFDxDQKis99gcDaiCAwM3yEBI
          zuNeeCa5dartHDb1xEB_HcHSeYbghbMjGfasvKn0aZRsnTyC0xhW
          BlsolZE",
  "e":   "AQAB",
  "d":   "n7fzJc3_WG59VEOBTkayzuSMM780OJQuZjN_KbH8lOZG25ZoA7T4
          Bxcc0xQn5oZE5uSCIwg91oCt0JvxPcpmqzaJZg1nirjcWZ-oBtVk
          7gCAWq-B3qhfF3izlbkosrzjHajIcY33HBhsy4_WerrXg4MDNE4H
          Yojy68TcxT2LYQRxUOCf5TtJXvM8olexlSGtVnQnDRutxEUCwiew
          fmmrfveEogLx9EA-KMgAjTiISXxqIXQhWUQX1G7v_mV_Hr2YuImY
          cNcHkRvp9E7ook0876DhkO8v4UOZLwA1OlUX98mkoqwc58A_Y2lB
          YbVx1_s5lpPsEqbbH-nqIjh1fL0gdNfihLxnclWtW7pCztLnImZA
          yeCWAG7ZIfv-Rn9fLIv9jZ6r7r-MSH9sqbuziHN2grGjD_jfRluM
          Ha0l84fFKl6bcqN1JWxPVhzNZo01yDF-1LiQnqUYSepPf6X3a2SO
          dkqBRiquE6EvLuSYIDpJq3jDIsgoL8Mo1LoomgiJxUwL_GWEOGu2
          8gplyzm-9Q0U0nyhEf1uhSR8aJAQWAiFImWH5W_IQT9I7-yrindr
          _2fWQ_i1UgMsGzA7aOGzZfPljRy6z-tY_KuBG00-28S_aWvjyUc-
          Alp8AUyKjBZ-7CWH32fGWK48j1t-zomrwjL_mnhsPbGs0c9WsWgR
          zI-K8gE",
  "p":   "7_2v3OQZzlPFcHyYfLABQ3XP85Es4hCdwCkbDeltaUXgVy9l9etK
          ghvM4hRkOvbb01kYVuLFmxIkCDtpi-zLCYAdXKrAK3PtSbtzld_X
          Z9nlsYa_QZWpXB_IrtFjVfdKUdMz94pHUhFGFj7nr6NNxfpiHSHW
          FE1zD_AC3mY46J961Y2LRnreVwAGNw53p07Db8yD_92pDa97vqcZ
          OdgtybH9q6uma-RFNhO1AoiJhYZj69hjmMRXx-x56HO9cnXNbmzN
          SCFCKnQmn4GQLmRj9sfbZRqL94bbtE4_e0Zrpo8RNo8vxRLqQNwI
          y85fc6BRgBJomt8QdQvIgPgWCv5HoQ",
  "q":   "zqOHk1P6WN_rHuM7ZF1cXH0x6RuOHq67WuHiSknqQeefGBA9PWs6
          ZyKQCO-O6mKXtcgE8_Q_hA2kMRcKOcvHil1hqMCNSXlflM7WPRPZ
          u2qCDcqssd_uMbP-DqYthH_EzwL9KnYoH7JQFxxmcv5An8oXUtTw
          k4knKjkIYGRuUwfQTus0w1NfjFAyxOOiAQ37ussIcE6C6ZSsM3n4
          1UlbJ7TCqewzVJaPJN5cxjySPZPD3Vp01a9YgAD6a3IIaKJdIxJS
          1ImnfPevSJQBE79-EXe2kSwVgOzvt-gsmM29QQ8veHy4uAqca5dZ
          zMs7hkkHtw1z0jHV90epQJJlXXnH8Q",
  "dp":  "19oDkBh1AXelMIxQFm2zZTqUhAzCIr4xNIGEPNoDt1jK83_FJA-x
          nx5kA7-1erdHdms_Ef67HsONNv5A60JaR7w8LHnDiBGnjdaUmmuO
          8XAxQJ_ia5mxjxNjS6E2yD44USo2JmHvzeeNczq25elqbTPLhUpG
          o1IZuG72FZQ5gTjXoTXC2-xtCDEUZfaUNh4IeAipfLugbpe0JAFl
          FfrTDAMUFpC3iXjxqzbEanflwPvj6V9iDSgjj8SozSM0dLtxvu0L
          IeIQAeEgT_yXcrKGmpKdSO08kLBx8VUjkbv_3Pn20Gyu2YEuwpFl
          M_H1NikuxJNKFGmnAq9LcnwwT0jvoQ",
  "dq":  "S6p59KrlmzGzaQYQM3o0XfHCGvfqHLYjCO557HYQf72O9kLMCfd_
          1VBEqeD-1jjwELKDjck8kOBl5UvohK1oDfSP1DleAy-cnmL29DqW
          mhgwM1ip0CCNmkmsmDSlqkUXDi6sAaZuntyukyflI-qSQ3C_BafP
          yFaKrt1fgdyEwYa08pESKwwWisy7KnmoUvaJ3SaHmohFS78TJ25c
          fc10wZ9hQNOrIChZlkiOdFCtxDqdmCqNacnhgE3bZQjGp3n83ODS
          z9zwJcSUvODlXBPc2AycH6Ci5yjbxt4Ppox_5pjm6xnQkiPgj01G
          psUssMmBN7iHVsrE7N2iznBNCeOUIQ",
  "qi":  "FZhClBMywVVjnuUud-05qd5CYU0dK79akAgy9oX6RX6I3IIIPckC
          ciRrokxglZn-omAY5CnCe4KdrnjFOT5YUZE7G_Pg44XgCXaarLQf
          4hl80oPEf6-jJ5Iy6wPRx7G2e8qLxnh9cOdf-kRqgOS3F48Ucvw3
          ma5V6KGMwQqWFeV31XtZ8l5cVI-I3NzBS7qltpUVgz2Ju021eyc7
          IlqgzR98qKONl27DuEES0aK0WE97jnsyO27Yp88Wa2RiBrEocM89
          QZI1seJiGDizHRUP4UZxw9zsXww46wy0P6f9grnYp7t8LkyDDk8e
          oI4KX6SNMNVcyVS9IWjlq8EzqZEKIA"
}
~~~~~~~~~~
{: title="RSA 4096-bit Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "e" and "n" are necessary for the encryption operation.)

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "RSA-OAEP",
  "kid": "samwise.gamgee@hobbiton.example",
  "enc": "A256GCM"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
09EnDWfdf6KCP09QbQQdhhoyFE5GoGAjdShgLGLol8k
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given RSA key produces the following encrypted key:

~~~~~~~~~~
WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRhYoujIOFlt
i0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyORiMca925XxPItbOE6v
8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAUbtreKpG8yD17YYyKw9qedx7BrSc
9TCvNH8ahrC93O1Qp_rZIPdkt92A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg
5S_zPlpqmd5-BrpUIGmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfM
eceRRhhGaG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaUw
ZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61RC8K4IJWnWB
zGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW9EikKXcE21Jc716oRfF
EeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1xqYW1JnfLKklIemtznHTXvq7de6Vx
eSucwBklB24oafBFSeMEGBqKFQPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8
ikwSP2dG3grGlrl6EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05S
A
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
MKccO3TLKaMB67zj
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_qhZgJ
3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJTfI1Gxzm-J
PJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5hVhP2HrqIVG0j1S
b5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUiC3wQP53pZRtqmwmACyq_
uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83WgkarkJbSkA0ZoVtebBJ_XvwNlfe1
VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWKj6C4UNSWgla8zhousjSQ
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
vCmVSWBtadRAKUhtizP5tw
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
.
WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRhYoujIOFlt
i0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyORiMca925XxPItbOE6v
8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAUbtreKpG8yD17YYyKw9qedx7BrSc
9TCvNH8ahrC93O1Qp_rZIPdkt92A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg
5S_zPlpqmd5-BrpUIGmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfM
eceRRhhGaG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaUw
ZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61RC8K4IJWnWB
zGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW9EikKXcE21Jc716oRfF
EeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1xqYW1JnfLKklIemtznHTXvq7de6Vx
eSucwBklB24oafBFSeMEGBqKFQPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8
ikwSP2dG3grGlrl6EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05S
A
.
MKccO3TLKaMB67zj
.
dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_qhZgJ
3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJTfI1Gxzm-J
PJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5hVhP2HrqIVG0j1S
b5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUiC3wQP53pZRtqmwmACyq_
uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83WgkarkJbSkA0ZoVtebBJ_XvwNlfe1
VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWKj6C4UNSWgla8zhousjSQ
.
vCmVSWBtadRAKUhtizP5tw
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRh
         YoujIOFlti0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyO
         RiMca925XxPItbOE6v8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAU
         btreKpG8yD17YYyKw9qedx7BrSc9TCvNH8ahrC93O1Qp_rZIPdkt9
         2A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg5S_zPlpqmd5-BrpUI
         GmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfMeceRRhhG
         aG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaU
         wZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61R
         C8K4IJWnWBzGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW
         9EikKXcE21Jc716oRfFEeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1x
         qYW1JnfLKklIemtznHTXvq7de6VxeSucwBklB24oafBFSeMEGBqKF
         QPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8ikwSP2dG3grGlrl6
         EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05SA"
    }
  ],
  "protected":
    "eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvY
     mJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0",
  "iv":
    "MKccO3TLKaMB67zj",
  "ciphertext":
    "dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_
     qhZgJ3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJ
     TfI1Gxzm-JPJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5
     hVhP2HrqIVG0j1Sb5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUi
     C3wQP53pZRtqmwmACyq_uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83Wgka
     rkJbSkA0ZoVtebBJ_XvwNlfe1VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWK
     j6C4UNSWgla8zhousjSQ",
  "tag":
    "vCmVSWBtadRAKUhtizP5tw"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Key Agreement using ECDH-ES with AES-CBC-HMAC-SHA2 ## {#jwe-ecdh}

This example illustrates encrypting content using the "ECDH-ES" (Elliptic Curve Diffie-Hellman Ephemeral-Static) key agreement algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

The Plaintext content from {{jwe-plaintext}} is used for this example.

The following Elliptic Curve key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "EC",
  "kid": "meriadoc.brandybuck@buckland.example",
  "use": "enc",
  "crv": "P-256",
  "x":   "XnXXKEsaUU4hPZza_zSHIbt02UA505B1rDWc7JNlcDE",
  "y":   "Md5NqzfiXCytoaMglA-9MstvgOBdMSroXA2Hb6vR6dQ",
  "d":   "44eY-VRWsn1zdz3VaWS6idEpOGt1ErydBARq7Iyh9pY"
}
~~~~~~~~~~
{: title="Elliptic Curve P-256 Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "crv", "x", and "y" are necessary for the encryption operation.)

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "ECDH-ES",
  "kid": "meriadoc.brandybuck@buckland.example",
  "epk": {
    "kty": "EC",
    "crv": "P-256",
    "x":   "h_ImuH3OW5JxZNQZWIWCFTYAIigZYs1-QzsQR9tCEQ4",
    "y":   "4ZWJVVrTOWdEVbH266nb4Wy2QiwH_9XAcdpNh4S2oX0"
  },
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
LCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWllzMS1RenNRUjl0Q0
VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRXeTJRaXdIXzlYQWNkcE5o
NFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
BMbSNYW2uC7RX3xql1gbQw
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the encryption operation on the Plaintext using the given key, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgjSaGPM
M7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWlQZrQz77Ie
dSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGdWbyDnPMvp6eGL
T6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOww4E5zKW9Xycx3mkh_
gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb29frJCFI-rYfahoVz6QhN
QXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNAdBKgSa9JZfc21dSw
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
kqeubaGyskAjcj8mDymY6A
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

the resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
LCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWllzMS1RenNRUjl0Q0
VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRXeTJRaXdIXzlYQWNkcE5o
NFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
.
.
BMbSNYW2uC7RX3xql1gbQw
.
mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgjSaGPM
M7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWlQZrQz77Ie
dSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGdWbyDnPMvp6eGL
T6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOww4E5zKW9Xycx3mkh_
gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb29frJCFI-rYfahoVz6QhN
QXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNAdBKgSa9JZfc21dSw
.
kqeubaGyskAjcj8mDymY6A
~~~~~~~~~~
{: title="Compact Serialization"}

the resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "protected":
    "eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja
     0BidWNrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2Ij
     oiUC0yNTYiLCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWll
     zMS1RenNRUjl0Q0VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRX
     eTJRaXdIXzlYQWNkcE5oNFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyN
     TYifQ",
  "iv":
    "BMbSNYW2uC7RX3xql1gbQw",
  "ciphertext":
    "mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgj
    SaGPMM7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWl
    QZrQz77IedSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGd
    WbyDnPMvp6eGLT6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOw
    w4E5zKW9Xycx3mkh_gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb
    29frJCFI-rYfahoVz6QhNQXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNA
    dBKgSa9JZfc21dSw",
  "tag":
    "kqeubaGyskAjcj8mDymY6A"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Key Agreement with Key Wrapping using ECDH-ES and AES-KeyWrap with AES-GCM ## {#jwe-ecdh_aeskw}

This example illustrates encrypting content using a previously exchanged key directly and the "A128GCM" (AES-GCM) content encryption algorithm.

The Plaintext content in {{jwe-plaintext}} is used for this example.

The following Elliptic Curve key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "EC",
  "kid": "peregrin.took@tuckborough.example",
  "use": "enc",
  "crv": "P-384",
  "x":   "YU4rRUzdmVqmRtWOs2OpDE_T5fsNIodcG8G5FWPrTPMyxpzsSOGa
          QLpe2FpxBmu2",
  "y":   "A8-yxCHxkfBz3hKZfI1jUYMjUhsEveZ9THuwFjH2sCNdtksRJU7D
          5-SkgaFL1ETP",
  "d":   "iTx2pk7wW-GqJkHcEkFQb2EFyYcO7RugmaW3mRrQVAOUiPommT0I
          dnYK2xDlZh-j"
}
~~~~~~~~~~
{: title="Elliptic Curve P-384 Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "crv", "x", and "y" are necessary for the encryption operation.)

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "ECDH-ES+A128KW",
  "kid": "peregrin.took@tuckborough.example",
  "epk": {
    "kty": "EC",
    "crv": "P-384",
    "x":   "qMz7Lgb3Bc1GNuVn4ZSxLDeDpihGWRwqA2fA1-2IJwDQtKMdpK
            Y0XjNqBbjigcL-",
    "y":   "Ygt6Bc_o29f-DJ_5O3YCMoX2tXXz1ysj9MFRnucByIQoR0y3SV
            mqBBwQISq9grWe"
  },
  "enc": "A128GCM"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
Mzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHBpaEdXUndxQTJmQT
EtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5IjoiWWd0NkJjX28yOWYt
REpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQnlJUW9SMHkzU1ZtcUJCd1FJU3
E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
C3eS2iNXmSTA7W8tBpjs3w
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK results in the following JWE encrypted key:

~~~~~~~~~~
zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
ubzqaTluloMJR8Ec
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation on the Plaintext using the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqKa-xC2
Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbgf0_TQqG9PK
vFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-JlnQ3pssAqQLpUV
_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToPq57d2Q99N10WfPmXVQ38
htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE3Bb8IJ1a04LzqB4Xmp_wgbwHC
VR-bqTKgth3h_NoDLqCxQ0QcG9E78i36iPJuLAzVgS0ChHzo5ULw
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
5cJTRUT3kQRrw_UGwtMtDQ
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
Mzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHBpaEdXUndxQTJmQT
EtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5IjoiWWd0NkJjX28yOWYt
REpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQnlJUW9SMHkzU1ZtcUJCd1FJU3
E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn0
.
zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY
.
ubzqaTluloMJR8Ec
.
zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqKa-xC2
Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbgf0_TQqG9PK
vFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-JlnQ3pssAqQLpUV
_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToPq57d2Q99N10WfPmXVQ38
htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE3Bb8IJ1a04LzqB4Xmp_wgbwHC
VR-bqTKgth3h_NoDLqCxQ0QcG9E78i36iPJuLAzVgS0ChHzo5ULw
.
5cJTRUT3kQRrw_UGwtMtDQ
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY"
    }
  ],
  "protected":
    "eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb
     2tAdHVja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsIm
     NydiI6IlAtMzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHB
     paEdXUndxQTJmQTEtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5
     IjoiWWd0NkJjX28yOWYtREpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQ
     nlJUW9SMHkzU1ZtcUJCd1FJU3E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn
     0",
  "iv":
    "ubzqaTluloMJR8Ec",
  "ciphertext":
    "zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqK
     a-xC2Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbg
     f0_TQqG9PKvFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-
     JlnQ3pssAqQLpUV_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToP
     q57d2Q99N10WfPmXVQ38htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE
     3Bb8IJ1a04LzqB4Xmp_wgbwHCVR-bqTKgth3h_NoDLqCxQ0QcG9E78i36
     iPJuLAzVgS0ChHzo5ULw",
  "tag":
    "5cJTRUT3kQRrw_UGwtMtDQ"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Key Wrap using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2 ## {#jwe-pbes2}

The example illustrates encrypting content using the "PBES2-HS512+A256KW" (PBES2 Password-based Encryption using HMAC-SHA-512 and AES-256-KeyWrap) key encryption algorithm with the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

This example does not use the Plaintext from {{jwe-plaintext}}.  Instead it uses the following JWK-Set object as the plaintext (**NOTE** all whitespace added for readability):

~~~~~~~~~~
{
  "keys": [
    {
      "kty": "oct",
      "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
      "use": "enc",
      "alg": "A128GCM",
      "k":   "XctOhJAkA-pD9Lh7ZgW_2A"
    },
    {
      "kty": "oct",
      "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
      "use": "enc",
      "alg": "A128KW",
      "k":   "GZy6sIZ6wl9NJOKB-jnmVQ"
    },
    {
      "kty": "oct",
      "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
      "use": "enc",
      "alg": "A256GCMKW",
      "k":   "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
    }
  ]
}
~~~~~~~~~~
{: title="Plaintext Content"}

The password plaintext:

~~~~~~~~~~
entrap_o_peter_long_credit_tun
~~~~~~~~~~
{: title="Password"}

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "PBES2-HS512+A256KW",
  "p2s": "8Q1SzinasR3xchYz6ZZcHA",
  "p2c": 8192,
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluYXNSM3
hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
1XjHr2XJOCQQu1VBjgUP1gpsgHqqHQaEwD2PogUMCYI
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given password, salt, and iteration count produces the following encrypted key:

~~~~~~~~~~
dtpBE7O4AvWbuLzPf_lF138DemX6KXdsL2GRm1oWeHNZlu5TqTuJ5A
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
obvv9nee1GDQTucO7EiLUw
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
3ttprUp9nllP7zbqTTONYOVtHnSkWXzEKMBF6XGGDZdX04iM1wsX3qcVPJ85lA
_njOM5AiKxKCdPEpGGvrhgXhBmFqXwBA4MVwAML0LRsc-od_1vG4OP_Y_MVUOZ
Sn89gDh11z8SHHYYYS1Vq8j6vBNEZSoLuJTftIozi_Hyn5jTGMMAN33dFfrHx3
bSfq7ooueLgrrkPA3ATCkFckRmhMuQxrx_wk71qbQkdvRYauZ66rKoyZeygVlu
Ef_dHNFrMoTWbi5iH8ORdEHiH1VLcnMoF-3Wiv2gvmk-aLwgmRF6uUYvccsB4K
5McRpPsxHyv5BhV85PfyiuNPcgfEmQ1EJ8_krTVtVQxF9F6LcUNQ-rua5Iub5Y
09INYdA9fdUe8bs7iFWp3wWBjLx1Kn4BuGeu3LltcRbqI3ob_4F1xhKFpghcKE
ipKmfIqIVvtdEHdS4hq_rP0csShvJop1Qk0E-_4bOmWtCC7slgM2q0USs7FAc_
VGF951uNP8TABCf6
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
F5MFKAu7qA_hE5w5N1iJ5w
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluYXNSM3
hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
.
dtpBE7O4AvWbuLzPf_lF138DemX6KXdsL2GRm1oWeHNZlu5TqTuJ5A
.
obvv9nee1GDQTucO7EiLUw
.
3ttprUp9nllP7zbqTTONYOVtHnSkWXzEKMBF6XGGDZdX04iM1wsX3qcVPJ85lA
_njOM5AiKxKCdPEpGGvrhgXhBmFqXwBA4MVwAML0LRsc-od_1vG4OP_Y_MVUOZ
Sn89gDh11z8SHHYYYS1Vq8j6vBNEZSoLuJTftIozi_Hyn5jTGMMAN33dFfrHx3
bSfq7ooueLgrrkPA3ATCkFckRmhMuQxrx_wk71qbQkdvRYauZ66rKoyZeygVlu
Ef_dHNFrMoTWbi5iH8ORdEHiH1VLcnMoF-3Wiv2gvmk-aLwgmRF6uUYvccsB4K
5McRpPsxHyv5BhV85PfyiuNPcgfEmQ1EJ8_krTVtVQxF9F6LcUNQ-rua5Iub5Y
09INYdA9fdUe8bs7iFWp3wWBjLx1Kn4BuGeu3LltcRbqI3ob_4F1xhKFpghcKE
ipKmfIqIVvtdEHdS4hq_rP0csShvJop1Qk0E-_4bOmWtCC7slgM2q0USs7FAc_
VGF951uNP8TABCf6
.
F5MFKAu7qA_hE5w5N1iJ5w
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "dtpBE7O4AvWbuLzPf_lF138DemX6KXdsL2GRm1oWeHNZlu5TqTuJ5
         A"
    }
  ],
  "protected":
    "eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluY
     XNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJlbmMiOiJBMTI4Q0JDLU
     hTMjU2In0",
  "iv":
    "obvv9nee1GDQTucO7EiLUw",
  "ciphertext":
    "3ttprUp9nllP7zbqTTONYOVtHnSkWXzEKMBF6XGGDZdX04iM1wsX3qcVP
     J85lA_njOM5AiKxKCdPEpGGvrhgXhBmFqXwBA4MVwAML0LRsc-od_1vG4
     OP_Y_MVUOZSn89gDh11z8SHHYYYS1Vq8j6vBNEZSoLuJTftIozi_Hyn5j
     TGMMAN33dFfrHx3bSfq7ooueLgrrkPA3ATCkFckRmhMuQxrx_wk71qbQk
     dvRYauZ66rKoyZeygVluEf_dHNFrMoTWbi5iH8ORdEHiH1VLcnMoF-3Wi
     v2gvmk-aLwgmRF6uUYvccsB4K5McRpPsxHyv5BhV85PfyiuNPcgfEmQ1E
     J8_krTVtVQxF9F6LcUNQ-rua5Iub5Y09INYdA9fdUe8bs7iFWp3wWBjLx
     1Kn4BuGeu3LltcRbqI3ob_4F1xhKFpghcKEipKmfIqIVvtdEHdS4hq_rP
     0csShvJop1Qk0E-_4bOmWtCC7slgM2q0USs7FAc_VGF951uNP8TABCf6",
  "tag":
    "F5MFKAu7qA_hE5w5N1iJ5w"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Direct Encryption using AES-GCM ## {#jwe-dir_gcm}

This example illustrates encrypting content using a previously exchanged key directly and the "A128GCM" (AES-GCM) content encryption algorithm.

The Plaintext content in {{jwe-plaintext}} is used for this example.

The following AES symmetric key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "oct",
  "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
  "use": "enc",
  "alg": "A128GCM",
  "k":   "XctOhJAkA-pD9Lh7ZgW_2A"
}
~~~~~~~~~~

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "dir",
  "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
  "enc": "A128GCM"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
OI-fESJKbHHk1-rA
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the encryption operation on the Plaintext using the given key, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GVG_3Dz
-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5fFlRiEr9is
8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEISWu3Pf4yugvVMpLR
DxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjUHROjh2_QVqpTUwzx2qto
3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5l5XnoqCT0ioaFzeW9zbiAMj_o
1gvWgPLv8HRD9OxMERTCwbJt4O3baG9Roz-5We10hx-sb2EKtN0g
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
mBCmmmn0W0j4BS7ln3nxVA
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
.
.
OI-fESJKbHHk1-rA
.
18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GVG_3Dz
-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5fFlRiEr9is
8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEISWu3Pf4yugvVMpLR
DxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjUHROjh2_QVqpTUwzx2qto
3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5l5XnoqCT0ioaFzeW9zbiAMj_o
1gvWgPLv8HRD9OxMERTCwbJt4O3baG9Roz-5We10hx-sb2EKtN0g
.
mBCmmmn0W0j4BS7ln3nxVA
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "protected":
    "eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3M
     i02MTdiNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "OI-fESJKbHHk1-rA",
  "ciphertext":
    "18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GV
     G_3Dz-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5
     fFlRiEr9is8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEIS
     Wu3Pf4yugvVMpLRDxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjU
     HROjh2_QVqpTUwzx2qto3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5
     l5XnoqCT0ioaFzeW9zbiAMj_o1gvWgPLv8HRD9OxMERTCwbJt4O3baG9R
     oz-5We10hx-sb2EKtN0g",
  "tag":
    "mBCmmmn0W0j4BS7ln3nxVA"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Key Wrap using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2 ## {#jwe-aesgcmkw}

This example illustrates encrypting content using the "A256GCMKW" (AES-256-GCM-KeyWrap) key encryption algorithm with the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

This example uses the Plaintext from {{jwe-plaintext}}.

The following AES symmetric key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "oct",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "use": "enc",
  "alg": "A256GCMKW",
  "k":   "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
}
~~~~~~~~~~
{: title="AES 256-bit Key"}

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "A256GCMKW",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "tag": "7qiY1gOLorD7ro67FZqYRw",
  "iv":  "3llIgu3y7Vu5dZW7",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybzY3RlpxWVJ3
IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
J9
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
a2gN8ASDdVKI86lMJC8rKI8RV8U8OltRlVzygIo48NA
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given AES key and key encryption iv (via the "iv" JWE header parameter) produces the following encrypted key:

~~~~~~~~~~
cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
Z3wPFyzW8czy88sUmzcnlg
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_HEs-Tu
5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLLO4n5LFK0mI
TQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu3Evj2GmvvPIm1WZ
K3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNzc8PRMavtkBO64zmpWTfy
tMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL7RlkXU12fOCc7VJ2X5TtYPPr_
bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7AIcf3KpfzapJmZ3kdZgOg
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
d7dahIDc06hrpWqDiQzaXQ
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybzY3RlpxWVJ3
IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
J9
.
cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE
.
Z3wPFyzW8czy88sUmzcnlg
.
YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_HEs-Tu
5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLLO4n5LFK0mI
TQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu3Evj2GmvvPIm1WZ
K3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNzc8PRMavtkBO64zmpWTfy
tMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL7RlkXU12fOCc7VJ2X5TtYPPr_
bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7AIcf3KpfzapJmZ3kdZgOg
.
W7cYYn27uUYttxShJ2yYhQ
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE"
    }
  ],
  "protected":
    "eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkO
     TUtYjIwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybz
     Y3RlpxWVJ3IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTE
     yOENCQy1IUzI1NiJ9",
  "iv":
    "Z3wPFyzW8czy88sUmzcnlg",
  "ciphertext":
    "YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_H
     Es-Tu5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLL
     O4n5LFK0mITQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu
     3Evj2GmvvPIm1WZK3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNz
     c8PRMavtkBO64zmpWTfytMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL
     7RlkXU12fOCc7VJ2X5TtYPPr_bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7
     AIcf3KpfzapJmZ3kdZgOg",
  "tag":
    "W7cYYn27uUYttxShJ2yYhQ"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Key Wrap using AES-KeyWrap with AES-GCM ## {#jwe-aeskw}

The following example illustrates content encryption using the "A128KW" (AES-128-KeyWrap) key encryption algorithm and the "A128GCM" (AES-128-GCM) content encryption algorithm.

The Plaintext content in {{jwe-plaintext}} is used for this example.

The following AES symmetric key is used (formatted as a JWK object):

~~~~~~~~~~
{
  "kty": "oct",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "use": "enc",
  "alg": "A128KW",
  "k":   "GZy6sIZ6wl9NJOKB-jnmVQ"
}
~~~~~~~~~~
{: title="AES 128-Bit Key"}

The protected JWE header:

~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
'Hv3Kmjt7vR2in57dLm-Pfw
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given AES key produces the following encrypted key:

~~~~~~~~~~
RMMWwegPo5GY-5DeqC51gevcIOQpc4CH
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
wxdDTG0-QnGvBZew
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption algorithm over the Plaintext with the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTipfOin
86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9XxxEs8zw9YPX
baILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5JaojvqXF5F3jkZAaJwa4u
IjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P_VYEb8ptUWmgz4Gg1YFF
tGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9gnAqYnWKLaE3E2hzhxcgtNwNKf
lLSfmV247xbRYZhR8NeJ_GoKCjrH7isFvUM0Uzx43cPpPDypyiGA
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
N7CDBxgruPcQozgqPeihlw
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
.
RMMWwegPo5GY-5DeqC51gevcIOQpc4CH
.
wxdDTG0-QnGvBZew
.
DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTipfOin
86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9XxxEs8zw9YPX
baILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5JaojvqXF5F3jkZAaJwa4u
IjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P_VYEb8ptUWmgz4Gg1YFF
tGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9gnAqYnWKLaE3E2hzhxcgtNwNKf
lLSfmV247xbRYZhR8NeJ_GoKCjrH7isFvUM0Uzx43cPpPDypyiGA
.
N7CDBxgruPcQozgqPeihlw
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "RMMWwegPo5GY-5DeqC51gevcIOQpc4CH"
    }
  ],
  "protected":
    "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
     TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "wxdDTG0-QnGvBZew",
  "ciphertext":
    "DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTi
     pfOin86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9Xx
     xEs8zw9YPXbaILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5Jaojvq
     XF5F3jkZAaJwa4uIjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P
     _VYEb8ptUWmgz4Gg1YFFtGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9g
     nAqYnWKLaE3E2hzhxcgtNwNKflLSfmV247xbRYZhR8NeJ_GoKCjrH7isF
     vUM0Uzx43cPpPDypyiGA",
  "tag":
    "N7CDBxgruPcQozgqPeihlw"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Compressed Content ## {#jwe-compressed}

This example illustrates encrypting content that is first compressed.  It reuses the AES key, key encryption algorithm, and content encryption algorithm from {{jwe-aeskw}}.

The Plaintext content in {{jwe-plaintext}} is used for this example.

The compressed Plaintext:

~~~~~~~~~~
eJxtj0EOwyAMBL-yD0jyh_bQL1Q9EmICCsKVMYry-zpEPVTqycizu15e3OBdgU
qrilahjKrJb9iTRhyGNQq3Ndo8164s56uMoyk1EuakSgIqy4SbweNP4kb0NueB
Sl5IweGUSR1Hn7maW6M5TmdXJr0w5TDh3vSbWVh_YjNdKDhPBrjNmeAyFxp6z5
XtUug_YUtx2Fms5dNEQv0EgiRrXgc8hBeePt1uYQ0
~~~~~~~~~~
{: title="Compressed Plaintext, base64url-encoded"}

The protected JWE header parameters:

~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM",
  "zip": "DEF"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
03x4Y5d1Lk0K2VbMmePmMw
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given AES key produces the following encrypted key:

~~~~~~~~~~
fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
9UnGd0z8-Yx3BFV3
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the compressed Plaintext with the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0dnlB0y
ZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZLaCf6TjK46C
UfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FHpYevNXuE7hokcim
LRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
Im5q_DU2ZafibIuj5GNI5Q
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the Compact serialization:

~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
.
fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5
.
9UnGd0z8-Yx3BFV3
.
b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0dnlB0y
ZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZLaCf6TjK46C
UfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FHpYevNXuE7hokcim
LRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q
.
Im5q_DU2ZafibIuj5GNI5Q
~~~~~~~~~~
{: title="Compact Serialization"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5"
    }
  ],
  "protected":
    "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
     TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiRE
     VGIn0",
  "iv":
    "9UnGd0z8-Yx3BFV3",
  "ciphertext":
    "b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0d
     nlB0yZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZL
     aCf6TjK46CUfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FH
     pYevNXuE7hokcimLRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q",
  "tag":
    "Im5q_DU2ZafibIuj5GNI5Q"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Protecting Specific Header Fields ## {#jwe-somefields}

This example illustrates encrypting content where only certain JWE header parameters are protected.  As this example includes unprotected JWE header parameters, only the JSON serialization is possible.

This example reuses the AES key, key encryption algorithm, and content encryption algorithm from {{jwe-aeskw}}.

The Plaintext content from {{jwe-plaintext}} is used for this example, and compressed as demonstrated in {{jwe-compressed}}.

The unprotected JWE header parameters:

~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "zip": "DEF"
}
~~~~~~~~~~
{: title="Unprotected JWE Header JSON"}

The protected JWE header parameters:

~~~~~~~~~~
{
  "enc": "A128GCM"
}
~~~~~~~~~~
{: title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~
eyJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~
{: title="Protected JWE Header, base64url-encoded"}

The Content Encryption Key (CEK):

~~~~~~~~~~
uGL3QU7R3HMR3ik-oTW82w
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given AES key produces the following encrypted key:

~~~~~~~~~~
MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
HorZstLCLfNNC7TN
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the compressed Plaintext with the given CEK, initialization vector/nonce, and protected JWE header (base64url-encoded) as authenticated data produces the following ciphertext:

~~~~~~~~~~
fOxklZw0MD_ScE71g8eRmcgF5mFiLIk4Fax0iTNYu96PAjskl1ZAZmcvUDiPiA
ZGGU8Q44O_nt6EjXhx20z6Ix2M_TZnfJWH9YtPm-uEzzWU0Yos0k-BqvQ3jOXk
IMj0NCtpNSl6bKiQ7B7qpocXMK834SSIVYyMVW7ifKiSCSBrkALqrobDYEUmH8
wiPdD2WSbn3YSXZj2NFerDl7o0GBTZ-q12AFHWD38
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
TNzmuMZK-VpijGRN4fmfOg
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc"
    }
  ],
  "unprotected": {
    "alg": "A128KW",
    "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
    "zip": "DEF"
  },
  "protected":
    "eyJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "HorZstLCLfNNC7TN",
  "ciphertext":
    "fOxklZw0MD_ScE71g8eRmcgF5mFiLIk4Fax0iTNYu96PAjskl1ZAZmcvU
     DiPiAZGGU8Q44O_nt6EjXhx20z6Ix2M_TZnfJWH9YtPm-uEzzWU0Yos0k
     -BqvQ3jOXkIMj0NCtpNSl6bKiQ7B7qpocXMK834SSIVYyMVW7ifKiSCSB
     rkALqrobDYEUmH8wiPdD2WSbn3YSXZj2NFerDl7o0GBTZ-q12AFHWD38",
  "tag":
    "TNzmuMZK-VpijGRN4fmfOg"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Protecting Content Only ## {#jwe-nofields}

This example illustrates encrypting content where none of the JWE header parameters are protected.  As this example includes only unprotected JWE header parameters, only the JSON serialization is possible.

This example reuses the AES key, key encryption algorithm, and content encryption algorithm from {{jwe-aeskw}}.

The Plaintext content from {{jwe-plaintext}} is used for this example, and compressed as demonstrated in {{jwe-compressed}}.

The unprotected JWE header parameters:

~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM",
  "zip": "DEF"
}
~~~~~~~~~~
{: title="Unprotected JWE Header JSON"}

The Content Encryption Key (CEK):

~~~~~~~~~~
5UVirgqilMhbWpSnM3alUQ
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

Performing the key encryption operation over the CEK with the given AES key produces the following encrypted key:

~~~~~~~~~~
yyuirCy7Hd_nY0gL5Jfq6sJ7RXRR0DtF
~~~~~~~~~~
{: title="Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
zdbIl4BrrziYK55_
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the compressed Plaintext using the given CEK, initialization vector/nonce, and empty string as authenticated data produces the following ciphertext:

~~~~~~~~~~
_Th0nZypKIbnODRLTU0L5tjL1_8Kvlq--xUT3cz9Uc-MfGRluhgY3reY0KX_Er
n2FrSe0ou9FZKA2YH9bRRux6NvmBRdhsELHR0VkbBAADn4GGCBBWXQPRzydbWE
YfRj5a6vYphkINp0L71HuVyxpnS30cJE6khxnTEhJu0bJ4sRmpL7f2w_qs5NXo
TPbVHfBfZ2o2JMwkwehQiLMigTxTbHxoI36wbAyd4
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
J2Q3F_rNJ2szSiSdMENJDw
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "yyuirCy7Hd_nY0gL5Jfq6sJ7RXRR0DtF"
    }
  ],
  "unprotected": {
    "alg": "A128KW",
    "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
    "enc": "A128GCM",
    "zip": "DEF"
  },
  "iv":
    "zdbIl4BrrziYK55_",
  "ciphertext":
    "_Th0nZypKIbnODRLTU0L5tjL1_8Kvlq--xUT3cz9Uc-MfGRluhgY3reY0
     KX_Ern2FrSe0ou9FZKA2YH9bRRux6NvmBRdhsELHR0VkbBAADn4GGCBBW
     XQPRzydbWEYfRj5a6vYphkINp0L71HuVyxpnS30cJE6khxnTEhJu0bJ4s
     RmpL7f2w_qs5NXoTPbVHfBfZ2o2JMwkwehQiLMigTxTbHxoI36wbAyd4",
  "tag":
    "J2Q3F_rNJ2szSiSdMENJDw"
}
~~~~~~~~~~
{: title="JSON Serialization"}


## Encrypting to Multiple Recipients ## {#jwe-multi}

This example illustrates encryption content for multiple recipients. As this example has multiple recipients, only the JSON serialization is possible.

This example reuses the RSA key from {{jwe-rsa15}}, the Elliptic Curve key from {{jwe-ecdh_aeskw}}, and the AES key from {{jwe-aesgcmkw}}.

The Plaintext content from {{jwe-plaintext}} is used in this example, and compressed as demonstrated in {{jwe-compressed}}.

The global unprotected JWE header parameters:

~~~~~~~~~~
{
  "enc": "A128CBC-HS256",
  "zip": "DEF"
}
~~~~~~~~~~
{: title="Global Unprotected JWE Header JSON"}

~~~~~~~~~~
OYs79m0f3LEuMZzmWBCywRn4u8B09BVidJb9j0ojDsY
~~~~~~~~~~
{: title="Content Encryption Key, base64url-encoded"}

The unprotected JWE header parameters for the first recipient:

~~~~~~~~~~
{
  "alg": "RSA1_5",
  "kid": "frodo.baggins@hobbiton.example"
}
~~~~~~~~~~
{: title="Recipient #1 Unprotected JWE Header JSON"}

Performing the "RSA1_5" key encryption operation over the CEK with the first recipient's RSA key produces the following encrypted key:

~~~~~~~~~~
EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t0JkvxtKiO
xibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5MnyQ69GBkMU6Poie-Ct
Q2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSftk7KKjyw38LBuvSOVdokkHWMP4p
VLeUJB1ovbT4M1j3pxUzyM2426sD6LfjorQhY8vsChyDaFST0Oe8uBvcRyA5ma
bEyRYlUet8PRH_CjINMipv7LCDRsKVnr3oHwZEfCJFGNC-w_-Qn4xcmkmxyaz1
-kZEpS_t2kWJsFqx3mg7QAXJBxdGmy6A
~~~~~~~~~~
{: title="Recipient #1 Encrypted Key, base64url-encoded"}

The unprotected JWE header parameters for the second recipient:

~~~~~~~~~~
{
  "alg": "ECDH-ES+A256KW",
  "kid": "peregrin.took@tuckborough.example",
  "epk": {
    "kty": "EC",
    "crv": "P-384",
    "x":   "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkwH
            mwlMi4AxCVzG_I",
    "y":   "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5GM
            CwXwxtgkNeZ32T"
  }
}
~~~~~~~~~~
{: title="Recipient #2 Unprotected JWE Header JSON"}

Performing the "ECDH-ES+A256KW" key encryption operation over the CEK with the given EC key and ephemeral key ("epk" parameter in the recipient's unprotected JWE header) produces the following encrypted key:

~~~~~~~~~~
Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YOw
~~~~~~~~~~
{: title="Recipient #2 Encrypted Key, base64url-encoded"}

The unprotected JWE header parameters for the third recipient:

~~~~~~~~~~
{
  "alg": "A256GCMKW",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "tag": "DOVpODvbotRWOHEqTRcXkg",
  "iv":  "kZtitxRDXfzCS6ZK"
}
~~~~~~~~~~
{: title="Recipient #3 Unprotected JWE Header JSON"}

Performing the "A256GCMKW" key encryption operation over the CEK with the given AES key and initialization vector/nonce (the "iv" parameter in the recipient's unprotected JWE header) produces the following encrypted key (as well as the authentication tag "DOVpODvbotRWOHEqTRcXkg", included in the recipient's JWE header parameter "tag"):

~~~~~~~~~~
iiVL4XCDCnsWCSZCTysGxl41vdnJqIThbumNa9wSQBo
~~~~~~~~~~
{: title="Recipient #3 Encrypted Key, base64url-encoded"}

The initialization vector/nonce:

~~~~~~~~~~
qP1KgJY-vTLW-nMrMSfMYw
~~~~~~~~~~
{: title="Initialization Vector, base64url-encoded"}

Performing the content encryption operation over the compressed Plaintext with the given CEK, initialization vector, and empty string authenticated data produces the following ciphertext:

~~~~~~~~~~
labOfATex-4SHcp4ZcZ87QbLfm0Swhk55BmsYPxrFHFfoXNmutGTHLP2LUmKbH
f60otQKPdwpPGqvhWxT37cjzQMawEeNMWtUdcwwkOqm-c6f_nOXxJdggbRPdoj
Ze0VJRS6BXNFgTu0KJKtC4GJp_O-9oDQuof8o6LtLg-2JiGFBvQPB-krDjwL9F
f3u2ZhNoFYta6IQvh5BqR7XnY87cuu7m8xFxEv0wKmrnqlvc4
~~~~~~~~~~
{: title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~
zWJK47HuwOoZ2OitcrEfUA
~~~~~~~~~~
{: title="Authentication Tag, base64url-encoded"}

The resulting JWE object, using the JSON serialization:

~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t
         0JkvxtKiOxibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5M
         nyQ69GBkMU6Poie-CtQ2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSf
         tk7KKjyw38LBuvSOVdokkHWMP4pVLeUJB1ovbT4M1j3pxUzyM2426
         sD6LfjorQhY8vsChyDaFST0Oe8uBvcRyA5mabEyRYlUet8PRH_CjI
         NMipv7LCDRsKVnr3oHwZEfCJFGNC-w_-Qn4xcmkmxyaz1-kZEpS_t
         2kWJsFqx3mg7QAXJBxdGmy6A",
      "header": {
        "alg": "RSA1_5",
        "kid": "frodo.baggins@hobbiton.example"
      }
    },
    {
      "encrypted_key":
        "Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YO
         w",
      "header": {
        "alg": "ECDH-ES+A256KW",
        "kid": "peregrin.took@tuckborough.example",
        "epk": {
          "kty": "EC",
          "crv": "P-384",
          "x":
            "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkw
             HmwlMi4AxCVzG_I",
          "y":
            "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5G
             MCwXwxtgkNeZ32T"
        }
      }
    },
    {
      "encrypted_key":
        "iiVL4XCDCnsWCSZCTysGxl41vdnJqIThbumNa9wSQBo",
      "header": {
        "alg": "A256GCMKW",
        "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
        "tag": "DOVpODvbotRWOHEqTRcXkg",
        "iv":  "kZtitxRDXfzCS6ZK"
      }
    }
  ],
  "unprotected": {
    "enc": "A128CBC-HS256",
    "zip": "DEF"
  },
  "iv":
    "qP1KgJY-vTLW-nMrMSfMYw",
  "ciphertext":
    "labOfATex-4SHcp4ZcZ87QbLfm0Swhk55BmsYPxrFHFfoXNmutGTHLP2L
     UmKbHf60otQKPdwpPGqvhWxT37cjzQMawEeNMWtUdcwwkOqm-c6f_nOXx
     JdggbRPdojZe0VJRS6BXNFgTu0KJKtC4GJp_O-9oDQuof8o6LtLg-2JiG
     FBvQPB-krDjwL9Ff3u2ZhNoFYta6IQvh5BqR7XnY87cuu7m8xFxEv0wKm
     rnqlvc4",
  "tag":
    "zWJK47HuwOoZ2OitcrEfUA"
}
~~~~~~~~~~
{: title="JSON Serialization"}


# Security Considerations # {#security}


# IANA Considerations # {#iana}

This document has no actions for IANA.


--- back

# Acknowledgements

Thanks to Richard Barnes and Jim Schaad for providing for their input on the outline for this document.

Most of the signature payload content and encrypted plaintext content are quotes from the series of novels collectively known as "The Lord of the Rings", written by J. R. R. Tolkien.
