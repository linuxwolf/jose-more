



JOSE Working Group                                             M. Miller
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                         November 20, 2013
Expires: May 24, 2014


   Examples of Protecting Content using JavaScript Object Signing and
                           Encryption (JOSE)
                     draft-miller-jose-cookbook-00

Abstract

   A set of examples of using JavaScript Object Signing and Encryption
   (JOSE) to protect data.  This document illustrates a representative
   sampling of various JSON Web Signature (JWS) and JSON Web Encryption
   (JWE) results given similar inputs.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 24, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Miller                    Expires May 24, 2014                  [Page 1]

Internet-Draft                JOSE Cookbook                November 2013


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Conventions Used in this Document . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  JSON Web Signature Examples . . . . . . . . . . . . . . . . .   4
     3.1.  RSA v1.5 Signature  . . . . . . . . . . . . . . . . . . .   4
       3.1.1.  Input Factors . . . . . . . . . . . . . . . . . . . .   5
       3.1.2.  Signing Operation . . . . . . . . . . . . . . . . . .   6
       3.1.3.  Output Results  . . . . . . . . . . . . . . . . . . .   6
     3.2.  RSA-PSS Signature . . . . . . . . . . . . . . . . . . . .   7
       3.2.1.  Input Factors . . . . . . . . . . . . . . . . . . . .   7
       3.2.2.  Signing Operation . . . . . . . . . . . . . . . . . .   8
       3.2.3.  Output Results  . . . . . . . . . . . . . . . . . . .   8
     3.3.  ECDSA Signature . . . . . . . . . . . . . . . . . . . . .   9
       3.3.1.  Input Factors . . . . . . . . . . . . . . . . . . . .   9
       3.3.2.  Signing Operation . . . . . . . . . . . . . . . . . .  10
       3.3.3.  Output Results  . . . . . . . . . . . . . . . . . . .  11
     3.4.  HMAC-SHA2 Integrity Protection  . . . . . . . . . . . . .  12
       3.4.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  12
       3.4.2.  Signing Operation . . . . . . . . . . . . . . . . . .  12
       3.4.3.  Output Results  . . . . . . . . . . . . . . . . . . .  13
     3.5.  Protecting Specific Header Fields . . . . . . . . . . . .  13
       3.5.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  14
       3.5.2.  Signing Operation . . . . . . . . . . . . . . . . . .  14
       3.5.3.  Output Results  . . . . . . . . . . . . . . . . . . .  15
     3.6.  Protecting Content Only . . . . . . . . . . . . . . . . .  15
       3.6.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  15
       3.6.2.  Signing Operation . . . . . . . . . . . . . . . . . .  15
       3.6.3.  Output Results  . . . . . . . . . . . . . . . . . . .  16
     3.7.  Multiple Signatures . . . . . . . . . . . . . . . . . . .  16
       3.7.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  17
       3.7.2.  First Signing Operation . . . . . . . . . . . . . . .  17
       3.7.3.  Second Signing Operation  . . . . . . . . . . . . . .  18
       3.7.4.  Third Signing Operation . . . . . . . . . . . . . . .  18
       3.7.5.  Output Results  . . . . . . . . . . . . . . . . . . .  19
   4.  JSON Web Encryption Examples  . . . . . . . . . . . . . . . .  20
     4.1.  Key Encryption using RSA v1.5 and AES-HMAC-SHA2 . . . . .  20
       4.1.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  20
       4.1.2.  Generated Factors . . . . . . . . . . . . . . . . . .  21
       4.1.3.  Encrypting the Key  . . . . . . . . . . . . . . . . .  21
       4.1.4.  Encrypting the Content  . . . . . . . . . . . . . . .  21
       4.1.5.  Output Results  . . . . . . . . . . . . . . . . . . .  23
     4.2.  Key Encryption using RSA-OAEP with A256GCM  . . . . . . .  24
       4.2.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  24
       4.2.2.  Generated Factors . . . . . . . . . . . . . . . . . .  26
       4.2.3.  Encrypting the Key  . . . . . . . . . . . . . . . . .  26
       4.2.4.  Encrypting the Content  . . . . . . . . . . . . . . .  26



Miller                    Expires May 24, 2014                  [Page 2]

Internet-Draft                JOSE Cookbook                November 2013


       4.2.5.  Output Results  . . . . . . . . . . . . . . . . . . .  28
     4.3.  Key Wrap using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2 .  29
       4.3.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  29
       4.3.2.  Generated Factors . . . . . . . . . . . . . . . . . .  31
       4.3.3.  Encrypting the Key  . . . . . . . . . . . . . . . . .  31
       4.3.4.  Encrypting the Content  . . . . . . . . . . . . . . .  31
       4.3.5.  Output Results  . . . . . . . . . . . . . . . . . . .  33
     4.4.  Key Agreement with Key Wrapping using ECDH-ES and AES-
           KeyWrap with AES-GCM  . . . . . . . . . . . . . . . . . .  34
       4.4.1.  Input Factors . . . . . . . . . . . . . . . . . . . .  34
       4.4.2.  Generated Factors . . . . . . . . . . . . . . . . . .  35
       4.4.3.  Encrypting the Key  . . . . . . . . . . . . . . . . .  35
       4.4.4.  Encrypting the Content  . . . . . . . . . . . . . . .  35
       4.4.5.  Output Results  . . . . . . . . . . . . . . . . . . .  37
     4.5.  Key Agreement using ECDH-ES with AES-CBC-HMAC-SHA2  . . .  38
     4.6.  Direct Encryption using AES-GCM . . . . . . . . . . . . .  41
     4.7.  Key Wrap using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2 . .  43
     4.8.  Key Wrap using AES-KeyWrap with AES-GCM . . . . . . . . .  46
     4.9.  Compressed Content  . . . . . . . . . . . . . . . . . . .  48
     4.10. Protecting Specific Header Fields . . . . . . . . . . . .  51
     4.11. Protecting Content Only . . . . . . . . . . . . . . . . .  53
     4.12. Encrypting to Multiple Recipients . . . . . . . . . . . .  55
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  58
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  59
   7.  Informative References  . . . . . . . . . . . . . . . . . . .  59
   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . .  59
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  59

1.  Introduction

   The JavaScript Object Signing and Encryption (JOSE) technologies -
   JSON Web Key (JWK) [I-D.ietf-jose-json-web-key], JSON Web Signature
   (JWS) [I-D.ietf-jose-json-web-signature], JSON Web Encryption (JWE)
   [I-D.ietf-jose-json-web-encryption], and JSON Web Algorithms (JWA)
   [I-D.ietf-jose-json-web-algorithms] - collectively can be used to
   protect content in a myriad of ways.  The full set of permutations is
   extremely large, and might be daunting to some.

   This document provides a number of examples of signing or encrypting
   content using JOSE.  While not exhaustive, it does compile together a
   representative sample of JOSE features.  As much as possible, the
   same signature payload or encryption plaintext content is used to
   illustrate differences in various signing and encryption results.

1.1.  Conventions Used in this Document

   All instances of binary octet strings are represented using [RFC4648]
   base64url encoding.



Miller                    Expires May 24, 2014                  [Page 3]

Internet-Draft                JOSE Cookbook                November 2013


   Unless otherwise stated, all examples include both the Compact and
   JSON serializations.

   All of the examples in this document include whitespace to improve
   formatting and readability.  Except for plaintext or payload content,
   whitespace is not part of the cryptographic operations.  Plaintext or
   payload content does include whitespace (unless otherwise noted),
   although line breaks (U+000A LINE FEED) have replaced spaces (U+0020
   SPACE) is some cases to improve readability.

2.  Terminology

   This document inherits terminology regarding JSON Web Key (JWK)
   technology from [I-D.ietf-jose-json-web-key], terminology regarding
   JSON Web Signature (JWS) technology from
   [I-D.ietf-jose-json-web-signature], terminology regarding JSON Web
   Encryption (JWE) technology from [I-D.ietf-jose-json-web-encryption],
   and terminology regarding algorithms from
   [I-D.ietf-jose-json-web-algorithms].

3.  JSON Web Signature Examples

   The following sections demonstrate how to generate various JWS
   objects.

   All of the succeeding examples use the following payload plaintext,
   serialized as UTF-8, with line breaks (U+000A LINE FEED) replacing
   some " " (U+0020 SPACE) characters to improve formatting:

   It's a dangerous business, Frodo, going out your door. You
   step onto the road, and if you don't keep your feet, there's
   no knowing where you might be swept off to.

                    Figure 1: Payload content plaintext

   The Payload - with line breaks (U+000A LINE FEED) replaced with " "
   (U+0020 SPACE) - encoded as [RFC4648] base64url:

   SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
   VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
   J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
   UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg

               Figure 2: Payload content, base64url-encoded

3.1.  RSA v1.5 Signature





Miller                    Expires May 24, 2014                  [Page 4]

Internet-Draft                JOSE Cookbook                November 2013


   This example illustrates signing content using the "RS256" (RSASSA-
   PKCS1-v1_5 with SHA-256) algorithm.

3.1.1.  Input Factors

   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  RSA private key; this example uses the key from Figure 3.

   o  "alg" parameter of "RS256".

   {
     "kty": "RSA",
     "kid": "bilbo.baggins@hobbiton.example",
     "use": "sig",
     "n":   "n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rH
             VTeT-O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRB
             SFKrKb2wqVwGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqk
             HHig3RBordaZ6Aj-oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD
             1NNLYD5lFHpPI9bTwJlsde3uhGqC0ZCuEHg8lhzwOHrtIQbS0F
             Vbb9k3-tVTU4fg_3L_vniUFAKwuCLqKnS2BYwdq_mzSnbLY7h_
             qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5gHdrNP5zw",
     "e":   "AQAB",
     "d":   "bWUC9B-EFRIo8kpGfh0ZuyGPvMNKvYWNtB_ikiH9k20eT-O1q_
             I78eiZkpXxXQ0UTEs2LsNRS-8uJbvQ-A1irkwMSMkK1J3XTGgd
             rhCku9gRldY7sNA_AKZGh-Q661_42rINLRCe8W-nZ34ui_qOfk
             LnK9QWDDqpaIsA-bMwWWSDFu2MUBYwkHTMEzLYGqOe04noqeq1
             hExBTHBOBdkMXiuFhUq1BU6l-DqEiWxqg82sXt2h-LMnT3046A
             OYJoRioz75tSUQfGCshWTBnP5uDjd18kKhyv07lhfSJdrPdM5P
             lyl21hsFf4L_mHCuoFau7gdsPfHPxxjVOcOpBrQzwQ",
     "p":   "3Slxg_DwTXJcb6095RoXygQCAZ5RnAvZlno1yhHtnUex_fp7AZ
             _9nRaO7HX_-SFfGQeutao2TDjDAWU4Vupk8rw9JR0AzZ0N2fvu
             IAmr_WCsmGpeNqQnev1T7IyEsnh8UMt-n5CafhkikzhEsrmndH
             6LxOrvRJlsPp6Zv8bUq0k",
     "q":   "uKE2dh-cTf6ERF4k4e_jy78GfPYUIaUyoSSJuBzp3Cubk3OCqs
             6grT8bR_cu0Dm1MZwWmtdqDyI95HrUeq3MP15vMMON8lHTeZu2
             lmKvwqW7anV5UzhM1iZ7z4yMkuUwFWoBvyY898EXvRD-hdqRxH
             lSqAZ192zB3pVFJ0s7pFc",
     "dp":  "B8PVvXkvJrj2L-GYQ7v3y9r6Kw5g9SahXBwsWUzp19TVlgI-YV
             85q1NIb1rxQtD-IsXXR3-TanevuRPRt5OBOdiMGQp8pbt26glj
             YfKU_E9xn-RULHz0-ed9E9gXLKD4VGngpz-PfQ_q29pk5xWHoJ
             p009Qf1HvChixRX59ehik",
     "dq":  "CLDmDGduhylc9o7r84rEUVn7pzQ6PF83Y-iBZx5NT-TpnOZKF1
             pErAMVeKzFEl41DlHHqqBLSM0W1sOFbwTxYWZDm6sI6og5iTbw
             QGIC3gnJKbi_7k_vJgGHwHxgPaX2PnvP-zyEkDERuf-ry4c_Z1



Miller                    Expires May 24, 2014                  [Page 5]

Internet-Draft                JOSE Cookbook                November 2013


             1Cq9AqC2yeL6kdKT1cYF8",
     "qi":  "3PiqvXQN0zwMeE-sBvZgi289XP9XCQF3VWqPzMKnIgQp7_Tugo
             6-NZBKCQsMf3HaEGBjTVJs_jcK8-TRXvaKe-7ZMaQj8VfBdYks
             sbu0NKDDhjJ-GtiseaDVWt7dcH0cfwxgFUHpQh7FoCrjFJ6h6Z
             EpMF6xmujs4qMpPz8aaI4"
   }

             Figure 3: RSA 2048-bit Private Key, in JWK format

3.1.2.  Signing Operation

   The following are generated to complete the signing operation:

   o  Protected JWS Header; this example uses the header from Figure 4,
      encoded using [RFC4648] base64url to produce Figure 5.

   {
     "alg": "RS256",
     "kid": "bilbo.baggins@hobbiton.example"
   }

                    Figure 4: Protected JWS Header JSON

   eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
   hhbXBsZSJ9

             Figure 5: Protected JWS Header, base64url-encoded

   Performing the signature operation over the combined protected JWS
   header (Figure 5) and Payload content (Figure 2) produces the
   following signature:

   jYc0gEV3V-RogN63dfD39ubQDvRFpqT0pYN2zmDfhxzLEqvWNFmINxPHuBZyNb
   8FDgfU7oFPgLMdbzWP8dzebwCAQH1j_MV98HMMoaQweDy8L_6XBy6JjcxGne_o
   GDyMM-gBm6VyW_xqK03pLEvmUrUlFLAVWuMpkd675wX8lPtiiEmswOqph6aCtA
   LnBDMTUOlFzPpOb6B6OXctf4AG1cTfzcbyLWIGhGjqnPdqmoHldn-57eRT-G-R
   -UR_XcxxvQ1b7gYAhh5_367tNnlnhIvv0RNr2UaqtnSG50B3TUVdDuJ0eHmPxW
   dD6kVwiEIYeHPT4uhaRe2XgbTSx2pTQg

                  Figure 6: Signature, base64url-encoded

3.1.3.  Output Results

   The resulting JWS object, using the Compact serialization:

   eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
   hhbXBsZSJ9
   .



Miller                    Expires May 24, 2014                  [Page 6]

Internet-Draft                JOSE Cookbook                November 2013


   SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
   VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
   J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
   UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
   .
   jYc0gEV3V-RogN63dfD39ubQDvRFpqT0pYN2zmDfhxzLEqvWNFmINxPHuBZyNb
   8FDgfU7oFPgLMdbzWP8dzebwCAQH1j_MV98HMMoaQweDy8L_6XBy6JjcxGne_o
   GDyMM-gBm6VyW_xqK03pLEvmUrUlFLAVWuMpkd675wX8lPtiiEmswOqph6aCtA
   LnBDMTUOlFzPpOb6B6OXctf4AG1cTfzcbyLWIGhGjqnPdqmoHldn-57eRT-G-R
   -UR_XcxxvQ1b7gYAhh5_367tNnlnhIvv0RNr2UaqtnSG50B3TUVdDuJ0eHmPxW
   dD6kVwiEIYeHPT4uhaRe2XgbTSx2pTQg

                      Figure 7: Compact Serialization

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "protected":
           "eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iY
            ml0b24uZXhhbXBsZSJ9",
         "signature":
           "jYc0gEV3V-RogN63dfD39ubQDvRFpqT0pYN2zmDfhxzLEqvWNFmIN
            xPHuBZyNb8FDgfU7oFPgLMdbzWP8dzebwCAQH1j_MV98HMMoaQweD
            y8L_6XBy6JjcxGne_oGDyMM-gBm6VyW_xqK03pLEvmUrUlFLAVWuM
            pkd675wX8lPtiiEmswOqph6aCtALnBDMTUOlFzPpOb6B6OXctf4AG
            1cTfzcbyLWIGhGjqnPdqmoHldn-57eRT-G-R-UR_XcxxvQ1b7gYAh
            h5_367tNnlnhIvv0RNr2UaqtnSG50B3TUVdDuJ0eHmPxWdD6kVwiE
            IYeHPT4uhaRe2XgbTSx2pTQg"
       }
     ]
   }

                       Figure 8: JSON Serialization

3.2.  RSA-PSS Signature

   This example illustrates signing content using the "PS256" (RSASSA-
   PSS with SHA-256) algorithm.

3.2.1.  Input Factors




Miller                    Expires May 24, 2014                  [Page 7]

Internet-Draft                JOSE Cookbook                November 2013


   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  RSA private key; this example uses the key from Figure 3.

   o  "alg" parameter of "RS256".

3.2.2.  Signing Operation

   The following are generated to complete the signing operation:

   o  Protected JWS Header; this example uses the header from Figure 9,
      encoded using [RFC4648] base64url to produce Figure 10.

   {
     "alg": "PS384",
     "kid": "bilbo.baggins@hobbiton.example"
   }

                    Figure 9: Protected JWS Header JSON

   eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
   hhbXBsZSJ9

            Figure 10: Protected JWS Header, base64url-encoded

   Performing the signature operation over the combined protected JWS
   header (Figure 10) and Payload content (Figure 2) produces the
   following signature:

   kmV2DSGzAWL3qq4fZOpOfW1Jn-qFa0OyEOtaL-XiDt_JQVnhurpQlT698iBkiy
   wXRzcvwyY-UgeTrCDT6kPAZHN3Tj6l_bsPwHt7B1AaphZObG94tYCdyQlwdrCy
   lBBaDMwwjQuSvL9MP40KLAlV5BGmnps-2rAUK9VL_HmKRcjo2dQ_VRfbaCSmmI
   -aohWvcdptMyI6kZhHL_zLCOWO5RoY5YWV42u46ZdW-e06QgBZkzdHEmS2Aimx
   EIy6PamU6FKvRLR3s8tiagdmBEwqiXUoRq5i3VL-XRvGMtk6jUonloTOii-nsU
   6jN1AwrFGwe7kd33X6AX9CaMtOJaUZVw

                  Figure 11: Signature, base64url-encoded

3.2.3.  Output Results

   The resulting JWS object, using the Compact serialization:

   eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
   hhbXBsZSJ9
   .



Miller                    Expires May 24, 2014                  [Page 8]

Internet-Draft                JOSE Cookbook                November 2013


   SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
   VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
   J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
   UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
   .
   kmV2DSGzAWL3qq4fZOpOfW1Jn-qFa0OyEOtaL-XiDt_JQVnhurpQlT698iBkiy
   wXRzcvwyY-UgeTrCDT6kPAZHN3Tj6l_bsPwHt7B1AaphZObG94tYCdyQlwdrCy
   lBBaDMwwjQuSvL9MP40KLAlV5BGmnps-2rAUK9VL_HmKRcjo2dQ_VRfbaCSmmI
   -aohWvcdptMyI6kZhHL_zLCOWO5RoY5YWV42u46ZdW-e06QgBZkzdHEmS2Aimx
   EIy6PamU6FKvRLR3s8tiagdmBEwqiXUoRq5i3VL-XRvGMtk6jUonloTOii-nsU
   6jN1AwrFGwe7kd33X6AX9CaMtOJaUZVw

                     Figure 12: Compact Serialization

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "protected":
           "eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iY
            ml0b24uZXhhbXBsZSJ9",
         "signature":
           "kmV2DSGzAWL3qq4fZOpOfW1Jn-qFa0OyEOtaL-XiDt_JQVnhurpQl
            T698iBkiywXRzcvwyY-UgeTrCDT6kPAZHN3Tj6l_bsPwHt7B1Aaph
            ZObG94tYCdyQlwdrCylBBaDMwwjQuSvL9MP40KLAlV5BGmnps-2rA
            UK9VL_HmKRcjo2dQ_VRfbaCSmmI-aohWvcdptMyI6kZhHL_zLCOWO
            5RoY5YWV42u46ZdW-e06QgBZkzdHEmS2AimxEIy6PamU6FKvRLR3s
            8tiagdmBEwqiXUoRq5i3VL-XRvGMtk6jUonloTOii-nsU6jN1AwrF
            Gwe7kd33X6AX9CaMtOJaUZVw"
       }
     ]
   }

                       Figure 13: JSON Serialization

3.3.  ECDSA Signature

   This example illustrates signing content using the "ES512" (ECDSA
   with curve P-521 and SHA-512) algorithm.

3.3.1.  Input Factors




Miller                    Expires May 24, 2014                  [Page 9]

Internet-Draft                JOSE Cookbook                November 2013


   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  EC private key on the curve P-521; this example uses the key from
      Figure 14.

   o  "alg" parameter of "ES512"

   {
     "kty": "EC",
     "kid": "bilbo.baggins@hobbiton.example",
     "use": "sig",
     "crv": "P-521",
     "x":   "AHKZLLOsCOzz5cY97ewNUajB957y-C-U88c3v13nmGZx6sYl_oJX
             u9A5RkTKqjqvjyekWF-7ytDyRXYgCF5cj0Kt",
     "y":   "AdymlHvOiLxXkEhayXQnNCvDX4h9htZaCJN34kfmC6pV5OhQHira
             VySsUdaQkAgDPrwQrJmbnX9cwlGfP-HqHZR1",
     "d":   "CFE43av1ypdfWGD5GgjpHW1fmnatQBh2akdmgLVc0znoq2xytfrN
             sqKlCsJb0IZkfdPi5umehMosNgn98Xf-sm0"
   }

                Figure 14: Elliptic Curve P-521 Private Key

3.3.2.  Signing Operation

   The following are generated before beginning the signature process:

   o  Protected JWS Header; this example uses the header from Figure 15,
      encoded using [RFC4648] base64url to produce Figure 16.

   {
     "alg": "ES512",
     "kid": "bilbo.baggins@hobbiton.example"
   }

                   Figure 15: Protected JWS Header JSON

   eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
   hhbXBsZSJ9

            Figure 16: Protected JWS Header, base64url-encoded

   Performing the signature operation over the combined protected JWS
   header (Figure 16) and Payload content ({{jws-payload_b64u) produces
   the following signature:




Miller                    Expires May 24, 2014                 [Page 10]

Internet-Draft                JOSE Cookbook                November 2013


   GU4icJRWWqP0nDHX2HqiIZGueMWosZnx-RHjbNkkuJuVtW6ylbiHAHuOIuH9RD
   dnildrg7VGvnjVK2Jv_47gyLQc8kweURgG5Zg6vauw6TyH7feCxMpfZ8BEqLSL
   cLa_UUwYNLAFMB3FwQMIgSJJi7u510k1B6Nh-KcNJmViDeD2gA

                  Figure 17: Signature, base64url-encoded

3.3.3.  Output Results

   The resulting JWS object, using the Compact serialization:

   eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
   hhbXBsZSJ9
   .
   SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3V
   yIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9uJ3
   Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3Ugb
   WlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
   .
   GU4icJRWWqP0nDHX2HqiIZGueMWosZnx-RHjbNkkuJuVtW6ylbiHAHuOIuH9RD
   dnildrg7VGvnjVK2Jv_47gyLQc8kweURgG5Zg6vauw6TyH7feCxMpfZ8BEqLSL
   cLa_UUwYNLAFMB3FwQMIgSJJi7u510k1B6Nh-KcNJmViDeD2gA

                     Figure 18: Compact Serialization

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "protected":
           "eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iY
            ml0b24uZXhhbXBsZSJ9",
         "signature":
           "GU4icJRWWqP0nDHX2HqiIZGueMWosZnx-RHjbNkkuJuVtW6ylbiHA
            HuOIuH9RDdnildrg7VGvnjVK2Jv_47gyLQc8kweURgG5Zg6vauw6T
            yH7feCxMpfZ8BEqLSLcLa_UUwYNLAFMB3FwQMIgSJJi7u510k1B6N
            h-KcNJmViDeD2gA"
       }
     ]
   }

                       Figure 19: JSON Serialization




Miller                    Expires May 24, 2014                 [Page 11]

Internet-Draft                JOSE Cookbook                November 2013


3.4.  HMAC-SHA2 Integrity Protection

   This example illustrates integrity protecting content using the
   "HS256" (HMAC-SHA-256) algorithm.

3.4.1.  Input Factors

   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  AES symmetric key; this example uses the key from Figure 20.

   o  "alg" parameter of "HS256".

   {
     "kty": "oct",
     "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037",
     "use": "sig",
     "k":   "hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg"
   }

                   Figure 20: AES 256-bit symmetric key

3.4.2.  Signing Operation

   The following are generated before completing the signing operation:

   o  Protected JWS Header; this example uses the header from Figure 21,
      encoded using [RFC4648] base64url to produce Figure 22.

   {
     "alg": "HS256",
     "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
   }

                   Figure 21: Protected JWS Header JSON

   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
   VlZjMxNGJjNzAzNyJ9

            Figure 22: Protected JWS Header, base64url-encoded

   Performing the signature operation over the combined protected JWS
   header (Figure 22) and Payload content (Figure 2) produces the
   following signature:




Miller                    Expires May 24, 2014                 [Page 12]

Internet-Draft                JOSE Cookbook                November 2013


   BC8xgQaFNKeZieRI0z7wDzbpRyG_ombR9gDU22IBJEM

                  Figure 23: Signature, base64url-encoded

3.4.3.  Output Results

   The resulting JWS object, using the Compact serialization:

   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
   VlZjMxNGJjNzAzNyJ9
   .
   SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91dCB5b3
   VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZiB5b3UgZG9u
   J3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2luZyB3aGVyZSB5b3
   UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg
   .
   BC8xgQaFNKeZieRI0z7wDzbpRyG_ombR9gDU22IBJEM

                     Figure 24: Compact Serialization

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "protected":
           "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxY
            i1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
         "signature":
           "BC8xgQaFNKeZieRI0z7wDzbpRyG_ombR9gDU22IBJEM"
       }
     ]
   }

                       Figure 25: JSON Serialization

3.5.  Protecting Specific Header Fields

   This example illustrates a signature where only certain header
   parameters are protected.  Since this example contains both
   unprotected and protected header parameters, only the JSON
   serialization is possible.




Miller                    Expires May 24, 2014                 [Page 13]

Internet-Draft                JOSE Cookbook                November 2013


3.5.1.  Input Factors

   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  Signing key; this example uses the AES symmetric key from Figure
      20.

   o  Signing algorithm; this example uses "RS256".

3.5.2.  Signing Operation

   The following are generated before completing the signing operation:

   o  Protected JWS Header; this example uses the header from Figure 26,
      encoded using [RFC4648] base64url to produce Figure 27.

   o  Unprotected JWS Header; this example uses the header from Figure
      28.

   The protected JWS header parameters:

   {
     "alg": "HS256"
   }

                   Figure 26: Protected JWS Header JSON

   eyJhbGciOiJIUzI1NiJ9

            Figure 27: Protected JWS Header, base64url-encoded

   {
     "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
   }

                  Figure 28: Unprotected JWS Header JSON

   Performing the signature operation over the combined protected JWS
   header (Figure 27) and Payload content (Figure 2) produces the
   following signature:

   LHbXRdr8vWfAWIPsViW2RDE5edTLiChP_6fRTDbwHBM

                  Figure 29: Signature, base64url-encoded




Miller                    Expires May 24, 2014                 [Page 14]

Internet-Draft                JOSE Cookbook                November 2013


3.5.3.  Output Results

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "protected":
           "eyJhbGciOiJIUzI1NiJ9",
         "header": {
           "kid":
             "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
         },
         "signature":
           "LHbXRdr8vWfAWIPsViW2RDE5edTLiChP_6fRTDbwHBM"
       }
     ]
   }

                       Figure 30: JSON Serialization

3.6.  Protecting Content Only

   This example illustrates a signature where none of the header
   parameters are protected.  Since this example contains only
   unprotected header parameters, only the JSON serialization is
   possible.

3.6.1.  Input Factors

   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  Signing key; this example uses the AES key from Figure 20.

   o  Signing algorithm; this example uses "RS256"

3.6.2.  Signing Operation

   The following are generated before completing the signing operation:




Miller                    Expires May 24, 2014                 [Page 15]

Internet-Draft                JOSE Cookbook                November 2013


   o  Unprotected JWS Header; this example uses the header from Figure
      31.

   {
     "alg": "HS256",
     "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
   }

                  Figure 31: Unprotected JWS Header JSON

   Performing the signature operation over the combined empty string (as
   there is no protected JWS header) and Payload content (Figure 2)
   produces the following signature:

   RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08

                  Figure 32: Signature, base64url-encoded

3.6.3.  Output Results

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "header": {
           "alg":
             "HS256",
           "kid":
             "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
         },
         "signature":
           "RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08"
       }
     ]
   }

                            JSON Serialization

3.7.  Multiple Signatures






Miller                    Expires May 24, 2014                 [Page 16]

Internet-Draft                JOSE Cookbook                November 2013


   This example illustrates multiple signatures applied to the same
   payload.  Since this example contains more than one signature, only
   the JSON serialization is possible.

3.7.1.  Input Factors

   The following are supplied before beginning the signing operation:

   o  Payload content; this example uses the content from Figure 1,
      encoded using [RFC4648] base64url to produce Figure 2.

   o  Signing keys; this example uses the following:

      *  RSA private key from Figure 3 for the first signature

      *  EC private key from Figure 14 for the second signature

      *  AES symmetric key from Figure 20 for the third signature

   o  Signing algorithms; this example uses the following:

      *  "RS256" for the first signature

      *  "ES512" for the second signature

      *  "HS256" for the third signature

3.7.2.  First Signing Operation

   The following are generated before completing the first signing
   operation:

   o  Unprotected JWS Header; this example uses the header from Figure
      33.

   {
     "alg": "RS256",
     "kid": "bilbo.baggins@hobbiton.example"
   }

            Figure 33: Signature #1 unprotected JWS Header JSON

   Performing the first signature operation over the combined empty
   string (as there is no proteced JWS header) and the Payload content
   (Figure 2) produces the following signature:

   ZWNbrJhJ2h8tU2VRuSRiyfNQzcTyOzEHAXJtUrW5rfhbDQ0BvTVkanmE1vzQX3
   Nv6CUMbNSsgcPVtk445t8fD-A8Eo_2Czi5STRFVNDVIiPTkw1iWGYUsKOHFEWy



Miller                    Expires May 24, 2014                 [Page 17]

Internet-Draft                JOSE Cookbook                November 2013


   Q3lcKOI77ppFgmkBypdqtYQ1E4OB6gOuK4wF3f2s0RWpm8jUC5u-1KPwqFmGR3
   JsDxIIITaD7DbLxPN3Cm7e4JLireOrZtaeQxypKT1_D0OMMo0L3EejyPB6FKkf
   n118HQ4hwGsTg_24ZsiV94ep64nROWR-R4Gkxpr61uQFvy6IeS4kV6n--USD8N
   5m4zLwljEWssVakmr__aq7MUBniv5vtA

                Figure 34: Signature #1, base64url-encoded

3.7.3.  Second Signing Operation

   The following are generated before completing the second signing
   operation:

   o  Unprotected JWS Header; this example uses the header from Figure
      35.

   {
     "alg": "ES512",
     "kid": "bilbo.baggins@hobbiton.example"
   }

         Figure 35: Unprotected JWS Header JSON, second signature

   Performing the second signature operation over the combined empty
   string (as there is no protected JWS header) and Payload content
   (Figure 2) produces the following signature:

   GliCVJY7BmN6pRTLfpWIKBjczIXDJjFlXluppc24eYWPCJCNP8z1YRp9mBn7wq
   UkU0xPaSzcq-GppxhQTUq27TsORK11Ab3i74DiNmsy_usLDyzlSh2UCW-jF6WA
   H1jq0fCa32H4zxnTIJV_uwMDyLuuXdwgHLfDoA1hEyUoqeY50A

                Figure 36: Signature #2, base64url-encoded

3.7.4.  Third Signing Operation

   The following are generated before completing the third signing
   operation:

   o  Unprotected JWS Header; this example uses the header from Figure
      37.

   {
     "alg": "HS256",
     "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
   }

          Figure 37: Unprotected JWS Header JSON, third signature





Miller                    Expires May 24, 2014                 [Page 18]

Internet-Draft                JOSE Cookbook                November 2013


   Performing the third signature operation over the combined empty
   string (as there is no protected JWS header) and Payload content
   (Figure 2) produces the following signature:

   RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08

                Figure 38: Signature #3, base64url-encoded

3.7.5.  Output Results

   The resulting JWS object, using the JSON serialization:

   {
     "payload":
       "SXQncyBhIGRhbmdlcm91cyBidXNpbmVzcywgRnJvZG8sIGdvaW5nIG91d
        CB5b3VyIGRvb3IuIFlvdSBzdGVwIG9udG8gdGhlIHJvYWQsIGFuZCBpZi
        B5b3UgZG9uJ3Qga2VlcCB5b3VyIGZlZXQsIHRoZXJlJ3Mgbm8ga25vd2l
        uZyB3aGVyZSB5b3UgbWlnaHQgYmUgc3dlcHQgb2ZmIHRvLg",
     "signatures": [
       {
         "header": {
           "alg": "RS256",
           "kid": "bilbo.baggins@hobbiton.example"
         },
         "signature":
           "ZWNbrJhJ2h8tU2VRuSRiyfNQzcTyOzEHAXJtUrW5rfhbDQ0BvTVka
            nmE1vzQX3Nv6CUMbNSsgcPVtk445t8fD-A8Eo_2Czi5STRFVNDVIi
            PTkw1iWGYUsKOHFEWyQ3lcKOI77ppFgmkBypdqtYQ1E4OB6gOuK4w
            F3f2s0RWpm8jUC5u-1KPwqFmGR3JsDxIIITaD7DbLxPN3Cm7e4JLi
            reOrZtaeQxypKT1_D0OMMo0L3EejyPB6FKkfn118HQ4hwGsTg_24Z
            siV94ep64nROWR-R4Gkxpr61uQFvy6IeS4kV6n--USD8N5m4zLwlj
            EWssVakmr__aq7MUBniv5vtA"
       },
       {
         "header": {
           "alg": "ES512",
           "kid": "bilbo.baggins@hobbiton.example"
         },
         "signature":
           "GliCVJY7BmN6pRTLfpWIKBjczIXDJjFlXluppc24eYWPCJCNP8z1Y
            Rp9mBn7wqUkU0xPaSzcq-GppxhQTUq27TsORK11Ab3i74DiNmsy_u
            sLDyzlSh2UCW-jF6WAH1jq0fCa32H4zxnTIJV_uwMDyLuuXdwgHLf
            DoA1hEyUoqeY50A"
       },
       {
         "header": {
           "alg": "HS256",
           "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"



Miller                    Expires May 24, 2014                 [Page 19]

Internet-Draft                JOSE Cookbook                November 2013


         },
         "signature":
           "RDrY7zngV8Mi0agUZpWOyS2WSIziPslf9tQllQYXC08"
       }
     ]
   }

                       Figure 39: JSON Serialization

4.  JSON Web Encryption Examples

   The following sections demonstrate how to generate various JWE
   objects.

   All of the succeeding examples (unless otherwise noted) use the
   following plaintext content, serialized as UTF-8, with line breaks
   (U+000A LINE FEED) replacing some " " (U+0020 SPACE) characters to
   improve formatting:

   You can trust us to stick with you through thick and thin--to
   the bitter end. And you can trust us to keep any secret of
   yours--closer than you keep it yourself. But you cannot trust
   us to let you face trouble alone, and go off without a word.
   We are your friends, Frodo.

                       Figure 40: Plaintext content

4.1.  Key Encryption using RSA v1.5 and AES-HMAC-SHA2

   This example illustrates encrypting content using the "RSA1_5"
   (RSAES-PKCS1-v1_5) key encryption algorithm and the "A128CBC-HS256"
   (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

4.1.1.  Input Factors

   The following are supplied before beginning the encryption process:

   o  Plaintext content; this example uses the content from Figure 40.
      The Plaintext content from Figure 40 is used for this example.

   o  RSA public key; this example uses the key from Figure 41.

   o  "alg" parameter of "RSA1_5".

   o  "enc" parameter of "A128CBC-HS256".

   {
     "kty": "RSA",



Miller                    Expires May 24, 2014                 [Page 20]

Internet-Draft                JOSE Cookbook                November 2013


     "kid": "frodo.baggins@hobbiton.example",
     "use": "enc",
     "n":   "maxhbsmBtdQ3CNrKvprUE6n9lYcregDMLYNeTAWcLj8NnPU9XIYe
             gTHVHQjxKDSHP2l-F5jS7sppG1wgdAqZyhnWvXhYNvcM7RfgKxqN
             x_xAHx6f3yy7s-M9PSNCwPC2lh6UAkR4I00EhV9lrypM9Pi4lBUo
             p9t5fS9W5UNwaAllhrd-osQGPjIeI1deHTwx-ZTHu3C60Pu_LJIl
             6hKn9wbwaUmA4cR5Bd2pgbaY7ASgsjCUbtYJaNIHSoHXprUdJZKU
             MAzV0WOKPfA6OPI4oypBadjvMZ4ZAj3BnXaSYsEZhaueTXvZB4eZ
             OAjIyh2e_VOIKVMsnDrJYAVotGlvMQ",
     "e":   "AQAB"
   }

                Figure 41: RSA 2048-bit Key, in JWK format

   (*NOTE*: While the key includes the private parameters, only the
   public parameters "e" and "n" are necessary for the encryption
   operation.)

4.1.2.  Generated Factors

   The following are generated before encrypting:

   o  AES symmetric key as the Content Encryption Key (CEK); this
      example uses the key from Figure 42

   vQ6_Pof-pnIBBB_qhAxzuusbc25hFCB1pJuBIN7yMNU

           Figure 42: Content Encryption Key, base64url-encoded

4.1.3.  Encrypting the Key

   Performing the key encryption operation over the CEK (Figure 42;
   encoded as an octet string) with the RSA key (Figure 41) results in
   the following encrypted key:

   IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4sJ7xpNo
   vR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1vQuC_TYslbSDLHx
   nnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJmvWt_XrDp9tBby0xyjdwd
   teAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2AKyuE10KEMbBo8EJVf1PP1JSS73qy
   UqEt8oo0OHlYTicOwwwwhyiNshdrA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJa
   B-u6qkDMAwA1tJEch4R58z9WsYKyrhAw

                Figure 43: Encrypted Key, base64url-encoded

4.1.4.  Encrypting the Content

   The following are generated before encrypting the plaintext:




Miller                    Expires May 24, 2014                 [Page 21]

Internet-Draft                JOSE Cookbook                November 2013


   o  Protected JWE Header; this example uses the header from Figure 44,
      encoded using [RFC4648] base64url to produce Figure 45.

   o  Initialization vector/none; this example uses the initialization
      vector from Figure 46

   {
     "alg": "RSA1_5",
     "kid": "frodo.baggins@hobbiton.example",
     "enc": "A128CBC-HS256"
   }

                   Figure 44: Protected JWE Header JSON

   eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
   V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0

            Figure 45: Protected JWE Header, base64url-encoded

   mR-7lneQlGq9vxe_udL4LA

            Figure 46: Initialization Vector, base64url-encoded

   Performing the content encryption operation on the Plaintext (Figure
   40) using the following:

   o  CEK (Figure 42), encoded as an octet string;

   o  Initialization vector/nonce (Figure 46), encoded as an octet
      string; and

   o  Protected JWE header (Figure 44) as authenticated data

   produces the following:

   o  Ciphertext from Figure 47.

   o  Authentication tag from Figure 48.

   LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7zqSkl
   a_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVweYeYc_l7m2
   vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8-PSEXb4GlBi22iQ
   goXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maWZiglK4XckGv7-whchA42
   VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--aTLxGtl9sR7z1ZgAyfRqoSs0S
   op9J35heE89JveLIAjnuXH2ShsF0lW6T4HEYXFh9QsAF4TRdnpRs4

                 Figure 47: Ciphertext, base64url-encoded




Miller                    Expires May 24, 2014                 [Page 22]

Internet-Draft                JOSE Cookbook                November 2013


   3AIdtJkgAkWuhBdFo8iL8A

             Figure 48: Authentication Tag, base64url-encoded

4.1.5.  Output Results

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
   V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
   .
   IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4sJ7xpNo
   vR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1vQuC_TYslbSDLHx
   nnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJmvWt_XrDp9tBby0xyjdwd
   teAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2AKyuE10KEMbBo8EJVf1PP1JSS73qy
   UqEt8oo0OHlYTicOwwwwhyiNshdrA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJa
   B-u6qkDMAwA1tJEch4R58z9WsYKyrhAw
   .
   mR-7lneQlGq9vxe_udL4LA
   .
   LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7zqSkl
   a_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVweYeYc_l7m2
   vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8-PSEXb4GlBi22iQ
   goXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maWZiglK4XckGv7-whchA42
   VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--aTLxGtl9sR7z1ZgAyfRqoSs0S
   op9J35heE89JveLIAjnuXH2ShsF0lW6T4HEYXFh9QsAF4TRdnpRs4
   .
   3AIdtJkgAkWuhBdFo8iL8A

                     Figure 49: Compact Serialization

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": {
       "encrypted_key":
         "IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4
          sJ7xpNovR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1v
          QuC_TYslbSDLHxnnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJ
          mvWt_XrDp9tBby0xyjdwdteAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2A
          KyuE10KEMbBo8EJVf1PP1JSS73qyUqEt8oo0OHlYTicOwwwwhyiNshd
          rA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJaB-u6qkDMAwA1tJEch4R5
          8z9WsYKyrhAw"
     },
     "protected":
       "eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpd
        G9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
     "iv":



Miller                    Expires May 24, 2014                 [Page 23]

Internet-Draft                JOSE Cookbook                November 2013


       "mR-7lneQlGq9vxe_udL4LA",
     "ciphertext":
       "LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7
        zqSkla_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVw
        eYeYc_l7m2vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8
        -PSEXb4GlBi22iQgoXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maW
        ZiglK4XckGv7-whchA42VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--
        aTLxGtl9sR7z1ZgAyfRqoSs0Sop9J35heE89JveLIAjnuXH2ShsF0lW6T
        4HEYXFh9QsAF4TRdnpRs4",
     "tag":
       "3AIdtJkgAkWuhBdFo8iL8A"
   }

                       Figure 50: JSON Serialization

4.2.  Key Encryption using RSA-OAEP with A256GCM

   This example illustrates encrypting content using the "RSA-OAEP"
   (RSAES-OAEP) key encryption algorithm and the "A256GCM" (AES-GCM)
   content encryption algorithm.

4.2.1.  Input Factors

   The following are supplied before beginning the encryption process:

   o  Plaintext content; this example uses the plaintext from Figure 40.

   o  RSA public key; this example uses the key from Figure 51.

   o  "alg" parameter of "RSA-OAEP"

   o  "enc" parameter of "A256GCM"

   {
     "kty": "RSA",
     "kid": "samwise.gamgee@hobbiton.example",
     "use": "enc",
     "alg": "RSA-OAEP",
     "n":   "wbdxI55VaanZXPY29Lg5hdmv2XhvqAhoxUkanfzf2-5zVUxa6prH
             RrI4pP1AhoqJRlZfYtWWd5mmHRG2pAHIlh0ySJ9wi0BioZBl1XP2
             e-C-FyXJGcTy0HdKQWlrfhTm42EW7Vv04r4gfao6uxjLGwfpGrZL
             arohiWCPnkNrg71S2CuNZSQBIPGjXfkmIy2tl_VWgGnL22GplyXj
             5YlBLdxXp3XeStsqo571utNfoUTU8E4qdzJ3U1DItoVkPGsMwlmm
             nJiwA7sXRItBCivR4M5qnZtdw-7v4WuR4779ubDuJ5nalMv2S66-
             RPcnFAzWSKxtBDnFJJDGIUe7Tzizjg1nms0Xq_yPub_UOlWn0ec8
             5FCft1hACpWG8schrOBeNqHBODFskYpUc2LC5JA2TaPF2dA67dg1
             TTsC_FupfQ2kNGcE1LgprxKHcVWYQb86B-HozjHZcqtauBzFNV5t
             bTuB-TpkcvJfNcFLlH3b8mb-H_ox35FjqBSAjLKyoeqfKTpVjvXh



Miller                    Expires May 24, 2014                 [Page 24]

Internet-Draft                JOSE Cookbook                November 2013


             d09knwgJf6VKq6UC418_TOljMVfFTWXUxlnfhOOnzW6HSSzD1c9W
             rCuVzsUMv54szidQ9wf1cYWf3g5qFDxDQKis99gcDaiCAwM3yEBI
             zuNeeCa5dartHDb1xEB_HcHSeYbghbMjGfasvKn0aZRsnTyC0xhW
             BlsolZE",
     "e":   "AQAB",
     "d":   "n7fzJc3_WG59VEOBTkayzuSMM780OJQuZjN_KbH8lOZG25ZoA7T4
             Bxcc0xQn5oZE5uSCIwg91oCt0JvxPcpmqzaJZg1nirjcWZ-oBtVk
             7gCAWq-B3qhfF3izlbkosrzjHajIcY33HBhsy4_WerrXg4MDNE4H
             Yojy68TcxT2LYQRxUOCf5TtJXvM8olexlSGtVnQnDRutxEUCwiew
             fmmrfveEogLx9EA-KMgAjTiISXxqIXQhWUQX1G7v_mV_Hr2YuImY
             cNcHkRvp9E7ook0876DhkO8v4UOZLwA1OlUX98mkoqwc58A_Y2lB
             YbVx1_s5lpPsEqbbH-nqIjh1fL0gdNfihLxnclWtW7pCztLnImZA
             yeCWAG7ZIfv-Rn9fLIv9jZ6r7r-MSH9sqbuziHN2grGjD_jfRluM
             Ha0l84fFKl6bcqN1JWxPVhzNZo01yDF-1LiQnqUYSepPf6X3a2SO
             dkqBRiquE6EvLuSYIDpJq3jDIsgoL8Mo1LoomgiJxUwL_GWEOGu2
             8gplyzm-9Q0U0nyhEf1uhSR8aJAQWAiFImWH5W_IQT9I7-yrindr
             _2fWQ_i1UgMsGzA7aOGzZfPljRy6z-tY_KuBG00-28S_aWvjyUc-
             Alp8AUyKjBZ-7CWH32fGWK48j1t-zomrwjL_mnhsPbGs0c9WsWgR
             zI-K8gE",
     "p":   "7_2v3OQZzlPFcHyYfLABQ3XP85Es4hCdwCkbDeltaUXgVy9l9etK
             ghvM4hRkOvbb01kYVuLFmxIkCDtpi-zLCYAdXKrAK3PtSbtzld_X
             Z9nlsYa_QZWpXB_IrtFjVfdKUdMz94pHUhFGFj7nr6NNxfpiHSHW
             FE1zD_AC3mY46J961Y2LRnreVwAGNw53p07Db8yD_92pDa97vqcZ
             OdgtybH9q6uma-RFNhO1AoiJhYZj69hjmMRXx-x56HO9cnXNbmzN
             SCFCKnQmn4GQLmRj9sfbZRqL94bbtE4_e0Zrpo8RNo8vxRLqQNwI
             y85fc6BRgBJomt8QdQvIgPgWCv5HoQ",
     "q":   "zqOHk1P6WN_rHuM7ZF1cXH0x6RuOHq67WuHiSknqQeefGBA9PWs6
             ZyKQCO-O6mKXtcgE8_Q_hA2kMRcKOcvHil1hqMCNSXlflM7WPRPZ
             u2qCDcqssd_uMbP-DqYthH_EzwL9KnYoH7JQFxxmcv5An8oXUtTw
             k4knKjkIYGRuUwfQTus0w1NfjFAyxOOiAQ37ussIcE6C6ZSsM3n4
             1UlbJ7TCqewzVJaPJN5cxjySPZPD3Vp01a9YgAD6a3IIaKJdIxJS
             1ImnfPevSJQBE79-EXe2kSwVgOzvt-gsmM29QQ8veHy4uAqca5dZ
             zMs7hkkHtw1z0jHV90epQJJlXXnH8Q",
     "dp":  "19oDkBh1AXelMIxQFm2zZTqUhAzCIr4xNIGEPNoDt1jK83_FJA-x
             nx5kA7-1erdHdms_Ef67HsONNv5A60JaR7w8LHnDiBGnjdaUmmuO
             8XAxQJ_ia5mxjxNjS6E2yD44USo2JmHvzeeNczq25elqbTPLhUpG
             o1IZuG72FZQ5gTjXoTXC2-xtCDEUZfaUNh4IeAipfLugbpe0JAFl
             FfrTDAMUFpC3iXjxqzbEanflwPvj6V9iDSgjj8SozSM0dLtxvu0L
             IeIQAeEgT_yXcrKGmpKdSO08kLBx8VUjkbv_3Pn20Gyu2YEuwpFl
             M_H1NikuxJNKFGmnAq9LcnwwT0jvoQ",
     "dq":  "S6p59KrlmzGzaQYQM3o0XfHCGvfqHLYjCO557HYQf72O9kLMCfd_
             1VBEqeD-1jjwELKDjck8kOBl5UvohK1oDfSP1DleAy-cnmL29DqW
             mhgwM1ip0CCNmkmsmDSlqkUXDi6sAaZuntyukyflI-qSQ3C_BafP
             yFaKrt1fgdyEwYa08pESKwwWisy7KnmoUvaJ3SaHmohFS78TJ25c
             fc10wZ9hQNOrIChZlkiOdFCtxDqdmCqNacnhgE3bZQjGp3n83ODS
             z9zwJcSUvODlXBPc2AycH6Ci5yjbxt4Ppox_5pjm6xnQkiPgj01G
             psUssMmBN7iHVsrE7N2iznBNCeOUIQ",
     "qi":  "FZhClBMywVVjnuUud-05qd5CYU0dK79akAgy9oX6RX6I3IIIPckC



Miller                    Expires May 24, 2014                 [Page 25]

Internet-Draft                JOSE Cookbook                November 2013


             ciRrokxglZn-omAY5CnCe4KdrnjFOT5YUZE7G_Pg44XgCXaarLQf
             4hl80oPEf6-jJ5Iy6wPRx7G2e8qLxnh9cOdf-kRqgOS3F48Ucvw3
             ma5V6KGMwQqWFeV31XtZ8l5cVI-I3NzBS7qltpUVgz2Ju021eyc7
             IlqgzR98qKONl27DuEES0aK0WE97jnsyO27Yp88Wa2RiBrEocM89
             QZI1seJiGDizHRUP4UZxw9zsXww46wy0P6f9grnYp7t8LkyDDk8e
             oI4KX6SNMNVcyVS9IWjlq8EzqZEKIA"
   }

                        Figure 51: RSA 4096-bit Key

   (*NOTE*: While the key includes the private parameters, only the
   public parameters "e" and "n" are necessary for the encryption
   operation.)

4.2.2.  Generated Factors

   The following are generated before encrypting:

   o  AES symmetric key as the Content Encryption CEK (CEK); this
      example uses the key from Figure 52.

   09EnDWfdf6KCP09QbQQdhhoyFE5GoGAjdShgLGLol8k

           Figure 52: Content Encryption Key, base64url-encoded

4.2.3.  Encrypting the Key

   Performing the key encryption operation over the CEK (Figure 52),
   encoded as an octet string}}) with the RSA key (Figure 51) produces
   the following encrypted key:

   WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRhYoujIOFlt
   i0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyORiMca925XxPItbOE6v
   8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAUbtreKpG8yD17YYyKw9qedx7BrSc
   9TCvNH8ahrC93O1Qp_rZIPdkt92A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg
   5S_zPlpqmd5-BrpUIGmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfM
   eceRRhhGaG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaUw
   ZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61RC8K4IJWnWB
   zGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW9EikKXcE21Jc716oRfF
   EeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1xqYW1JnfLKklIemtznHTXvq7de6Vx
   eSucwBklB24oafBFSeMEGBqKFQPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8
   ikwSP2dG3grGlrl6EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05S
   A

                Figure 53: Encrypted Key, base64url-encoded

4.2.4.  Encrypting the Content




Miller                    Expires May 24, 2014                 [Page 26]

Internet-Draft                JOSE Cookbook                November 2013


   The following are generated before encrypting the plaintext:

   o  Protected JWE Header; this example uses the the header from Figure
      54, encoded using [RFC4648] base64url to produce Figure 55.

   o  Initialization vector/nonce; this example uses the initialization
      vector/nonce from Figure 56.

   {
     "alg": "RSA-OAEP",
     "kid": "samwise.gamgee@hobbiton.example",
     "enc": "A256GCM"
   }

                   Figure 54: Protected JWE Header JSON

   eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
   9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0

            Figure 55: Protected JWE Header, base64url-encoded

   MKccO3TLKaMB67zj

            Figure 56: Initialization Vector, base64url-encoded

   Performing the content encryption operation over the Plaintext
   (Figure 40) with the following:

   o  CEK (Figure 52, encoded as an octet string;

   o  Initialization vector/nonce (Figure 56, encoded as an octet
      string; and

   o  Protected JWE Header (Figure 55) as authenticated data

   produces the following:

   o  Ciphertext from Figure 57.

   o  Authentication tag from Figure 58.











Miller                    Expires May 24, 2014                 [Page 27]

Internet-Draft                JOSE Cookbook                November 2013


   dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_qhZgJ
   3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJTfI1Gxzm-J
   PJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5hVhP2HrqIVG0j1S
   b5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUiC3wQP53pZRtqmwmACyq_
   uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83WgkarkJbSkA0ZoVtebBJ_XvwNlfe1
   VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWKj6C4UNSWgla8zhousjSQ

                 Figure 57: Ciphertext, base64url-encoded

   vCmVSWBtadRAKUhtizP5tw

             Figure 58: Authentication Tag, base64url-encoded

4.2.5.  Output Results

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
   9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
   .
   WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRhYoujIOFlt
   i0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyORiMca925XxPItbOE6v
   8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAUbtreKpG8yD17YYyKw9qedx7BrSc
   9TCvNH8ahrC93O1Qp_rZIPdkt92A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg
   5S_zPlpqmd5-BrpUIGmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfM
   eceRRhhGaG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaUw
   ZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61RC8K4IJWnWB
   zGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW9EikKXcE21Jc716oRfF
   EeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1xqYW1JnfLKklIemtznHTXvq7de6Vx
   eSucwBklB24oafBFSeMEGBqKFQPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8
   ikwSP2dG3grGlrl6EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05S
   A
   .
   MKccO3TLKaMB67zj
   .
   dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_qhZgJ
   3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJTfI1Gxzm-J
   PJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5hVhP2HrqIVG0j1S
   b5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUiC3wQP53pZRtqmwmACyq_
   uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83WgkarkJbSkA0ZoVtebBJ_XvwNlfe1
   VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWKj6C4UNSWgla8zhousjSQ
   .
   vCmVSWBtadRAKUhtizP5tw

                     Figure 59: Compact Serialization

   The resulting JWE object, using the JSON serialization:




Miller                    Expires May 24, 2014                 [Page 28]

Internet-Draft                JOSE Cookbook                November 2013


   {
     "recipients": [
       {
         "encrypted_key":
           "WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRh
            YoujIOFlti0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyO
            RiMca925XxPItbOE6v8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAU
            btreKpG8yD17YYyKw9qedx7BrSc9TCvNH8ahrC93O1Qp_rZIPdkt9
            2A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg5S_zPlpqmd5-BrpUI
            GmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfMeceRRhhG
            aG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaU
            wZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61R
            C8K4IJWnWBzGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW
            9EikKXcE21Jc716oRfFEeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1x
            qYW1JnfLKklIemtznHTXvq7de6VxeSucwBklB24oafBFSeMEGBqKF
            QPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8ikwSP2dG3grGlrl6
            EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05SA"
       }
     ],
     "protected":
       "eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvY
        mJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0",
     "iv":
       "MKccO3TLKaMB67zj",
     "ciphertext":
       "dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_
        qhZgJ3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJ
        TfI1Gxzm-JPJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5
        hVhP2HrqIVG0j1Sb5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUi
        C3wQP53pZRtqmwmACyq_uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83Wgka
        rkJbSkA0ZoVtebBJ_XvwNlfe1VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWK
        j6C4UNSWgla8zhousjSQ",
     "tag":
       "vCmVSWBtadRAKUhtizP5tw"
   }

                       Figure 60: JSON Serialization

4.3.  Key Wrap using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2

   The example illustrates encrypting content using the
   "PBES2-HS512+A256KW" (PBES2 Password-based Encryption using HMAC-
   SHA-512 and AES-256-KeyWrap) key encryption algorithm with the
   "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption
   algorithm.

4.3.1.  Input Factors




Miller                    Expires May 24, 2014                 [Page 29]

Internet-Draft                JOSE Cookbook                November 2013


   The following are supplied before beginning the encryption process:

   o  Plaintext content; this example uses the plaintext from Figure 61
      (*NOTE* all whitespace added for readability)

   o  Password; this example uses the password from Figure 62

   o  "alg" parameter of "PBES2-HS512+A256KW"

   o  "enc" parameter of "A128CBC-HS256"

   {
     "keys": [
       {
         "kty": "oct",
         "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
         "use": "enc",
         "alg": "A128GCM",
         "k":   "XctOhJAkA-pD9Lh7ZgW_2A"
       },
       {
         "kty": "oct",
         "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
         "use": "enc",
         "alg": "A128KW",
         "k":   "GZy6sIZ6wl9NJOKB-jnmVQ"
       },
       {
         "kty": "oct",
         "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
         "use": "enc",
         "alg": "A256GCMKW",
         "k":   "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
       }
     ]
   }

                       Figure 61: Plaintext Content

   entrap_o_peter_long_credit_tun

                            Figure 62: Password









Miller                    Expires May 24, 2014                 [Page 30]

Internet-Draft                JOSE Cookbook                November 2013


4.3.2.  Generated Factors

   The following are generated before encrypting:

   o  AES symmetric key as the Content Encryption Key (CEK); this
      example uses the key from Figure 63.

   o  Salt; this example uses the salt from Figure 64.

   o  Iteration count; this example uses the interaction count 8192.

   1XjHr2XJOCQQu1VBjgUP1gpsgHqqHQaEwD2PogUMCYI

           Figure 63: Content Encryption Key, base64url-encoded

   8Q1SzinasR3xchYz6ZZcHA

                    Figure 64: Salt, base64url-encoded

4.3.3.  Encrypting the Key

   Performing the key encryption operation over the CEK (Figure 63);
   encoded as an octet string) with the following:

   o  Password (Figure 62;

   o  Salt (Figure 64), encoded as an octet string; and

   o  Iteration count (8192)

   produces the following encrypted key:

   dtpBE7O4AvWbuLzPf_lF138DemX6KXdsL2GRm1oWeHNZlu5TqTuJ5A

                Figure 65: Encrypted Key, base64url-encoded

4.3.4.  Encrypting the Content

   The following are generated before encrypting the content:

   o  Protected JWE Header; this example uses the header from Figure 66,
      encoded using [RFC4648] base64url to produce Figure 67.  The
      protected JWE header parameters:

   o  Initialization vector/nonce; this example uses the initialization
      vector/nonce from Figure 68.





Miller                    Expires May 24, 2014                 [Page 31]

Internet-Draft                JOSE Cookbook                November 2013


   {
     "alg": "PBES2-HS512+A256KW",
     "p2s": "8Q1SzinasR3xchYz6ZZcHA",
     "p2c": 8192,
     "enc": "A128CBC-HS256"
   }

                   Figure 66: Protected JWE Header JSON

   eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluYXNSM3
   hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0

            Figure 67: Protected JWE Header, base64url-encoded

   obvv9nee1GDQTucO7EiLUw

            Figure 68: Initialization Vector, base64url-encoded

   Performing the content encryption operation over the Plaintext
   (Figure 61) with the the following:

   o  CEK (Figure 63), encoded as an octet string;

   o  Initialization vector/nonce (Figure 68), encoded as an octet
      string; and

   o  Protected JWE header (Figure 67) as authenticated data

   produces the following:

   o  Ciphertext from Figure 69.

   o  Authentication tag from Figure 70.

   3ttprUp9nllP7zbqTTONYOVtHnSkWXzEKMBF6XGGDZdX04iM1wsX3qcVPJ85lA
   _njOM5AiKxKCdPEpGGvrhgXhBmFqXwBA4MVwAML0LRsc-od_1vG4OP_Y_MVUOZ
   Sn89gDh11z8SHHYYYS1Vq8j6vBNEZSoLuJTftIozi_Hyn5jTGMMAN33dFfrHx3
   bSfq7ooueLgrrkPA3ATCkFckRmhMuQxrx_wk71qbQkdvRYauZ66rKoyZeygVlu
   Ef_dHNFrMoTWbi5iH8ORdEHiH1VLcnMoF-3Wiv2gvmk-aLwgmRF6uUYvccsB4K
   5McRpPsxHyv5BhV85PfyiuNPcgfEmQ1EJ8_krTVtVQxF9F6LcUNQ-rua5Iub5Y
   09INYdA9fdUe8bs7iFWp3wWBjLx1Kn4BuGeu3LltcRbqI3ob_4F1xhKFpghcKE
   ipKmfIqIVvtdEHdS4hq_rP0csShvJop1Qk0E-_4bOmWtCC7slgM2q0USs7FAc_
   VGF951uNP8TABCf6

                 Figure 69: Ciphertext, base64url-encoded






Miller                    Expires May 24, 2014                 [Page 32]

Internet-Draft                JOSE Cookbook                November 2013


   F5MFKAu7qA_hE5w5N1iJ5w

             Figure 70: Authentication Tag, base64url-encoded

4.3.5.  Output Results

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluYXNSM3
   hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
   .
   dtpBE7O4AvWbuLzPf_lF138DemX6KXdsL2GRm1oWeHNZlu5TqTuJ5A
   .
   obvv9nee1GDQTucO7EiLUw
   .
   3ttprUp9nllP7zbqTTONYOVtHnSkWXzEKMBF6XGGDZdX04iM1wsX3qcVPJ85lA
   _njOM5AiKxKCdPEpGGvrhgXhBmFqXwBA4MVwAML0LRsc-od_1vG4OP_Y_MVUOZ
   Sn89gDh11z8SHHYYYS1Vq8j6vBNEZSoLuJTftIozi_Hyn5jTGMMAN33dFfrHx3
   bSfq7ooueLgrrkPA3ATCkFckRmhMuQxrx_wk71qbQkdvRYauZ66rKoyZeygVlu
   Ef_dHNFrMoTWbi5iH8ORdEHiH1VLcnMoF-3Wiv2gvmk-aLwgmRF6uUYvccsB4K
   5McRpPsxHyv5BhV85PfyiuNPcgfEmQ1EJ8_krTVtVQxF9F6LcUNQ-rua5Iub5Y
   09INYdA9fdUe8bs7iFWp3wWBjLx1Kn4BuGeu3LltcRbqI3ob_4F1xhKFpghcKE
   ipKmfIqIVvtdEHdS4hq_rP0csShvJop1Qk0E-_4bOmWtCC7slgM2q0USs7FAc_
   VGF951uNP8TABCf6
   .
   F5MFKAu7qA_hE5w5N1iJ5w

                     Figure 71: Compact Serialization

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "dtpBE7O4AvWbuLzPf_lF138DemX6KXdsL2GRm1oWeHNZlu5TqTuJ5
            A"
       }
     ],
     "protected":
       "eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluY
        XNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJlbmMiOiJBMTI4Q0JDLU
        hTMjU2In0",
     "iv":
       "obvv9nee1GDQTucO7EiLUw",
     "ciphertext":
       "3ttprUp9nllP7zbqTTONYOVtHnSkWXzEKMBF6XGGDZdX04iM1wsX3qcVP
        J85lA_njOM5AiKxKCdPEpGGvrhgXhBmFqXwBA4MVwAML0LRsc-od_1vG4



Miller                    Expires May 24, 2014                 [Page 33]

Internet-Draft                JOSE Cookbook                November 2013


        OP_Y_MVUOZSn89gDh11z8SHHYYYS1Vq8j6vBNEZSoLuJTftIozi_Hyn5j
        TGMMAN33dFfrHx3bSfq7ooueLgrrkPA3ATCkFckRmhMuQxrx_wk71qbQk
        dvRYauZ66rKoyZeygVluEf_dHNFrMoTWbi5iH8ORdEHiH1VLcnMoF-3Wi
        v2gvmk-aLwgmRF6uUYvccsB4K5McRpPsxHyv5BhV85PfyiuNPcgfEmQ1E
        J8_krTVtVQxF9F6LcUNQ-rua5Iub5Y09INYdA9fdUe8bs7iFWp3wWBjLx
        1Kn4BuGeu3LltcRbqI3ob_4F1xhKFpghcKEipKmfIqIVvtdEHdS4hq_rP
        0csShvJop1Qk0E-_4bOmWtCC7slgM2q0USs7FAc_VGF951uNP8TABCf6",
     "tag":
       "F5MFKAu7qA_hE5w5N1iJ5w"
   }

                       Figure 72: JSON Serialization

4.4.  Key Agreement with Key Wrapping using ECDH-ES and AES-KeyWrap with
      AES-GCM

   This example illustrates encrypting content using the "ECDH-
   ES+A128KW" (Elliptic Curve Diffie-Hellman Ephemeral-Static with
   AES-128-KeyWrap) key encryption algorithm and the "A128GCM" (AES-GCM)
   content encryption algorithm.

4.4.1.  Input Factors

   The following are supplied before beginning the encryption process:

   o  Plaintext content; this example uses the content from Figure 40

   o  EC public key; this example uses the public key in Figure 73

   o  "alg" parameter of "ECDH-ES+A128KW"

   o  "enc" parameter of "A128GCM"

   {
     "kty": "EC",
     "kid": "peregrin.took@tuckborough.example",
     "use": "enc",
     "crv": "P-384",
     "x":   "YU4rRUzdmVqmRtWOs2OpDE_T5fsNIodcG8G5FWPrTPMyxpzsSOGa
             QLpe2FpxBmu2",
     "y":   "A8-yxCHxkfBz3hKZfI1jUYMjUhsEveZ9THuwFjH2sCNdtksRJU7D
             5-SkgaFL1ETP",
     "d":   "iTx2pk7wW-GqJkHcEkFQb2EFyYcO7RugmaW3mRrQVAOUiPommT0I
             dnYK2xDlZh-j"
   }

            Figure 73: Elliptic Curve P-384 Key, in JWK format




Miller                    Expires May 24, 2014                 [Page 34]

Internet-Draft                JOSE Cookbook                November 2013


   (*NOTE*: While the key includes the private parameters, only the
   public parameters "crv", "x", and "y" are necessary for the
   encryption operation.)

4.4.2.  Generated Factors

   The following are generated before encrypting:

   o  Symmetric AES key as the Content Encryption Key (CEK); this
      example uses the key from Figure 74.

   C3eS2iNXmSTA7W8tBpjs3w

           Figure 74: Content Encryption Key, base64url-encoded

4.4.3.  Encrypting the Key

   To encrypt the Content Encryption Key, the following are generated:

   o  Ephemeral EC private key on the same curve as the EC public key;
      this example uses the private key that matches the public key from
      Figure 75.

   {
     "kty": "EC",
     "crv": "P-384",
     "x":   "qMz7Lgb3Bc1GNuVn4ZSxLDeDpihGWRwqA2fA1-2IJwDQtKMdpKY0
             XjNqBbjigcL-",
     "y":   "Ygt6Bc_o29f-DJ_5O3YCMoX2tXXz1ysj9MFRnucByIQoR0y3SVmq
             BBwQISq9grWe"
   }

       Figure 75: Ephemeral Elliptic Curve P-384 Key, in JWK format

   Performing the key encryption operation over the CEK (Figure 74,
   encoded as an octet string) with the ephemeral private key (Figure
   75) results in the following JWE encrypted key:

   zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY

                Figure 76: Encrypted Key, base64url-encoded

4.4.4.  Encrypting the Content

   The following are generated before encrypting the content:

   o  Protected JWE header; this example uses the header from Figure 77,
      encoded to [RFC4648] base64url as Figure 78.



Miller                    Expires May 24, 2014                 [Page 35]

Internet-Draft                JOSE Cookbook                November 2013


   o  Initialization vector/nonce; this example uses the initialization
      vector/nonce from Figure 79

   {
     "alg": "ECDH-ES+A128KW",
     "kid": "peregrin.took@tuckborough.example",
     "epk": {
       "kty": "EC",
       "crv": "P-384",
       "x":   "qMz7Lgb3Bc1GNuVn4ZSxLDeDpihGWRwqA2fA1-2IJwDQtKMdpK
               Y0XjNqBbjigcL-",
       "y":   "Ygt6Bc_o29f-DJ_5O3YCMoX2tXXz1ysj9MFRnucByIQoR0y3SV
               mqBBwQISq9grWe"
     },
     "enc": "A128GCM"
   }

                   Figure 77: Protected JWE Header JSON

   eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
   Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
   Mzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHBpaEdXUndxQTJmQT
   EtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5IjoiWWd0NkJjX28yOWYt
   REpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQnlJUW9SMHkzU1ZtcUJCd1FJU3
   E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn0

            Figure 78: Protected JWE Header, base64url-encoded

   ubzqaTluloMJR8Ec

            Figure 79: Initialization Vector, base64url-encoded

   Performing the content encryption operation on the Plaintext (Figure
   40) using the following:

   o  CEK (Figure 74), encoded as an octet string;

   o  Initialization vector/nonce (Figure 79), encoded as an octet
      string; and

   o  Protected JWE header (Figure 78) as authenticated data

   produces the following

   o  Ciphertext from Figure 80.

   o  Authentication tag from Figure 81.




Miller                    Expires May 24, 2014                 [Page 36]

Internet-Draft                JOSE Cookbook                November 2013


   zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqKa-xC2
   Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbgf0_TQqG9PK
   vFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-JlnQ3pssAqQLpUV
   _-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToPq57d2Q99N10WfPmXVQ38
   htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE3Bb8IJ1a04LzqB4Xmp_wgbwHC
   VR-bqTKgth3h_NoDLqCxQ0QcG9E78i36iPJuLAzVgS0ChHzo5ULw

                 Figure 80: Ciphertext, base64url-encoded

   5cJTRUT3kQRrw_UGwtMtDQ

             Figure 81: Authentication Tag, base64url-encoded

4.4.5.  Output Results

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
   Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
   Mzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHBpaEdXUndxQTJmQT
   EtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5IjoiWWd0NkJjX28yOWYt
   REpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQnlJUW9SMHkzU1ZtcUJCd1FJU3
   E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn0
   .
   zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY
   .
   ubzqaTluloMJR8Ec
   .
   zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqKa-xC2
   Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbgf0_TQqG9PK
   vFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-JlnQ3pssAqQLpUV
   _-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToPq57d2Q99N10WfPmXVQ38
   htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE3Bb8IJ1a04LzqB4Xmp_wgbwHC
   VR-bqTKgth3h_NoDLqCxQ0QcG9E78i36iPJuLAzVgS0ChHzo5ULw
   .
   5cJTRUT3kQRrw_UGwtMtDQ

                     Figure 82: Compact Serialization

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY"
       }
     ],



Miller                    Expires May 24, 2014                 [Page 37]

Internet-Draft                JOSE Cookbook                November 2013


     "protected":
       "eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb
        2tAdHVja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsIm
        NydiI6IlAtMzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHB
        paEdXUndxQTJmQTEtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5
        IjoiWWd0NkJjX28yOWYtREpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQ
        nlJUW9SMHkzU1ZtcUJCd1FJU3E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn
        0",
     "iv":
       "ubzqaTluloMJR8Ec",
     "ciphertext":
       "zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqK
        a-xC2Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbg
        f0_TQqG9PKvFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-
        JlnQ3pssAqQLpUV_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToP
        q57d2Q99N10WfPmXVQ38htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE
        3Bb8IJ1a04LzqB4Xmp_wgbwHCVR-bqTKgth3h_NoDLqCxQ0QcG9E78i36
        iPJuLAzVgS0ChHzo5ULw",
     "tag":
       "5cJTRUT3kQRrw_UGwtMtDQ"
   }

                       Figure 83: JSON Serialization

4.5.  Key Agreement using ECDH-ES with AES-CBC-HMAC-SHA2

   This example illustrates encrypting content using the "ECDH-ES"
   (Elliptic Curve Diffie-Hellman Ephemeral-Static) key agreement
   algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content
   encryption algorithm.

   The Plaintext content from Figure 40 is used for this example.

   The following Elliptic Curve key is used (formatted as a JWK object):

   {
     "kty": "EC",
     "kid": "meriadoc.brandybuck@buckland.example",
     "use": "enc",
     "crv": "P-256",
     "x":   "XnXXKEsaUU4hPZza_zSHIbt02UA505B1rDWc7JNlcDE",
     "y":   "Md5NqzfiXCytoaMglA-9MstvgOBdMSroXA2Hb6vR6dQ",
     "d":   "44eY-VRWsn1zdz3VaWS6idEpOGt1ErydBARq7Iyh9pY"
   }

                         Elliptic Curve P-256 Key





Miller                    Expires May 24, 2014                 [Page 38]

Internet-Draft                JOSE Cookbook                November 2013


   (*NOTE*: While the key includes the private parameters, only the
   public parameters "crv", "x", and "y" are necessary for the
   encryption operation.)

   The protected JWE header parameters:

   {
     "alg": "ECDH-ES",
     "kid": "meriadoc.brandybuck@buckland.example",
     "epk": {
       "kty": "EC",
       "crv": "P-256",
       "x":   "h_ImuH3OW5JxZNQZWIWCFTYAIigZYs1-QzsQR9tCEQ4",
       "y":   "4ZWJVVrTOWdEVbH266nb4Wy2QiwH_9XAcdpNh4S2oX0"
     },
     "enc": "A128CBC-HS256"
   }

                         Protected JWE Header JSON

   Encoded as [RFC4648] base64url:

   eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
   NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
   LCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWllzMS1RenNRUjl0Q0
   VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRXeTJRaXdIXzlYQWNkcE5o
   NFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ

                  Protected JWE Header, base64url-encoded

   The initialization vector/nonce:

   BMbSNYW2uC7RX3xql1gbQw

                 Initialization Vector, base64url-encoded

   Performing the encryption operation on the Plaintext using the given
   key, initialization vector/nonce, and protected JWE header
   (base64url-encoded) as authenticated data produces the following
   ciphertext:











Miller                    Expires May 24, 2014                 [Page 39]

Internet-Draft                JOSE Cookbook                November 2013


   mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgjSaGPM
   M7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWlQZrQz77Ie
   dSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGdWbyDnPMvp6eGL
   T6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOww4E5zKW9Xycx3mkh_
   gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb29frJCFI-rYfahoVz6QhN
   QXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNAdBKgSa9JZfc21dSw

                       Ciphertext, base64url-encoded

   And authentication tag:

   kqeubaGyskAjcj8mDymY6A

                   Authentication Tag, base64url-encoded

   the resulting JWE object, using the Compact serialization:

   eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
   NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
   LCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWllzMS1RenNRUjl0Q0
   VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRXeTJRaXdIXzlYQWNkcE5o
   NFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
   .
   .
   BMbSNYW2uC7RX3xql1gbQw
   .
   mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgjSaGPM
   M7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWlQZrQz77Ie
   dSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGdWbyDnPMvp6eGL
   T6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOww4E5zKW9Xycx3mkh_
   gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb29frJCFI-rYfahoVz6QhN
   QXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNAdBKgSa9JZfc21dSw
   .
   kqeubaGyskAjcj8mDymY6A

                           Compact Serialization

   the resulting JWE object, using the JSON serialization:

   {
     "protected":
       "eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja
        0BidWNrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2Ij
        oiUC0yNTYiLCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWll
        zMS1RenNRUjl0Q0VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRX
        eTJRaXdIXzlYQWNkcE5oNFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyN
        TYifQ",
     "iv":



Miller                    Expires May 24, 2014                 [Page 40]

Internet-Draft                JOSE Cookbook                November 2013


       "BMbSNYW2uC7RX3xql1gbQw",
     "ciphertext":
       "mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgj
       SaGPMM7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWl
       QZrQz77IedSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGd
       WbyDnPMvp6eGLT6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOw
       w4E5zKW9Xycx3mkh_gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb
       29frJCFI-rYfahoVz6QhNQXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNA
       dBKgSa9JZfc21dSw",
     "tag":
       "kqeubaGyskAjcj8mDymY6A"
   }

                            JSON Serialization

4.6.  Direct Encryption using AES-GCM

   This example illustrates encrypting content using a previously
   exchanged key directly and the "A128GCM" (AES-GCM) content encryption
   algorithm.

   The Plaintext content in Figure 40 is used for this example.

   The following AES symmetric key is used (formatted as a JWK object):

   {
     "kty": "oct",
     "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
     "use": "enc",
     "alg": "A128GCM",
     "k":   "XctOhJAkA-pD9Lh7ZgW_2A"
   }


   The protected JWE header parameters:

   {
     "alg": "dir",
     "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
     "enc": "A128GCM"
   }

                         Protected JWE Header JSON

   Encoded as [RFC4648] base64url:

   eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
   diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0



Miller                    Expires May 24, 2014                 [Page 41]

Internet-Draft                JOSE Cookbook                November 2013


                  Protected JWE Header, base64url-encoded

   The initialization vector/nonce:

   OI-fESJKbHHk1-rA

                 Initialization Vector, base64url-encoded

   Performing the encryption operation on the Plaintext using the given
   key, initialization vector/nonce, and protected JWE header
   (base64url-encoded) as authenticated data produces the following
   ciphertext:

   18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GVG_3Dz
   -5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5fFlRiEr9is
   8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEISWu3Pf4yugvVMpLR
   DxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjUHROjh2_QVqpTUwzx2qto
   3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5l5XnoqCT0ioaFzeW9zbiAMj_o
   1gvWgPLv8HRD9OxMERTCwbJt4O3baG9Roz-5We10hx-sb2EKtN0g

                       Ciphertext, base64url-encoded

   And authentication tag:

   mBCmmmn0W0j4BS7ln3nxVA

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
   diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
   .
   .
   OI-fESJKbHHk1-rA
   .
   18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GVG_3Dz
   -5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5fFlRiEr9is
   8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEISWu3Pf4yugvVMpLR
   DxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjUHROjh2_QVqpTUwzx2qto
   3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5l5XnoqCT0ioaFzeW9zbiAMj_o
   1gvWgPLv8HRD9OxMERTCwbJt4O3baG9Roz-5We10hx-sb2EKtN0g
   .
   mBCmmmn0W0j4BS7ln3nxVA

                           Compact Serialization

   The resulting JWE object, using the JSON serialization:



Miller                    Expires May 24, 2014                 [Page 42]

Internet-Draft                JOSE Cookbook                November 2013


   {
     "protected":
       "eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3M
        i02MTdiNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0",
     "iv":
       "OI-fESJKbHHk1-rA",
     "ciphertext":
       "18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GV
        G_3Dz-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5
        fFlRiEr9is8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEIS
        Wu3Pf4yugvVMpLRDxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjU
        HROjh2_QVqpTUwzx2qto3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5
        l5XnoqCT0ioaFzeW9zbiAMj_o1gvWgPLv8HRD9OxMERTCwbJt4O3baG9R
        oz-5We10hx-sb2EKtN0g",
     "tag":
       "mBCmmmn0W0j4BS7ln3nxVA"
   }

                            JSON Serialization

4.7.  Key Wrap using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2

   This example illustrates encrypting content using the "A256GCMKW"
   (AES-256-GCM-KeyWrap) key encryption algorithm with the "A128CBC-
   HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

   This example uses the Plaintext from Figure 40.

   The following AES symmetric key is used (formatted as a JWK object):

   {
     "kty": "oct",
     "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
     "use": "enc",
     "alg": "A256GCMKW",
     "k":   "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
   }

                              AES 256-bit Key

   The protected JWE header parameters:

   {
     "alg": "A256GCMKW",
     "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
     "tag": "7qiY1gOLorD7ro67FZqYRw",
     "iv":  "3llIgu3y7Vu5dZW7",
     "enc": "A128CBC-HS256"



Miller                    Expires May 24, 2014                 [Page 43]

Internet-Draft                JOSE Cookbook                November 2013


   }

                         Protected JWE Header JSON

   Encoded as [RFC4648] base64url:

   eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
   IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybzY3RlpxWVJ3
   IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
   J9

                  Protected JWE Header, base64url-encoded

   The Content Encryption Key (CEK):

   a2gN8ASDdVKI86lMJC8rKI8RV8U8OltRlVzygIo48NA

                 Content Encryption Key, base64url-encoded

   Performing the key encryption operation over the CEK with the given
   AES key and key encryption iv (via the "iv" JWE header parameter)
   produces the following encrypted key:

   cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE

                     Encrypted Key, base64url-encoded

   The initialization vector/nonce:

   Z3wPFyzW8czy88sUmzcnlg

                 Initialization Vector, base64url-encoded

   Performing the content encryption operation over the Plaintext with
   the given CEK, initialization vector/nonce, and protected JWE header
   (base64url-encoded) as authenticated data produces the following
   ciphertext:

   YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_HEs-Tu
   5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLLO4n5LFK0mI
   TQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu3Evj2GmvvPIm1WZ
   K3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNzc8PRMavtkBO64zmpWTfy
   tMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL7RlkXU12fOCc7VJ2X5TtYPPr_
   bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7AIcf3KpfzapJmZ3kdZgOg

                       Ciphertext, base64url-encoded

   And authentication tag:



Miller                    Expires May 24, 2014                 [Page 44]

Internet-Draft                JOSE Cookbook                November 2013


   d7dahIDc06hrpWqDiQzaXQ

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
   IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybzY3RlpxWVJ3
   IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
   J9
   .
   cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE
   .
   Z3wPFyzW8czy88sUmzcnlg
   .
   YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_HEs-Tu
   5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLLO4n5LFK0mI
   TQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu3Evj2GmvvPIm1WZ
   K3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNzc8PRMavtkBO64zmpWTfy
   tMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL7RlkXU12fOCc7VJ2X5TtYPPr_
   bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7AIcf3KpfzapJmZ3kdZgOg
   .
   W7cYYn27uUYttxShJ2yYhQ

                           Compact Serialization

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE"
       }
     ],
     "protected":
       "eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkO
        TUtYjIwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybz
        Y3RlpxWVJ3IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTE
        yOENCQy1IUzI1NiJ9",
     "iv":
       "Z3wPFyzW8czy88sUmzcnlg",
     "ciphertext":
       "YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_H
        Es-Tu5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLL
        O4n5LFK0mITQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu
        3Evj2GmvvPIm1WZK3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNz
        c8PRMavtkBO64zmpWTfytMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL



Miller                    Expires May 24, 2014                 [Page 45]

Internet-Draft                JOSE Cookbook                November 2013


        7RlkXU12fOCc7VJ2X5TtYPPr_bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7
        AIcf3KpfzapJmZ3kdZgOg",
     "tag":
       "W7cYYn27uUYttxShJ2yYhQ"
   }

                            JSON Serialization

4.8.  Key Wrap using AES-KeyWrap with AES-GCM

   The following example illustrates content encryption using the
   "A128KW" (AES-128-KeyWrap) key encryption algorithm and the "A128GCM"
   (AES-128-GCM) content encryption algorithm.

   The Plaintext content in Figure 40 is used for this example.

   The following AES symmetric key is used (formatted as a JWK object):

   {
     "kty": "oct",
     "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
     "use": "enc",
     "alg": "A128KW",
     "k":   "GZy6sIZ6wl9NJOKB-jnmVQ"
   }

                              AES 128-Bit Key

   The protected JWE header:

   {
     "alg": "A128KW",
     "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
     "enc": "A128GCM"
   }

                         Protected JWE Header JSON

   Encoded as [RFC4648] base64url:

   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0

                  Protected JWE Header, base64url-encoded

   The Content Encryption Key (CEK):





Miller                    Expires May 24, 2014                 [Page 46]

Internet-Draft                JOSE Cookbook                November 2013


   'Hv3Kmjt7vR2in57dLm-Pfw

                 Content Encryption Key, base64url-encoded

   Performing the key encryption operation over the CEK with the given
   AES key produces the following encrypted key:

   RMMWwegPo5GY-5DeqC51gevcIOQpc4CH

                     Encrypted Key, base64url-encoded

   The initialization vector/nonce:

   wxdDTG0-QnGvBZew

                 Initialization Vector, base64url-encoded

   Performing the content encryption algorithm over the Plaintext with
   the given CEK, initialization vector/nonce, and protected JWE header
   (base64url-encoded) as authenticated data produces the following
   ciphertext:

   DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTipfOin
   86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9XxxEs8zw9YPX
   baILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5JaojvqXF5F3jkZAaJwa4u
   IjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P_VYEb8ptUWmgz4Gg1YFF
   tGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9gnAqYnWKLaE3E2hzhxcgtNwNKf
   lLSfmV247xbRYZhR8NeJ_GoKCjrH7isFvUM0Uzx43cPpPDypyiGA

                       Ciphertext, base64url-encoded

   And authentication tag:

   N7CDBxgruPcQozgqPeihlw

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
   .
   RMMWwegPo5GY-5DeqC51gevcIOQpc4CH
   .
   wxdDTG0-QnGvBZew
   .
   DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTipfOin
   86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9XxxEs8zw9YPX



Miller                    Expires May 24, 2014                 [Page 47]

Internet-Draft                JOSE Cookbook                November 2013


   baILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5JaojvqXF5F3jkZAaJwa4u
   IjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P_VYEb8ptUWmgz4Gg1YFF
   tGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9gnAqYnWKLaE3E2hzhxcgtNwNKf
   lLSfmV247xbRYZhR8NeJ_GoKCjrH7isFvUM0Uzx43cPpPDypyiGA
   .
   N7CDBxgruPcQozgqPeihlw

                           Compact Serialization

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "RMMWwegPo5GY-5DeqC51gevcIOQpc4CH"
       }
     ],
     "protected":
       "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
        TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0",
     "iv":
       "wxdDTG0-QnGvBZew",
     "ciphertext":
       "DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTi
        pfOin86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9Xx
        xEs8zw9YPXbaILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5Jaojvq
        XF5F3jkZAaJwa4uIjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P
        _VYEb8ptUWmgz4Gg1YFFtGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9g
        nAqYnWKLaE3E2hzhxcgtNwNKflLSfmV247xbRYZhR8NeJ_GoKCjrH7isF
        vUM0Uzx43cPpPDypyiGA",
     "tag":
       "N7CDBxgruPcQozgqPeihlw"
   }

                            JSON Serialization

4.9.  Compressed Content

   This example illustrates encrypting content that is first compressed.
   It reuses the AES key, key encryption algorithm, and content
   encryption algorithm from Section 4.8.

   The Plaintext content in Figure 40 is used for this example.

   The compressed Plaintext:





Miller                    Expires May 24, 2014                 [Page 48]

Internet-Draft                JOSE Cookbook                November 2013


   eJxtj0EOwyAMBL-yD0jyh_bQL1Q9EmICCsKVMYry-zpEPVTqycizu15e3OBdgU
   qrilahjKrJb9iTRhyGNQq3Ndo8164s56uMoyk1EuakSgIqy4SbweNP4kb0NueB
   Sl5IweGUSR1Hn7maW6M5TmdXJr0w5TDh3vSbWVh_YjNdKDhPBrjNmeAyFxp6z5
   XtUug_YUtx2Fms5dNEQv0EgiRrXgc8hBeePt1uYQ0

                  Compressed Plaintext, base64url-encoded

   The protected JWE header parameters:

   {
     "alg": "A128KW",
     "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
     "enc": "A128GCM",
     "zip": "DEF"
   }

                         Protected JWE Header JSON

   Encoded as [RFC4648] base64url:

   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0

                  Protected JWE Header, base64url-encoded

   The Content Encryption Key (CEK):

   03x4Y5d1Lk0K2VbMmePmMw

                 Content Encryption Key, base64url-encoded

   Performing the key encryption operation over the CEK with the given
   AES key produces the following encrypted key:

   fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5

                     Encrypted Key, base64url-encoded

   The initialization vector/nonce:

   9UnGd0z8-Yx3BFV3

                 Initialization Vector, base64url-encoded

   Performing the content encryption operation over the compressed
   Plaintext with the given CEK, initialization vector/nonce, and
   protected JWE header (base64url-encoded) as authenticated data
   produces the following ciphertext:



Miller                    Expires May 24, 2014                 [Page 49]

Internet-Draft                JOSE Cookbook                November 2013


   b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0dnlB0y
   ZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZLaCf6TjK46C
   UfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FHpYevNXuE7hokcim
   LRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q

                       Ciphertext, base64url-encoded

   And authentication tag:

   Im5q_DU2ZafibIuj5GNI5Q

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the Compact serialization:

   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
   .
   fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5
   .
   9UnGd0z8-Yx3BFV3
   .
   b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0dnlB0y
   ZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZLaCf6TjK46C
   UfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FHpYevNXuE7hokcim
   LRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q
   .
   Im5q_DU2ZafibIuj5GNI5Q

                           Compact Serialization

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5"
       }
     ],
     "protected":
       "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
        TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiRE
        VGIn0",
     "iv":
       "9UnGd0z8-Yx3BFV3",
     "ciphertext":
       "b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0d



Miller                    Expires May 24, 2014                 [Page 50]

Internet-Draft                JOSE Cookbook                November 2013


        nlB0yZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZL
        aCf6TjK46CUfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FH
        pYevNXuE7hokcimLRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q",
     "tag":
       "Im5q_DU2ZafibIuj5GNI5Q"
   }

                            JSON Serialization

4.10.  Protecting Specific Header Fields

   This example illustrates encrypting content where only certain JWE
   header parameters are protected.  As this example includes
   unprotected JWE header parameters, only the JSON serialization is
   possible.

   This example reuses the AES key, key encryption algorithm, and
   content encryption algorithm from Section 4.8.

   The Plaintext content from Figure 40 is used for this example, and
   compressed as demonstrated in Section 4.9.

   The unprotected JWE header parameters:

   {
     "alg": "A128KW",
     "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
     "zip": "DEF"
   }

                        Unprotected JWE Header JSON

   The protected JWE header parameters:

   {
     "enc": "A128GCM"
   }

                         Protected JWE Header JSON

   Encoded as [RFC4648] base64url:

   eyJlbmMiOiJBMTI4R0NNIn0

                  Protected JWE Header, base64url-encoded

   The Content Encryption Key (CEK):




Miller                    Expires May 24, 2014                 [Page 51]

Internet-Draft                JOSE Cookbook                November 2013


   uGL3QU7R3HMR3ik-oTW82w

                 Content Encryption Key, base64url-encoded

   Performing the key encryption operation over the CEK with the given
   AES key produces the following encrypted key:

   MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc

                     Encrypted Key, base64url-encoded

   The initialization vector/nonce:

   HorZstLCLfNNC7TN

                 Initialization Vector, base64url-encoded

   Performing the content encryption operation over the compressed
   Plaintext with the given CEK, initialization vector/nonce, and
   protected JWE header (base64url-encoded) as authenticated data
   produces the following ciphertext:

   fOxklZw0MD_ScE71g8eRmcgF5mFiLIk4Fax0iTNYu96PAjskl1ZAZmcvUDiPiA
   ZGGU8Q44O_nt6EjXhx20z6Ix2M_TZnfJWH9YtPm-uEzzWU0Yos0k-BqvQ3jOXk
   IMj0NCtpNSl6bKiQ7B7qpocXMK834SSIVYyMVW7ifKiSCSBrkALqrobDYEUmH8
   wiPdD2WSbn3YSXZj2NFerDl7o0GBTZ-q12AFHWD38

                       Ciphertext, base64url-encoded

   And authentication tag:

   TNzmuMZK-VpijGRN4fmfOg

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc"
       }
     ],
     "unprotected": {
       "alg": "A128KW",
       "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
       "zip": "DEF"



Miller                    Expires May 24, 2014                 [Page 52]

Internet-Draft                JOSE Cookbook                November 2013


     },
     "protected":
       "eyJlbmMiOiJBMTI4R0NNIn0",
     "iv":
       "HorZstLCLfNNC7TN",
     "ciphertext":
       "fOxklZw0MD_ScE71g8eRmcgF5mFiLIk4Fax0iTNYu96PAjskl1ZAZmcvU
        DiPiAZGGU8Q44O_nt6EjXhx20z6Ix2M_TZnfJWH9YtPm-uEzzWU0Yos0k
        -BqvQ3jOXkIMj0NCtpNSl6bKiQ7B7qpocXMK834SSIVYyMVW7ifKiSCSB
        rkALqrobDYEUmH8wiPdD2WSbn3YSXZj2NFerDl7o0GBTZ-q12AFHWD38",
     "tag":
       "TNzmuMZK-VpijGRN4fmfOg"
   }

                            JSON Serialization

4.11.  Protecting Content Only

   This example illustrates encrypting content where none of the JWE
   header parameters are protected.  As this example includes only
   unprotected JWE header parameters, only the JSON serialization is
   possible.

   This example reuses the AES key, key encryption algorithm, and
   content encryption algorithm from Section 4.8.

   The Plaintext content from Figure 40 is used for this example, and
   compressed as demonstrated in Section 4.9.

   The unprotected JWE header parameters:

   {
     "alg": "A128KW",
     "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
     "enc": "A128GCM",
     "zip": "DEF"
   }

                        Unprotected JWE Header JSON

   The Content Encryption Key (CEK):

   5UVirgqilMhbWpSnM3alUQ

                 Content Encryption Key, base64url-encoded

   Performing the key encryption operation over the CEK with the given
   AES key produces the following encrypted key:



Miller                    Expires May 24, 2014                 [Page 53]

Internet-Draft                JOSE Cookbook                November 2013


   yyuirCy7Hd_nY0gL5Jfq6sJ7RXRR0DtF

                     Encrypted Key, base64url-encoded

   The initialization vector/nonce:

   zdbIl4BrrziYK55_

                 Initialization Vector, base64url-encoded

   Performing the content encryption operation over the compressed
   Plaintext using the given CEK, initialization vector/nonce, and empty
   string as authenticated data produces the following ciphertext:

   _Th0nZypKIbnODRLTU0L5tjL1_8Kvlq--xUT3cz9Uc-MfGRluhgY3reY0KX_Er
   n2FrSe0ou9FZKA2YH9bRRux6NvmBRdhsELHR0VkbBAADn4GGCBBWXQPRzydbWE
   YfRj5a6vYphkINp0L71HuVyxpnS30cJE6khxnTEhJu0bJ4sRmpL7f2w_qs5NXo
   TPbVHfBfZ2o2JMwkwehQiLMigTxTbHxoI36wbAyd4

                       Ciphertext, base64url-encoded

   And authentication tag:

   J2Q3F_rNJ2szSiSdMENJDw

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "yyuirCy7Hd_nY0gL5Jfq6sJ7RXRR0DtF"
       }
     ],
     "unprotected": {
       "alg": "A128KW",
       "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
       "enc": "A128GCM",
       "zip": "DEF"
     },
     "iv":
       "zdbIl4BrrziYK55_",
     "ciphertext":
       "_Th0nZypKIbnODRLTU0L5tjL1_8Kvlq--xUT3cz9Uc-MfGRluhgY3reY0
        KX_Ern2FrSe0ou9FZKA2YH9bRRux6NvmBRdhsELHR0VkbBAADn4GGCBBW
        XQPRzydbWEYfRj5a6vYphkINp0L71HuVyxpnS30cJE6khxnTEhJu0bJ4s



Miller                    Expires May 24, 2014                 [Page 54]

Internet-Draft                JOSE Cookbook                November 2013


        RmpL7f2w_qs5NXoTPbVHfBfZ2o2JMwkwehQiLMigTxTbHxoI36wbAyd4",
     "tag":
       "J2Q3F_rNJ2szSiSdMENJDw"
   }

                            JSON Serialization

4.12.  Encrypting to Multiple Recipients

   This example illustrates encryption content for multiple recipients.
   As this example has multiple recipients, only the JSON serialization
   is possible.

   This example reuses the RSA key from Section 4.1, the Elliptic Curve
   key from Section 4.4, and the AES key from Section 4.7.

   The Plaintext content from Figure 40 is used in this example, and
   compressed as demonstrated in Section 4.9.

   The global unprotected JWE header parameters:

   {
     "enc": "A128CBC-HS256",
     "zip": "DEF"
   }

                    Global Unprotected JWE Header JSON

   OYs79m0f3LEuMZzmWBCywRn4u8B09BVidJb9j0ojDsY

                 Content Encryption Key, base64url-encoded

   The unprotected JWE header parameters for the first recipient:

   {
     "alg": "RSA1_5",
     "kid": "frodo.baggins@hobbiton.example"
   }

                 Recipient #1 Unprotected JWE Header JSON

   Performing the "RSA1_5" key encryption operation over the CEK with
   the first recipient's RSA key produces the following encrypted key:

   EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t0JkvxtKiO
   xibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5MnyQ69GBkMU6Poie-Ct
   Q2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSftk7KKjyw38LBuvSOVdokkHWMP4p
   VLeUJB1ovbT4M1j3pxUzyM2426sD6LfjorQhY8vsChyDaFST0Oe8uBvcRyA5ma



Miller                    Expires May 24, 2014                 [Page 55]

Internet-Draft                JOSE Cookbook                November 2013


   bEyRYlUet8PRH_CjINMipv7LCDRsKVnr3oHwZEfCJFGNC-w_-Qn4xcmkmxyaz1
   -kZEpS_t2kWJsFqx3mg7QAXJBxdGmy6A

               Recipient #1 Encrypted Key, base64url-encoded

   The unprotected JWE header parameters for the second recipient:

   {
     "alg": "ECDH-ES+A256KW",
     "kid": "peregrin.took@tuckborough.example",
     "epk": {
       "kty": "EC",
       "crv": "P-384",
       "x":   "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkwH
               mwlMi4AxCVzG_I",
       "y":   "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5GM
               CwXwxtgkNeZ32T"
     }
   }

                 Recipient #2 Unprotected JWE Header JSON

   Performing the "ECDH-ES+A256KW" key encryption operation over the CEK
   with the given EC key and ephemeral key ("epk" parameter in the
   recipient's unprotected JWE header) produces the following encrypted
   key:

   Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YOw

               Recipient #2 Encrypted Key, base64url-encoded

   The unprotected JWE header parameters for the third recipient:

   {
     "alg": "A256GCMKW",
     "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
     "tag": "DOVpODvbotRWOHEqTRcXkg",
     "iv":  "kZtitxRDXfzCS6ZK"
   }

                 Recipient #3 Unprotected JWE Header JSON

   Performing the "A256GCMKW" key encryption operation over the CEK with
   the given AES key and initialization vector/nonce (the "iv" parameter
   in the recipient's unprotected JWE header) produces the following
   encrypted key (as well as the authentication tag
   "DOVpODvbotRWOHEqTRcXkg", included in the recipient's JWE header
   parameter "tag"):



Miller                    Expires May 24, 2014                 [Page 56]

Internet-Draft                JOSE Cookbook                November 2013


   iiVL4XCDCnsWCSZCTysGxl41vdnJqIThbumNa9wSQBo

               Recipient #3 Encrypted Key, base64url-encoded

   The initialization vector/nonce:

   qP1KgJY-vTLW-nMrMSfMYw

                 Initialization Vector, base64url-encoded

   Performing the content encryption operation over the compressed
   Plaintext with the given CEK, initialization vector, and empty string
   authenticated data produces the following ciphertext:

   labOfATex-4SHcp4ZcZ87QbLfm0Swhk55BmsYPxrFHFfoXNmutGTHLP2LUmKbH
   f60otQKPdwpPGqvhWxT37cjzQMawEeNMWtUdcwwkOqm-c6f_nOXxJdggbRPdoj
   Ze0VJRS6BXNFgTu0KJKtC4GJp_O-9oDQuof8o6LtLg-2JiGFBvQPB-krDjwL9F
   f3u2ZhNoFYta6IQvh5BqR7XnY87cuu7m8xFxEv0wKmrnqlvc4

                       Ciphertext, base64url-encoded

   And authentication tag:

   zWJK47HuwOoZ2OitcrEfUA

                   Authentication Tag, base64url-encoded

   The resulting JWE object, using the JSON serialization:

   {
     "recipients": [
       {
         "encrypted_key":
           "EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t
            0JkvxtKiOxibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5M
            nyQ69GBkMU6Poie-CtQ2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSf
            tk7KKjyw38LBuvSOVdokkHWMP4pVLeUJB1ovbT4M1j3pxUzyM2426
            sD6LfjorQhY8vsChyDaFST0Oe8uBvcRyA5mabEyRYlUet8PRH_CjI
            NMipv7LCDRsKVnr3oHwZEfCJFGNC-w_-Qn4xcmkmxyaz1-kZEpS_t
            2kWJsFqx3mg7QAXJBxdGmy6A",
         "header": {
           "alg": "RSA1_5",
           "kid": "frodo.baggins@hobbiton.example"
         }
       },
       {
         "encrypted_key":
           "Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YO



Miller                    Expires May 24, 2014                 [Page 57]

Internet-Draft                JOSE Cookbook                November 2013


            w",
         "header": {
           "alg": "ECDH-ES+A256KW",
           "kid": "peregrin.took@tuckborough.example",
           "epk": {
             "kty": "EC",
             "crv": "P-384",
             "x":
               "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkw
                HmwlMi4AxCVzG_I",
             "y":
               "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5G
                MCwXwxtgkNeZ32T"
           }
         }
       },
       {
         "encrypted_key":
           "iiVL4XCDCnsWCSZCTysGxl41vdnJqIThbumNa9wSQBo",
         "header": {
           "alg": "A256GCMKW",
           "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
           "tag": "DOVpODvbotRWOHEqTRcXkg",
           "iv":  "kZtitxRDXfzCS6ZK"
         }
       }
     ],
     "unprotected": {
       "enc": "A128CBC-HS256",
       "zip": "DEF"
     },
     "iv":
       "qP1KgJY-vTLW-nMrMSfMYw",
     "ciphertext":
       "labOfATex-4SHcp4ZcZ87QbLfm0Swhk55BmsYPxrFHFfoXNmutGTHLP2L
        UmKbHf60otQKPdwpPGqvhWxT37cjzQMawEeNMWtUdcwwkOqm-c6f_nOXx
        JdggbRPdojZe0VJRS6BXNFgTu0KJKtC4GJp_O-9oDQuof8o6LtLg-2JiG
        FBvQPB-krDjwL9Ff3u2ZhNoFYta6IQvh5BqR7XnY87cuu7m8xFxEv0wKm
        rnqlvc4",
     "tag":
       "zWJK47HuwOoZ2OitcrEfUA"
   }

                            JSON Serialization

5.  Security Considerations





Miller                    Expires May 24, 2014                 [Page 58]

Internet-Draft                JOSE Cookbook                November 2013


6.  IANA Considerations

   This document has no actions for IANA.

7.  Informative References

   [I-D.ietf-jose-json-web-algorithms]
              Jones, M., "JSON Web Algorithms (JWA)", draft-ietf-jose-
              json-web-algorithms-18 (work in progress), November 2013.

   [I-D.ietf-jose-json-web-encryption]
              Jones, M., Rescorla, E., and J. Hildebrand, "JSON Web
              Encryption (JWE)", draft-ietf-jose-json-web-encryption-18
              (work in progress), November 2013.

   [I-D.ietf-jose-json-web-key]
              Jones, M., "JSON Web Key (JWK)", draft-ietf-jose-json-web-
              key-18 (work in progress), November 2013.

   [I-D.ietf-jose-json-web-signature]
              Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", draft-ietf-jose-json-web-signature-18
              (work in progress), November 2013.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, October 2006.

Appendix A.  Acknowledgements

   Thanks to Richard Barnes and Jim Schaad for providing for their input
   on the outline for this document.

   Most of the signature payload content and encrypted plaintext content
   are quotes from the series of novels collectively known as "The Lord
   of the Rings", written by J. R. R. Tolkien.

Author's Address

   Matthew Miller
   Cisco Systems, Inc.
   1899 Wynkoop Street, Suite 600
   Denver, CO  80202
   USA

   Phone: +1-303-308-3204
   Email: mamille2@cisco.com





Miller                    Expires May 24, 2014                 [Page 59]
