---
title: Examples of Protecting Content using JavaScript Object Signing and Encryption (JOSE)
abbrev: JOSE Cookbook
docname: draft-ietf-jose-cookbook-00
date: 
category: info

ipr: trust200902
area: Security
workgroup: JOSE Working Group
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: M. Miller
    name: Matthew Miller
    org: Cisco Systems, Inc.
    street: 1899 Wynkoop Street, Suite 600
    city: Denver
    region: CO
    code: 80202
    country: USA
    phone: +1-303-308-3204
    email: mamille2@cisco.com

informative:
    I-D.ietf-jose-json-web-algorithms:
    I-D.ietf-jose-json-web-encryption:
    I-D.ietf-jose-json-web-key:
    I-D.ietf-jose-json-web-signature:
    RFC1951:
    RFC4648:
    RFC7095:

--- abstract

A set of examples of using JavaScript Object Signing and Encryption (JOSE) to protect data.  This document illustrates a representative sampling of various JSON Web Signature (JWS) and JSON Web Encryption (JWE) results given similar inputs.


--- middle

# Introduction # {#intro}

The JavaScript Object Signing and Encryption (JOSE) technologies -- JSON Web Key (JWK) {{I-D.ietf-jose-json-web-key}}, JSON Web Signature (JWS) {{I-D.ietf-jose-json-web-signature}}, JSON Web Encryption (JWE) {{I-D.ietf-jose-json-web-encryption}}, and JSON Web Algorithms (JWA) {{I-D.ietf-jose-json-web-algorithms}} -- collectively can be used to protect content in a myriad of ways.  The full set of permutations is extremely large, and might be daunting to some.

This document provides a number of examples of signing or encrypting content using JOSE.  While not exhaustive, it does compile together a representative sample of JOSE features.  As much as possible, the same signature payload or encryption plaintext content is used to illustrate differences in various signing and encryption results.

## Conventions Used in this Document ## {#intro-conventions}

All instances of binary octet strings are represented using {{RFC4648}} base64url encoding.

Wherever possible, the examples include both the Compact and JSON serializations.

All of the examples in this document have whitespace added to improve formatting and readability.  Except for plaintext or payload content, whitespace is not part of the cryptographic operations.  Plaintext or payload content does include whitespace (unless otherwise noted), with line breaks (U+000A LINE FEED) added to improve readability.


# Terminology  # {#terms}

This document inherits terminology regarding JSON Web Key (JWK) technology from {{I-D.ietf-jose-json-web-key}}, terminology regarding JSON Web Signature (JWS) technology from {{I-D.ietf-jose-json-web-signature}}, terminology regarding JSON Web Encryption (JWE) technology from {{I-D.ietf-jose-json-web-encryption}}, and terminology regarding algorithms from {{I-D.ietf-jose-json-web-algorithms}}.

# JSON Web Signature Examples # {#jws}

The following sections demonstrate how to generate various JWS objects.

All of the succeeding examples use the following payload plaintext, serialized as UTF-8;  the sequence "\xe2\x80\x99" substituted for (U+2019 RIGHT SINGLE QUOTATION MARK) and line breaks (U+000A LINE FEED) replacing some " " (U+0020 SPACE) to improve readability:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It\xe2\x80\x99s a dangerous business, Frodo, going out your
door. You step onto the road, and if you don't keep your feet,
there\xe2\x80\x99s no knowing where you might be swept off
to.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-payload title="Payload content plaintext" }

The Payload -- with the sequence "\x2x80\x99" replaced with (U+2019 RIGHT SINGLE QUOTATION MARK) and line breaks (U+000A LINE FEED) replaced with " " (U+0020 SPACE) -- encoded as UTF-8 then as {{RFC4648}} base64url:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-payload_b64u title="Payload content, base64url-encoded" }


## RSA v1.5 Signature ## {#jws-rsa}

This example illustrates signing content using the "RS256" (RSASSA-PKCS1-v1_5 with SHA-256) algorithm.

### Input Factors ### {#jws-rsa-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* RSA private key; this example uses the key from {{jws-rsa-key}}.
* "alg" parameter of "RS256".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "bilbo.baggins@hobbiton.example",
  "use": "sig",
  "n": "n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT
      -O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqV
      wGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-
      oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde
      3uhGqC0ZCuEHg8lhzwOHrtIQbS0FVbb9k3-tVTU4fg_3L_vniUFAKwuC
      LqKnS2BYwdq_mzSnbLY7h_qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5g
      HdrNP5zw",
  "e": "AQAB",
  "d": "bWUC9B-EFRIo8kpGfh0ZuyGPvMNKvYWNtB_ikiH9k20eT-O1q_I78e
      iZkpXxXQ0UTEs2LsNRS-8uJbvQ-A1irkwMSMkK1J3XTGgdrhCku9gRld
      Y7sNA_AKZGh-Q661_42rINLRCe8W-nZ34ui_qOfkLnK9QWDDqpaIsA-b
      MwWWSDFu2MUBYwkHTMEzLYGqOe04noqeq1hExBTHBOBdkMXiuFhUq1BU
      6l-DqEiWxqg82sXt2h-LMnT3046AOYJoRioz75tSUQfGCshWTBnP5uDj
      d18kKhyv07lhfSJdrPdM5Plyl21hsFf4L_mHCuoFau7gdsPfHPxxjVOc
      OpBrQzwQ",
  "p": "3Slxg_DwTXJcb6095RoXygQCAZ5RnAvZlno1yhHtnUex_fp7AZ_9nR
      aO7HX_-SFfGQeutao2TDjDAWU4Vupk8rw9JR0AzZ0N2fvuIAmr_WCsmG
      peNqQnev1T7IyEsnh8UMt-n5CafhkikzhEsrmndH6LxOrvRJlsPp6Zv8
      bUq0k",
  "q": "uKE2dh-cTf6ERF4k4e_jy78GfPYUIaUyoSSJuBzp3Cubk3OCqs6grT
      8bR_cu0Dm1MZwWmtdqDyI95HrUeq3MP15vMMON8lHTeZu2lmKvwqW7an
      V5UzhM1iZ7z4yMkuUwFWoBvyY898EXvRD-hdqRxHlSqAZ192zB3pVFJ0
      s7pFc",
  "dp": "B8PVvXkvJrj2L-GYQ7v3y9r6Kw5g9SahXBwsWUzp19TVlgI-YV85q
      1NIb1rxQtD-IsXXR3-TanevuRPRt5OBOdiMGQp8pbt26gljYfKU_E9xn
      -RULHz0-ed9E9gXLKD4VGngpz-PfQ_q29pk5xWHoJp009Qf1HvChixRX
      59ehik",
  "dq": "CLDmDGduhylc9o7r84rEUVn7pzQ6PF83Y-iBZx5NT-TpnOZKF1pEr
      AMVeKzFEl41DlHHqqBLSM0W1sOFbwTxYWZDm6sI6og5iTbwQGIC3gnJK
      bi_7k_vJgGHwHxgPaX2PnvP-zyEkDERuf-ry4c_Z11Cq9AqC2yeL6kdK
      T1cYF8",
  "qi": "3PiqvXQN0zwMeE-sBvZgi289XP9XCQF3VWqPzMKnIgQp7_Tugo6-N
      ZBKCQsMf3HaEGBjTVJs_jcK8-TRXvaKe-7ZMaQj8VfBdYkssbu0NKDDh
      jJ-GtiseaDVWt7dcH0cfwxgFUHpQh7FoCrjFJ6h6ZEpMF6xmujs4qMpP
      z8aaI4"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-key title="RSA 2048-bit Private Key, in JWK format"}

### Signing Operation #### {#jws-rsa-op}

The following are generated to complete the signing operation:

* Protected JWS Header; this example uses the header from {{jws-rsa-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-rsa-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RS256",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-rsa-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmK
ZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4J
IwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8w
W1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluP
xUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_f
cIe8u9ipH84ogoree7vjbU5y18kDquDg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-rsa-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-rsa-protected}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-rsa-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmK
ZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4J
IwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8w
W1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluP
xUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_f
cIe8u9ipH84ogoree7vjbU5y18kDquDg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2
          dpbnNAaG9iYml0b24uZXhhbXBsZSJ9",
      "signature": "MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHo
          xnW2e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII
          7PNDi84wnB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0Rnlt
          uYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPo
          cSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxU
          Ahb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJush
          Z41Axf_fcIe8u9ipH84ogoree7vjbU5y18kDquDg"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-json title="JSON Serialization" }

## RSA-PSS Signature ## {#jws-rsapss}

This example illustrates signing content using the "PS256" (RSASSA-PSS with SHA-256) algorithm.

### Input Factors ### {#jws-rsapss-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* RSA private key; this example uses the key from {{jws-rsa-key}}.
* "alg" parameter of "RS256".

### Signing Operation ### {#jws-rsapss-op}

The following are generated to complete the signing operation:

* Protected JWS Header; this example uses the header from {{jws-rsapss-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-rsapss-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "PS384",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-rsapss-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42miAh2qyBzk1xEsnk2I
pN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllVo6_1OLPpcbUrhiUSMxbbXU
vdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRX
e8P_ijQ7p8Vdz0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT
0qI0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a
6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-rsapss-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-rsapss-protected_b64u}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-rsapss-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42miAh2qyBzk1xEsnk2I
pN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllVo6_1OLPpcbUrhiUSMxbbXU
vdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRX
e8P_ijQ7p8Vdz0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT
0qI0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a
6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2
          dpbnNAaG9iYml0b24uZXhhbXBsZSJ9",
      "signature": "cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy
          42miAh2qyBzk1xEsnk2IpN6-tPid6VrklHkqsGqDqHCdP6O8TTB5
          dDDItllVo6_1OLPpcbUrhiUSMxbbXUvdvWXzg-UD8biiReQFlfz2
          8zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRXe8P_ijQ7p8Vd
          z0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT0q
          I0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uT
          OcbH510a6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-json title="JSON Serialization" }

## ECDSA Signature ## {#jws-ecdsa}

This example illustrates signing content using the "ES512" (ECDSA with curve P-521 and SHA-512) algorithm.

### Input Factors ### {#jws-ecdsa-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* EC private key on the curve P-521; this example uses the key from {{jws-ecdsa-key}}.
* "alg" parameter of "ES512"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "kid": "bilbo.baggins@hobbiton.example",
  "use": "sig",
  "crv": "P-521",
  "x": "AHKZLLOsCOzz5cY97ewNUajB957y-C-U88c3v13nmGZx6sYl_oJXu9
      A5RkTKqjqvjyekWF-7ytDyRXYgCF5cj0Kt",
  "y": "AdymlHvOiLxXkEhayXQnNCvDX4h9htZaCJN34kfmC6pV5OhQHiraVy
      SsUdaQkAgDPrwQrJmbnX9cwlGfP-HqHZR1",
  "d": "AAhRON2r9cqXX1hg-RoI6R1tX5p2rUAYdmpHZoC1XNM56KtscrX6zb
      KipQrCW9CGZH3T4ubpnoTKLDYJ_fF3_rJt"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-key title="Elliptic Curve P-521 Private Key"}

### Signing Operation ### {#jws-ecdsa-op}

The following are generated before beginning the signature process:

* Protected JWS Header; this example uses the header from {{jws-ecdsa-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-ecdsa-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ES512",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-ecdsa-protected_b64u}}) and Payload content ({{jws-payload_b64u) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EvRCJgYnTh--MujbaxJCs6ulxanF5-XZ1BG2nPSnffu8aTzD9JkFZuGf5eSRoJ
Bmb3as3A_Qg1oSh7VGRYqqIkwZ9RIUM-k66Zf08mnpBxeSzu9KAQ8ZVF3sOPP1
TShgv03CE1Hq0LDvHR2WZvzZJsZClzB_nYaC_-oeNt-oKB7dxQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-ecdsa-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-ecdsa-protected_b64u}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-ecdsa-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
EvRCJgYnTh--MujbaxJCs6ulxanF5-XZ1BG2nPSnffu8aTzD9JkFZuGf5eSRoJ
Bmb3as3A_Qg1oSh7VGRYqqIkwZ9RIUM-k66Zf08mnpBxeSzu9KAQ8ZVF3sOPP1
TShgv03CE1Hq0LDvHR2WZvzZJsZClzB_nYaC_-oeNt-oKB7dxQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2
          dpbnNAaG9iYml0b24uZXhhbXBsZSJ9",
      "signature": "EvRCJgYnTh--MujbaxJCs6ulxanF5-XZ1BG2nPSnff
          u8aTzD9JkFZuGf5eSRoJBmb3as3A_Qg1oSh7VGRYqqIkwZ9RIUM-
          k66Zf08mnpBxeSzu9KAQ8ZVF3sOPP1TShgv03CE1Hq0LDvHR2WZv
          zZJsZClzB_nYaC_-oeNt-oKB7dxQ"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-json title="JSON Serialization" }

## HMAC-SHA2 Integrity Protection ## {#jws-hmac}

This example illustrates integrity protecting content using the "HS256" (HMAC-SHA-256) algorithm.

### Input Factors ### {#jws-hmac-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* AES symmetric key; this example uses the key from {{jws-hmac-key}}.
* "alg" parameter of "HS256".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037",
  "use": "sig",
  "k": "hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-key title="AES 256-bit symmetric key"}

### Signing Operation ### {#jws-hmac-op}

The following are generated before completing the signing operation:

* Protected JWS Header; this example uses the header from {{jws-hmac-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-hmac-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-hmac-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-hmac-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-hmac-protected_b64u}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-hmac-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT
          RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-json title="JSON Serialization" }

## Detached Signature ## {#jws-detached}

This example illustrates a detached signature.  This example is identical others, except the resulting JWS objects do not include the Payload content.  Instead, the application is expected to locate it elsewhere.  For example, the signature might be in a meta-data section, with the payload being the content.

### Input Factors ### {#jws-detached-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing key; this example uses the AES symmetric key from {{jws-hmac-key}}.
* Signing algorithm; this example uses "RS256".

### Signing Operation ### {#jws-detached-op}

The following are generated before completing the signing operation:

* Protected JWS Header; this example uses the header from {{jws-detached-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-detached-protected_b64u}}.

The protected JWS header parameters:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-detached-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-detached-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-detached-protected_b64u}})
* Signature ({{jws-detached-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
.
.
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-compact title="JSON Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "signatures": [
    {
      "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT
          RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-json title="JSON Serialization" }


## Protecting Specific Header Fields ## {#jws-somefields}

This example illustrates a signature where only certain header parameters are protected.  Since this example contains both unprotected and protected header parameters, only the JSON serialization is possible.

### Input Factors ### {#jws-somefields-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing key; this example uses the AES symmetric key from {{jws-hmac-key}}.
* Signing algorithm; this example uses "RS256".

### Signing Operation ### {#jws-somefields-op}

The following are generated before completing the signing operation:

* Protected JWS Header; this example uses the header from {{jws-somefields-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-somefields-protected_b64u}}.
* Unprotected JWS Header; this example uses the header from {{jws-somefields-unprotected}}.

The protected JWS header parameters:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-protected_b64u title="Protected JWS Header, base64url-encoded" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-unprotected title="Unprotected JWS Header JSON" }

Performing the signature operation over the combined protected JWS header ({{jws-somefields-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr20
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-somefields-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-somefields-protected_b64u}})
* Unprotected JWS header ({{jws-somefields-unprotected}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-somefields-sig}})

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJIUzI1NiJ9",
      "header": {
        "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature": "bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr2
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-json title="JSON Serialization" }


## Protecting Content Only ## {#jws-nofields}

This example illustrates a signature where none of the header parameters are protected.  Since this example contains only unprotected header parameters, only the JSON serialization is possible.

### Input Factors ### {#jws-nofields-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing key; this example uses the AES key from {{jws-hmac-key}}.
* Signing algorithm; this example uses "RS256"

### Signing Operation ### {#jws-nofields-op}

The following are generated before completing the signing operation:

* Unprotected JWS Header; this example uses the header from {{jws-nofields-unprotected}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-nofields-unprotected title="Unprotected JWS Header JSON" }

Performing the signature operation over the combined empty string (as there is no protected JWS header) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZuk
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-nofields-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-nofields-output}

The following compose the resulting JWS object:

* Unprotected JWS header ({{jws-nofields-unprotected}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-nofields-sig}})

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "header": {
        "alg": "HS256",
        "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature": "xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZu
          k"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: title="JSON Serialization" }


## Multiple Signatures ## {#jws-multi}

This example illustrates multiple signatures applied to the same payload.  Since this example contains more than one signature, only the JSON serialization is possible.

### Input Factors ### {#jws-multi-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing keys; this example uses the following:

  + RSA private key from {{jws-rsa-key}} for the first signature
  + EC private key from {{jws-ecdsa-key}} for the second signature
  + AES symmetric key from {{jws-hmac-key}} for the third signature

* Signing algorithms; this example uses the following:

  + "RS256" for the first signature
  + "ES512" for the second signature
  + "HS256" for the third signature

### First Signing Operation ### {#jws-multi-op_1}
 
The following are generated before completing the first signing operation:

* Protected JWS Header; this example uses the header from {{jws-multi-protected_1}}, encoded using {{RFC4648}} base64url to produce {{jws-multi-protected_b64u_1}}.
* Unprotected JWS Header; this example uses the header from {{jws-multi-unprotected_1}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_1 title="Signature #1 Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSUzI1NiJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_b64u_1 title="Signature #1 Protected JWS Header, base64url-encoded" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-unprotected_1 title="Signature #1 JWS Header JSON" }

Performing the first signature operation over the combined protected JWS header ({{jws-multi-protected_b64u_1}}) and the Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5NvyG53uoimic1tcMdSg-qpt
rzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFcryNFiHkSw129EghGpwkpxaTn_THJTC
glNbADko1MZBCdwzJxwqZc-1RlpO2HibUYyXSwO97BSe0_evZKdjvvKSgsIqjy
tKSeAMbhMBdMma622_BG5t4sdbuCHtFjp9iJmkio47AIwqkZV1aIZsv33uPUqB
BCXbYoQJwt7mxPftHmNlGoOSMxR_3thmXTCm4US-xiNOyhbm8afKK64jU6_TPt
QHiJeQJxz9G3Tx-083B745_AfYOnlC9w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_1 title="Signature #1, base64url-encoded"}

The following is the assembled first signature serialized as JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected": "eyJhbGciOiJSUzI1NiJ9",
  "header": {
    "kid": "bilbo.baggins@hobbiton.example"
  },
  "signature": "MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5NvyG53u
      oimic1tcMdSg-qptrzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFcryNFiHkS
      w129EghGpwkpxaTn_THJTCglNbADko1MZBCdwzJxwqZc-1RlpO2HibUY
      yXSwO97BSe0_evZKdjvvKSgsIqjytKSeAMbhMBdMma622_BG5t4sdbuC
      HtFjp9iJmkio47AIwqkZV1aIZsv33uPUqBBCXbYoQJwt7mxPftHmNlGo
      OSMxR_3thmXTCm4US-xiNOyhbm8afKK64jU6_TPtQHiJeQJxz9G3Tx-0
      83B745_AfYOnlC9w"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_sig_1 title="Signature #1 JSON"}

### Second Signing Operation ### {#jws-multi-op_2}

The following are generated before completing the second signing operation:

* Unprotected JWS Header; this example uses the header from {{jws-multi-unprotected_2}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ES512",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-unprotected_2 title="Signature #2 JWS Header JSON" }

Performing the second signature operation over the combined empty string (as there is no protected JWS header) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GjTxjbTg7oJxNl3UJISdCPHZjEFxrKDutWiXlRPUecb-Glch3dkAtxOxrP1lxO
j3p65-iSVrjuN6RaQDln4-zyQZ_UAJtJdDgauT6q9AROvbsQac5IRX21pj7XyT
XuAnL-kqaSR0NeTw3SoEcUdns4YR-12V_iFSruMsVtrawJ2w-w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_2 title="Signature #2, base64url-encoded"}

The following is the assembled second signature serialized as JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "header": {
    "alg": "ES512",
    "kid": "bilbo.baggins@hobbiton.example"
  },
  "signature": "GjTxjbTg7oJxNl3UJISdCPHZjEFxrKDutWiXlRPUecb-Gl
      ch3dkAtxOxrP1lxOj3p65-iSVrjuN6RaQDln4-zyQZ_UAJtJdDgauT6q
      9AROvbsQac5IRX21pj7XyTXuAnL-kqaSR0NeTw3SoEcUdns4YR-12V_i
      FSruMsVtrawJ2w-w"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_sig_2 title="Signature #2 JSON"}

### Third Signing Operation ### {#jws-multi-op_3}

The following are generated before completing the third signing operation:

* Protected JWS Header; this example uses the header from {{jws-multi-protected_3}}, encoded using {{RFC4648}} base64url to produce {{jws-multi-protected_b64u_3}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_3 title="Signature #3 Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_b64u_3 title="Signature #3 Protected JWS Header, base64url-encoded" }

Performing the third signature operation over the combined protected JWS header ({{jws-multi-protected_b64u_3}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_3 title="Signature #3, base64url-encoded"}

The following is the assembled third signature serialized as JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOW
      ItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
  "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_sig_3 title="Signature #3 JSON"}

### Output Results ### {#jws-multi-output}

The following compose the resulting JWS object:

* Payload content ({{jws-payload_b64u}})
* Signature #1 JSON ({{jws-multi-sig_sig_1}})
* Signature #2 JSON ({{jws-multi-sig_sig_2}})
* Signature #3 JSON ({{jws-multi-sig_sig_3}})

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJSUzI1NiJ9",
      "header": {
        "kid": "bilbo.baggins@hobbiton.example"
      },
      "signature": "MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5Nvy
          G53uoimic1tcMdSg-qptrzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFc
          ryNFiHkSw129EghGpwkpxaTn_THJTCglNbADko1MZBCdwzJxwqZc
          -1RlpO2HibUYyXSwO97BSe0_evZKdjvvKSgsIqjytKSeAMbhMBdM
          ma622_BG5t4sdbuCHtFjp9iJmkio47AIwqkZV1aIZsv33uPUqBBC
          XbYoQJwt7mxPftHmNlGoOSMxR_3thmXTCm4US-xiNOyhbm8afKK6
          4jU6_TPtQHiJeQJxz9G3Tx-083B745_AfYOnlC9w"
    },
    {
      "header": {
        "alg": "ES512",
        "kid": "bilbo.baggins@hobbiton.example"
      },
      "signature": "GjTxjbTg7oJxNl3UJISdCPHZjEFxrKDutWiXlRPUec
          b-Glch3dkAtxOxrP1lxOj3p65-iSVrjuN6RaQDln4-zyQZ_UAJtJ
          dDgauT6q9AROvbsQac5IRX21pj7XyTXuAnL-kqaSR0NeTw3SoEcU
          dns4YR-12V_iFSruMsVtrawJ2w-w"
    },
    {
      "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT
          RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-json title="JSON Serialization" }


# JSON Web Encryption Examples # {#jwe}

The following sections demonstrate how to generate various JWE objects.

All of the succeeding examples (unless otherwise noted) use the following plaintext content, serialized as UTF-8, with the sequence "\xe2\x80\x93" replacing (U+2013 EN DASH) and line breaks (U+000A LINE FEED) replacing some " " (U+0020 SPACE) characters to improve formatting:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can trust us to stick with you through thick and
thin\xe2\x80\x93to the bitter end. And you can trust us to
keep any secret of yours\xe2\x80\x93closer than you keep it
yourself. But you cannot trust us to let you face trouble
alone, and go off without a word. We are your friends, Frodo.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-plaintext title="Plaintext content" }


## Key Encryption using RSA v1.5 and AES-HMAC-SHA2 ## {#jwe-rsa15}

This example illustrates encrypting content using the "RSA1_5" (RSAES-PKCS1-v1_5) key encryption algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-rsa15-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* RSA public key; this example uses the key from {{jwe-rsa15-key}}.
* "alg" parameter of "RSA1_5".
* "enc" parameter of "A128CBC-HS256".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "frodo.baggins@hobbiton.example",
  "use": "enc",
  "n": "maxhbsmBtdQ3CNrKvprUE6n9lYcregDMLYNeTAWcLj8NnPU9XIYegT
      HVHQjxKDSHP2l-F5jS7sppG1wgdAqZyhnWvXhYNvcM7RfgKxqNx_xAHx
      6f3yy7s-M9PSNCwPC2lh6UAkR4I00EhV9lrypM9Pi4lBUop9t5fS9W5U
      NwaAllhrd-osQGPjIeI1deHTwx-ZTHu3C60Pu_LJIl6hKn9wbwaUmA4c
      R5Bd2pgbaY7ASgsjCUbtYJaNIHSoHXprUdJZKUMAzV0WOKPfA6OPI4oy
      pBadjvMZ4ZAj3BnXaSYsEZhaueTXvZB4eZOAjIyh2e_VOIKVMsnDrJYA
      VotGlvMQ",
  "e": "AQAB",
  "d": "Kn9tgoHfiTVi8uPu5b9TnwyHwG5dK6RE0uFdlpCGnJN7ZEi963R7wy
      bQ1PLAHmpIbNTztfrheoAniRV1NCIqXaW_qS461xiDTp4ntEPnqcKsyO
      5jMAji7-CL8vhpYYowNFvIesgMoVaPRYMYT9TW63hNM0aWs7USZ_hLg6
      Oe1mY0vHTI3FucjSM86Nff4oIENt43r2fspgEPGRrdE6fpLc9Oaq-qeP
      1GFULimrRdndm-P8q8kvN3KHlNAtEgrQAgTTgz80S-3VD0FgWfgnb1PN
      miuPUxO8OpI9KDIfu_acc6fg14nsNaJqXe6RESvhGPH2afjHqSy_Fd2v
      pzj85bQQ",
  "p": "2DwQmZ43FoTnQ8IkUj3BmKRf5Eh2mizZA5xEJ2MinUE3sdTYKSLtaE
      oekX9vbBZuWxHdVhM6UnKCJ_2iNk8Z0ayLYHL0_G21aXf9-unynEpUsH
      7HHTklLpYAzOOx1ZgVljoxAdWNn3hiEFrjZLZGS7lOH-a3QQlDDQoJOJ
      2VFmU",
  "q": "te8LY4-W7IyaqH1ExujjMqkTAlTeRbv0VLQnfLY2xINnrWdwiQ93_V
      F099aP1ESeLja2nw-6iKIe-qT7mtCPozKfVtUYfz5HrJ_XY2kfexJINb
      9lhZHMv5p1skZpeIS-GPHCC6gRlKo1q-idn_qxyusfWv7WAxlSVfQfk8
      d6Et0",
  "dp": "UfYKcL_or492vVc0PzwLSplbg4L3-Z5wL48mwiswbpzOyIgd2xHTH
      QmjJpFAIZ8q-zf9RmgJXkDrFs9rkdxPtAsL1WYdeCT5c125Fkdg317JV
      RDo1inX7x2Kdh8ERCreW8_4zXItuTl_KiXZNU5lvMQjWbIw2eTx1lpsf
      lo0rYU",
  "dq": "iEgcO-QfpepdH8FWd7mUFyrXdnOkXJBCogChY6YKuIHGc_p8Le9Mb
      pFKESzEaLlN1Ehf3B6oGBl5Iz_ayUlZj2IoQZ82znoUrpa9fVYNot87A
      CfzIG7q9Mv7RiPAderZi03tkVXAdaBau_9vs5rS-7HMtxkVrxSUvJY14
      TkXlHE",
  "qi": "kC-lzZOqoFaZCr5l0tOVtREKoVqaAYhQiqIRGL-MzS4sCmRkxm5vZ
      lXYx6RtE1n_AagjqajlkjieGlxTTThHD8Iga6foGBMaAr5uR1hGQpSc7
      Gl7CF1DZkBJMTQN6EshYzZfxW08mIO8M6Rzuh0beL6fG9mkDcIyPrBXx
      2bQ_mM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-key title="RSA 2048-bit Key, in JWK format"}

(**NOTE**: While the key includes the private parameters, only the public parameters "e" and "n" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-rsa15-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-rsa15-cek}}
* Initialization vector/nonce; this example uses the initialization vector from {{jwe-rsa15-iv}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3qyTVhIWt5juqZUCpfRqpvauwB956MEJL2Rt-8qXKSo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bbd5sTkYwhAIqfHsx8DayA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-rsa15-keyenc}

Performing the key encryption operation over the CEK ({{jwe-rsa15-cek}}) with the RSA key ({{jwe-rsa15-key}}) results in the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJBuuzxg0V7yk1WClnQePF
vG2K-pvSlWc9BRIazDrn50RcRai__3TDON395H3c62tIouJJ4XaRvYHFjZTZ2G
Xfz8YAImcc91Tfk0WXC2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcG
TSLUeeCt36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8Vl
zNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOh
MBs9M8XL223Fg47xlGsMXdfuY-4jaqVw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-rsa15-contentenc}

The following are generated before encrypting the plaintext:

* Protected JWE Header; this example uses the header from {{jwe-rsa15-protected}}, encoded using {{RFC4648}} base64url to produce {{jwe-rsa15-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RSA1_5",
  "kid": "frodo.baggins@hobbiton.example",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-rsa15-cek}});
* Initialization vector/nonce ({{jwe-rsa15-iv}}); and
* Protected JWE header ({{jwe-rsa15-protected}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-rsa15-ciphertext}}.
* Authentication tag from {{jwe-rsa15-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62JhJvGZ4_FNVSiGc_r
aa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wnI3Jvo0mkpEEnlDmZvDu_k8O
WzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc2VbVbK4dQKPdNTjPPEmRqcaGeTWZV
yeSUvf5k59yJZxRuSvWFf6KrNtmRdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0
zT5CbL5Qlw3sRc7u_hg0yKVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2
O6_7uInMGhFeX4ctHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VW
i7lzA6BP430m
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kvKuFBXHe5mQr4lqgobAUg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-rsa15-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-rsa15-protected_b64u}}).
* Encrypted Key ({{jwe-rsa15-encdkey}}).
* Initialization vector/nonce ({{jwe-rsa15-iv}}).
* Ciphertext ({{jwe-rsa15-ciphertext}}).
* Authentication Tag ({{jwe-rsa15-tag}}).

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
.
laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJBuuzxg0V7yk1WClnQePF
vG2K-pvSlWc9BRIazDrn50RcRai__3TDON395H3c62tIouJJ4XaRvYHFjZTZ2G
Xfz8YAImcc91Tfk0WXC2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcG
TSLUeeCt36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8Vl
zNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOh
MBs9M8XL223Fg47xlGsMXdfuY-4jaqVw
.
bbd5sTkYwhAIqfHsx8DayA
.
0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62JhJvGZ4_FNVSiGc_r
aa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wnI3Jvo0mkpEEnlDmZvDu_k8O
WzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc2VbVbK4dQKPdNTjPPEmRqcaGeTWZV
yeSUvf5k59yJZxRuSvWFf6KrNtmRdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0
zT5CbL5Qlw3sRc7u_hg0yKVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2
O6_7uInMGhFeX4ctHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VW
i7lzA6BP430m
.
kvKuFBXHe5mQr4lqgobAUg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzf
          TihJBuuzxg0V7yk1WClnQePFvG2K-pvSlWc9BRIazDrn50RcRai_
          _3TDON395H3c62tIouJJ4XaRvYHFjZTZ2GXfz8YAImcc91Tfk0WX
          C2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcGTSLUeeCt
          36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8
          VlzNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx
          1BpyIfgvfjOhMBs9M8XL223Fg47xlGsMXdfuY-4jaqVw"
    }
  ],
  "protected": "eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW
      5zQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In
      0",
  "iv": "bbd5sTkYwhAIqfHsx8DayA",
  "ciphertext": "0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62
      JhJvGZ4_FNVSiGc_raa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wn
      I3Jvo0mkpEEnlDmZvDu_k8OWzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc
      2VbVbK4dQKPdNTjPPEmRqcaGeTWZVyeSUvf5k59yJZxRuSvWFf6KrNtm
      RdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0zT5CbL5Qlw3sRc7u_hg0y
      KVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2O6_7uInMGhFeX4c
      tHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VWi7lzA6BP4
      30m",
  "tag": "kvKuFBXHe5mQr4lqgobAUg"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-json title="JSON Serialization"}

## Key Encryption using RSA-OAEP with A256GCM ## {#jwe-rsa_oaep}

This example illustrates encrypting content using the "RSA-OAEP" (RSAES-OAEP) key encryption algorithm and the "A256GCM" (AES-GCM) content encryption algorithm.

### Input Factors ### {#jwe-rsa_oaep-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the plaintext from {{jwe-plaintext}}.
* RSA public key; this example uses the key from {{jwe-rsa_oaep-key}}.
* "alg" parameter of "RSA-OAEP"
* "enc" parameter of "A256GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "samwise.gamgee@hobbiton.example",
  "use": "enc",
  "n": "wbdxI55VaanZXPY29Lg5hdmv2XhvqAhoxUkanfzf2-5zVUxa6prHRr
      I4pP1AhoqJRlZfYtWWd5mmHRG2pAHIlh0ySJ9wi0BioZBl1XP2e-C-Fy
      XJGcTy0HdKQWlrfhTm42EW7Vv04r4gfao6uxjLGwfpGrZLarohiWCPnk
      Nrg71S2CuNZSQBIPGjXfkmIy2tl_VWgGnL22GplyXj5YlBLdxXp3XeSt
      sqo571utNfoUTU8E4qdzJ3U1DItoVkPGsMwlmmnJiwA7sXRItBCivR4M
      5qnZtdw-7v4WuR4779ubDuJ5nalMv2S66-RPcnFAzWSKxtBDnFJJDGIU
      e7Tzizjg1nms0Xq_yPub_UOlWn0ec85FCft1hACpWG8schrOBeNqHBOD
      FskYpUc2LC5JA2TaPF2dA67dg1TTsC_FupfQ2kNGcE1LgprxKHcVWYQb
      86B-HozjHZcqtauBzFNV5tbTuB-TpkcvJfNcFLlH3b8mb-H_ox35FjqB
      SAjLKyoeqfKTpVjvXhd09knwgJf6VKq6UC418_TOljMVfFTWXUxlnfhO
      OnzW6HSSzD1c9WrCuVzsUMv54szidQ9wf1cYWf3g5qFDxDQKis99gcDa
      iCAwM3yEBIzuNeeCa5dartHDb1xEB_HcHSeYbghbMjGfasvKn0aZRsnT
      yC0xhWBlsolZE",
  "e": "AQAB",
  "alg": "RSA-OAEP",
  "d": "n7fzJc3_WG59VEOBTkayzuSMM780OJQuZjN_KbH8lOZG25ZoA7T4Bx
      cc0xQn5oZE5uSCIwg91oCt0JvxPcpmqzaJZg1nirjcWZ-oBtVk7gCAWq
      -B3qhfF3izlbkosrzjHajIcY33HBhsy4_WerrXg4MDNE4HYojy68TcxT
      2LYQRxUOCf5TtJXvM8olexlSGtVnQnDRutxEUCwiewfmmrfveEogLx9E
      A-KMgAjTiISXxqIXQhWUQX1G7v_mV_Hr2YuImYcNcHkRvp9E7ook0876
      DhkO8v4UOZLwA1OlUX98mkoqwc58A_Y2lBYbVx1_s5lpPsEqbbH-nqIj
      h1fL0gdNfihLxnclWtW7pCztLnImZAyeCWAG7ZIfv-Rn9fLIv9jZ6r7r
      -MSH9sqbuziHN2grGjD_jfRluMHa0l84fFKl6bcqN1JWxPVhzNZo01yD
      F-1LiQnqUYSepPf6X3a2SOdkqBRiquE6EvLuSYIDpJq3jDIsgoL8Mo1L
      oomgiJxUwL_GWEOGu28gplyzm-9Q0U0nyhEf1uhSR8aJAQWAiFImWH5W
      _IQT9I7-yrindr_2fWQ_i1UgMsGzA7aOGzZfPljRy6z-tY_KuBG00-28
      S_aWvjyUc-Alp8AUyKjBZ-7CWH32fGWK48j1t-zomrwjL_mnhsPbGs0c
      9WsWgRzI-K8gE",
  "p": "7_2v3OQZzlPFcHyYfLABQ3XP85Es4hCdwCkbDeltaUXgVy9l9etKgh
      vM4hRkOvbb01kYVuLFmxIkCDtpi-zLCYAdXKrAK3PtSbtzld_XZ9nlsY
      a_QZWpXB_IrtFjVfdKUdMz94pHUhFGFj7nr6NNxfpiHSHWFE1zD_AC3m
      Y46J961Y2LRnreVwAGNw53p07Db8yD_92pDa97vqcZOdgtybH9q6uma-
      RFNhO1AoiJhYZj69hjmMRXx-x56HO9cnXNbmzNSCFCKnQmn4GQLmRj9s
      fbZRqL94bbtE4_e0Zrpo8RNo8vxRLqQNwIy85fc6BRgBJomt8QdQvIgP
      gWCv5HoQ",
  "q": "zqOHk1P6WN_rHuM7ZF1cXH0x6RuOHq67WuHiSknqQeefGBA9PWs6Zy
      KQCO-O6mKXtcgE8_Q_hA2kMRcKOcvHil1hqMCNSXlflM7WPRPZu2qCDc
      qssd_uMbP-DqYthH_EzwL9KnYoH7JQFxxmcv5An8oXUtTwk4knKjkIYG
      RuUwfQTus0w1NfjFAyxOOiAQ37ussIcE6C6ZSsM3n41UlbJ7TCqewzVJ
      aPJN5cxjySPZPD3Vp01a9YgAD6a3IIaKJdIxJS1ImnfPevSJQBE79-EX
      e2kSwVgOzvt-gsmM29QQ8veHy4uAqca5dZzMs7hkkHtw1z0jHV90epQJ
      JlXXnH8Q",
  "dp": "19oDkBh1AXelMIxQFm2zZTqUhAzCIr4xNIGEPNoDt1jK83_FJA-xn
      x5kA7-1erdHdms_Ef67HsONNv5A60JaR7w8LHnDiBGnjdaUmmuO8XAxQ
      J_ia5mxjxNjS6E2yD44USo2JmHvzeeNczq25elqbTPLhUpGo1IZuG72F
      ZQ5gTjXoTXC2-xtCDEUZfaUNh4IeAipfLugbpe0JAFlFfrTDAMUFpC3i
      XjxqzbEanflwPvj6V9iDSgjj8SozSM0dLtxvu0LIeIQAeEgT_yXcrKGm
      pKdSO08kLBx8VUjkbv_3Pn20Gyu2YEuwpFlM_H1NikuxJNKFGmnAq9Lc
      nwwT0jvoQ",
  "dq": "S6p59KrlmzGzaQYQM3o0XfHCGvfqHLYjCO557HYQf72O9kLMCfd_1
      VBEqeD-1jjwELKDjck8kOBl5UvohK1oDfSP1DleAy-cnmL29DqWmhgwM
      1ip0CCNmkmsmDSlqkUXDi6sAaZuntyukyflI-qSQ3C_BafPyFaKrt1fg
      dyEwYa08pESKwwWisy7KnmoUvaJ3SaHmohFS78TJ25cfc10wZ9hQNOrI
      ChZlkiOdFCtxDqdmCqNacnhgE3bZQjGp3n83ODSz9zwJcSUvODlXBPc2
      AycH6Ci5yjbxt4Ppox_5pjm6xnQkiPgj01GpsUssMmBN7iHVsrE7N2iz
      nBNCeOUIQ",
  "qi": "FZhClBMywVVjnuUud-05qd5CYU0dK79akAgy9oX6RX6I3IIIPckCc
      iRrokxglZn-omAY5CnCe4KdrnjFOT5YUZE7G_Pg44XgCXaarLQf4hl80
      oPEf6-jJ5Iy6wPRx7G2e8qLxnh9cOdf-kRqgOS3F48Ucvw3ma5V6KGMw
      QqWFeV31XtZ8l5cVI-I3NzBS7qltpUVgz2Ju021eyc7IlqgzR98qKONl
      27DuEES0aK0WE97jnsyO27Yp88Wa2RiBrEocM89QZI1seJiGDizHRUP4
      UZxw9zsXww46wy0P6f9grnYp7t8LkyDDk8eoI4KX6SNMNVcyVS9IWjlq
      8EzqZEKIA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-key title="RSA 4096-bit Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "e" and "n" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-rsa_oaep-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption CEK (CEK); this example uses the key from {{jwe-rsa_oaep-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-rsa_oaep-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mYMfsggkTAm0TbvtlFh2hyoXnbEzJQjMxmgLN3d8xXA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-nBoKLH0YkLZPSI9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-rsa_oaep-keyenc}

Performing the key encryption operation over the CEK ({{jwe-rsa_oaep-cek}})) with the RSA key ({{jwe-rsa_oaep-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lCiud48LxeolRdtFF4nzQi
beYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyu
cvI6hvALeZ6OGnhNV4v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58
-Aad3FzMuo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8Bpx
KdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pK
IIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7
pZfPYDSXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQ
fOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe3
8UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU
06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8aKaOnx6ASE5
Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xDEdHAVCGRzN3woEI2ozDR
s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-rsa_oaep-contentenc}

The following are generated before encrypting the plaintext:

* Protected JWE Header; this example uses the the header from {{jwe-rsa_oaep-protected}}, encoded using {{RFC4648}} base64url to produce {{jwe-rsa_oaep-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RSA-OAEP",
  "kid": "samwise.gamgee@hobbiton.example",
  "enc": "A256GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-rsa_oaep-cek}});
* Initialization vector/nonce ({{jwe-rsa_oaep-iv}}); and
* Protected JWE Header ({{jwe-rsa_oaep-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-rsa_oaep-ciphertext}}.
* Authentication tag from {{jwe-rsa_oaep-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6UJuJowOHC5ytjqYgR
L-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYxrXfVzIIaRdhYtEMRBvBWbEw
P7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lhhNcizPersuhw5f-pGYzseva-TUaL8
iWnctc-sSwy7SQmRkfhDjwbz0fz6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML
7Cc2GxgvI7zqWo0YIEc7aCflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSV
maPpOslY2n525DxDfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UCGiqJxhBI3IFVdPalHHvA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-rsa_oaep-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-rsa_oaep-protected_b64u}})
* Encrypted key ({{jwe-rsa_oaep-encdkey}})
* Initialization vector/nonce ({{jwe-rsa_oaep-iv}})
* Ciphertext ({{jwe-rsa_oaep-ciphertext}})
* Authentication tag ({{jwe-rsa_oaep-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
.
rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lCiud48LxeolRdtFF4nzQi
beYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyu
cvI6hvALeZ6OGnhNV4v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58
-Aad3FzMuo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8Bpx
KdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pK
IIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7
pZfPYDSXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQ
fOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe3
8UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU
06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8aKaOnx6ASE5
Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xDEdHAVCGRzN3woEI2ozDR
s
.
-nBoKLH0YkLZPSI9
.
o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6UJuJowOHC5ytjqYgR
L-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYxrXfVzIIaRdhYtEMRBvBWbEw
P7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lhhNcizPersuhw5f-pGYzseva-TUaL8
iWnctc-sSwy7SQmRkfhDjwbz0fz6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML
7Cc2GxgvI7zqWo0YIEc7aCflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSV
maPpOslY2n525DxDfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw
.
UCGiqJxhBI3IFVdPalHHvA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNu
          h7lCiud48LxeolRdtFF4nzQibeYOl5S_PJsAXZwSXtDePz9hk-Bb
          tsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyucvI6hvALeZ6OGnhNV4
          v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58-Aad3FzM
          uo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8B
          pxKdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1
          asnuHtVMt2pKIIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq
          5pGqFmW2k8zpO878TRlZx7pZfPYDSXZyS0CfKKkMozT_qiCwZTSz
          4duYnt8hS4Z9sGthXn9uDqd6wycMagnQfOTs_lycTWmY-aqWVDKh
          jYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe38UjQb0lvXn
          1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU
          06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8a
          KaOnx6ASE5Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xD
          EdHAVCGRzN3woEI2ozDRs"
    }
  ],
  "protected": "eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2
      FtZ2VlQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0",
  "iv": "-nBoKLH0YkLZPSI9",
  "ciphertext": "o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6
      UJuJowOHC5ytjqYgRL-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYx
      rXfVzIIaRdhYtEMRBvBWbEwP7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lh
      hNcizPersuhw5f-pGYzseva-TUaL8iWnctc-sSwy7SQmRkfhDjwbz0fz
      6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML7Cc2GxgvI7zqWo0YIEc7a
      CflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSVmaPpOslY2n525Dx
      DfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw",
  "tag": "UCGiqJxhBI3IFVdPalHHvA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-json title="JSON Serialization"}


## Key Wrap using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2 ## {#jwe-pbes2}

The example illustrates encrypting content using the "PBES2-HS512+A256KW" (PBES2 Password-based Encryption using HMAC-SHA-512 and AES-256-KeyWrap) key encryption algorithm with the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-pbes2-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the plaintext from {{jwe-pbes2-plaintext}} (**NOTE** all whitespace added for readability)
* Password; this example uses the password from {{jwe-pbes2-pwd}}
* "alg" parameter of "PBES2-HS512+A256KW"
* "enc" parameter of "A128CBC-HS256"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "keys": [
    {
      "kty": "oct",
      "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
      "use": "enc",
      "alg": "A128GCM",
      "k": "XctOhJAkA-pD9Lh7ZgW_2A"
    },
    {
      "kty": "oct",
      "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
      "use": "enc",
      "alg": "A128KW",
      "k": "GZy6sIZ6wl9NJOKB-jnmVQ"
    },
    {
      "kty": "oct",
      "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
      "use": "enc",
      "alg": "A256GCMKW",
      "k": "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-plaintext title="Plaintext Content"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
entrap_o_peter_long_credit_tun
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-pwd title="Password"}

### Generated Factors ### {#jwe-pbes2-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-pbes2-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-pbes2-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GUqdBjgsMQUzgEoqmXYNVXkLAZ2dhFabB0Dxzzstc_4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
QcSliRvUHHZpA8mmO_eHfg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-pbes2-keyenc}

The following are generated before encrypting the CEK:

* Salt; this example uses the salt from {{jwe-pbes2-p2s}}.
* Iteration count; this example uses the interaction count 8192.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
8Q1SzinasR3xchYz6ZZcHA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-p2s title="Salt, base64url-encoded"}

Performing the key encryption operation over the CEK ({{jwe-pbes2-cek}})) with the following:

* Password ({{jwe-pbes2-pwd}};
* Salt ({{jwe-pbes2-p2s}}), encoded as an octet string; and
* Iteration count (8192)

produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
G9dAdb4XjKRJo6iYctx9AFznEC3g3wmwUEtym1yED_rih-evGDPWtQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-pbes2-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-pbes2-protected}}, encoded using {{RFC4648}} base64url to produce {{jwe-pbes2-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "PBES2-HS256+A128KW",
  "p2s": "8Q1SzinasR3xchYz6ZZcHA",
  "p2c": 8192,
  "cty": "jwk-set+json",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJwMnMiOiI4UTFTemluYXNSM3
hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOiJqd2stc2V0K2pzb24iLCJl
bmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext ({{jwe-pbes2-plaintext}}) with the the following:

* CEK ({{jwe-pbes2-cek}});
* Initialization vector/nonce ({{jwe-pbes2-iv}}); and
* Protected JWE header ({{jwe-pbes2-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-pbes2-ciphertext}}.
* Authentication tag from {{jwe-pbes2-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cLKGQbOYpRg4cLVlx5lXkZG8YrO2dCZS6458UT9uZUEC8ipqZzIU8EGgT977DP
ZgRPtDrfUYBnLqE9bzOtR3FwqcbRMuvUjKSN9OJ2uh-bfsvSN2Zn5UG2A4icLg
GhVl51ZBUaKEMD17bxqsfKcXCyJxzMF8p9PRHd_DTReJ6Gv1jinmdXxGMuq9eD
abH8zPnm1flhe7xmOqqtZA41gdCMQQRt23967oftKx0C8DhUVgZdQ1e4AA_L3S
4YS_Vo0h1083rpm1Wd2B9WluR2SUcFpR_YhlOKftkDPvaPi-o86fs7Zot2H5si
pctznqECInoomZmOvmxNTTt9AcRk4s-wMYS4Ar_VFV9Y9ro4p636x0BY1l6CEl
vRK52dxFPW7nznSyuyEUQ5oqD1km89ZjyQS-MpXt86u3fCTH3JWUmfC2aBzyR3
-xOYoVuTNGKw6MvBE7YbkjRquNuNWylnSKcaU9Kq8fYGetBvyL5NSfovwH90J4
7t8JZSLttKMRDE_jtzwcNaj79qRB5hgVNyj2ZZ3fDhMh-iBcUUiSp3qbIhUJhO
iAMf2RfGc-Z8Z2xdWW8jFm1r2th-NuCNPKyuWQG78TponVeTVkrvI12devvWb3
EsnbAFlGg-p_V_9oxfgQGAAjhvgZfDHS-ix25mcf5UYMpYtF1HhA-A5GxAGFwo
YxJATHiDy0xjoiR_IbLkzKpVJlrw9s79otiQyWGZa57w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xNJS9Ae0PcrniAsFaShQDA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-pbes2-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-pbes2-protected_b64u}})
* Encrypted key ({{jwe-pbes2-encdkey}})
* Initialization vector/nonce ({{jwe-pbes2-iv}})
* Ciphertext ({{jwe-pbes2-ciphertext}})
* Authentication tag ({{jwe-pbes2-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJwMnMiOiI4UTFTemluYXNSM3
hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOiJqd2stc2V0K2pzb24iLCJl
bmMiOiJBMTI4Q0JDLUhTMjU2In0
.
G9dAdb4XjKRJo6iYctx9AFznEC3g3wmwUEtym1yED_rih-evGDPWtQ
.
QcSliRvUHHZpA8mmO_eHfg
.
cLKGQbOYpRg4cLVlx5lXkZG8YrO2dCZS6458UT9uZUEC8ipqZzIU8EGgT977DP
ZgRPtDrfUYBnLqE9bzOtR3FwqcbRMuvUjKSN9OJ2uh-bfsvSN2Zn5UG2A4icLg
GhVl51ZBUaKEMD17bxqsfKcXCyJxzMF8p9PRHd_DTReJ6Gv1jinmdXxGMuq9eD
abH8zPnm1flhe7xmOqqtZA41gdCMQQRt23967oftKx0C8DhUVgZdQ1e4AA_L3S
4YS_Vo0h1083rpm1Wd2B9WluR2SUcFpR_YhlOKftkDPvaPi-o86fs7Zot2H5si
pctznqECInoomZmOvmxNTTt9AcRk4s-wMYS4Ar_VFV9Y9ro4p636x0BY1l6CEl
vRK52dxFPW7nznSyuyEUQ5oqD1km89ZjyQS-MpXt86u3fCTH3JWUmfC2aBzyR3
-xOYoVuTNGKw6MvBE7YbkjRquNuNWylnSKcaU9Kq8fYGetBvyL5NSfovwH90J4
7t8JZSLttKMRDE_jtzwcNaj79qRB5hgVNyj2ZZ3fDhMh-iBcUUiSp3qbIhUJhO
iAMf2RfGc-Z8Z2xdWW8jFm1r2th-NuCNPKyuWQG78TponVeTVkrvI12devvWb3
EsnbAFlGg-p_V_9oxfgQGAAjhvgZfDHS-ix25mcf5UYMpYtF1HhA-A5GxAGFwo
YxJATHiDy0xjoiR_IbLkzKpVJlrw9s79otiQyWGZa57w
.
xNJS9Ae0PcrniAsFaShQDA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "G9dAdb4XjKRJo6iYctx9AFznEC3g3wmwUEtym1
          yED_rih-evGDPWtQ"
    }
  ],
  "protected": "eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJwMnMiOi
      I4UTFTemluYXNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOi
      Jqd2stc2V0K2pzb24iLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
  "iv": "QcSliRvUHHZpA8mmO_eHfg",
  "ciphertext": "cLKGQbOYpRg4cLVlx5lXkZG8YrO2dCZS6458UT9uZUEC8
      ipqZzIU8EGgT977DPZgRPtDrfUYBnLqE9bzOtR3FwqcbRMuvUjKSN9OJ
      2uh-bfsvSN2Zn5UG2A4icLgGhVl51ZBUaKEMD17bxqsfKcXCyJxzMF8p
      9PRHd_DTReJ6Gv1jinmdXxGMuq9eDabH8zPnm1flhe7xmOqqtZA41gdC
      MQQRt23967oftKx0C8DhUVgZdQ1e4AA_L3S4YS_Vo0h1083rpm1Wd2B9
      WluR2SUcFpR_YhlOKftkDPvaPi-o86fs7Zot2H5sipctznqECInoomZm
      OvmxNTTt9AcRk4s-wMYS4Ar_VFV9Y9ro4p636x0BY1l6CElvRK52dxFP
      W7nznSyuyEUQ5oqD1km89ZjyQS-MpXt86u3fCTH3JWUmfC2aBzyR3-xO
      YoVuTNGKw6MvBE7YbkjRquNuNWylnSKcaU9Kq8fYGetBvyL5NSfovwH9
      0J47t8JZSLttKMRDE_jtzwcNaj79qRB5hgVNyj2ZZ3fDhMh-iBcUUiSp
      3qbIhUJhOiAMf2RfGc-Z8Z2xdWW8jFm1r2th-NuCNPKyuWQG78TponVe
      TVkrvI12devvWb3EsnbAFlGg-p_V_9oxfgQGAAjhvgZfDHS-ix25mcf5
      UYMpYtF1HhA-A5GxAGFwoYxJATHiDy0xjoiR_IbLkzKpVJlrw9s79oti
      QyWGZa57w",
  "tag": "xNJS9Ae0PcrniAsFaShQDA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-json title="JSON Serialization"}


## Key Agreement with Key Wrapping using ECDH-ES and AES-KeyWrap with AES-GCM ## {#jwe-ecdh_aeskw}

This example illustrates encrypting content using the "ECDH-ES+A128KW" (Elliptic Curve Diffie-Hellman Ephemeral-Static with AES-128-KeyWrap) key encryption algorithm and the "A128GCM" (AES-GCM) content encryption algorithm.

### Input Factors ### {#jwe-ecdh_aeskw-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}
* EC public key; this example uses the public key from {{jwe-ecdh_aeskw-key}}
* "alg" parameter of "ECDH-ES+A128KW"
* "enc" parameter of "A128GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "kid": "peregrin.took@tuckborough.example",
  "use": "enc",
  "crv": "P-384",
  "x": "YU4rRUzdmVqmRtWOs2OpDE_T5fsNIodcG8G5FWPrTPMyxpzsSOGaQL
      pe2FpxBmu2",
  "y": "A8-yxCHxkfBz3hKZfI1jUYMjUhsEveZ9THuwFjH2sCNdtksRJU7D5-
      SkgaFL1ETP",
  "d": "iTx2pk7wW-GqJkHcEkFQb2EFyYcO7RugmaW3mRrQVAOUiPommT0Idn
      YK2xDlZh-j"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-key title="Elliptic Curve P-384 Key, in JWK format"}

(**NOTE**: While the key includes the private parameters, only the public parameters "crv", "x", and "y" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-ecdh_aeskw-gen}

The following are generated before encrypting:

* Symmetric AES key as the Content Encryption Key (CEK); this example uses the key from {{jwe-ecdh_aeskw-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-ecdh_aeskw-iv}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xWZs5kGoq9eUQmQ8RW7B6w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pUqhjcicHmll5sMj
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-ecdh_aeskw-keyenc}

To encrypt the Content Encryption Key, the following are generated:

* Ephemeral EC private key on the same curve as the EC public key; this example uses the private key that matches the public key from {{jwe-ecdh_aeskw-epk}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "crv": "P-384",
  "x": "2YrXz579bgbTK5dU4EaQGDqG82IODnHY1LqhsjDtMlDz1uf6qtJPL6
      CwJ-lPN9T8",
  "y": "vU4wz1HvC7aZWav2jfxYLyrTffFCTxgX1oIzSKoohwnCFqmjmwsUvs
      UPNoj9g0Fx"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-epk title="Ephemeral Elliptic Curve P-384 Key, in JWK format"}

Performing the key encryption operation over the CEK ({{jwe-ecdh_aeskw-cek}}) with the following:

* The static Elliptic Curve public key ({{jwe-ecdh_aeskw-key}}); and
* The ephemeral Elliptic Curve private key ({{jwe-ecdh_aeskw-epk}});

produces the following JWE encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ReTzOiM_QJb1Rc2preww1wcKwhGlLWs1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-ecdh_aeskw-contentenc}

The following are generated before encrypting the content:

* Protected JWE header; this example uses the header from {{jwe-ecdh_aeskw-protected}}, encoded to {{RFC4648}} base64url as {{jwe-ecdh_aeskw-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ECDH-ES+A128KW",
  "kid": "peregrin.took@tuckborough.example",
  "epk": {
    "kty": "EC",
    "crv": "P-384",
    "x": "2YrXz579bgbTK5dU4EaQGDqG82IODnHY1LqhsjDtMlDz1uf6qtJP
        L6CwJ-lPN9T8",
    "y": "vU4wz1HvC7aZWav2jfxYLyrTffFCTxgX1oIzSKoohwnCFqmjmwsU
        vsUPNoj9g0Fx"
  },
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
Mzg0IiwieCI6IjJZclh6NTc5YmdiVEs1ZFU0RWFRR0RxRzgySU9EbkhZMUxxaH
NqRHRNbER6MXVmNnF0SlBMNkN3Si1sUE45VDgiLCJ5IjoidlU0d3oxSHZDN2Fa
V2F2MmpmeFlMeXJUZmZGQ1R4Z1gxb0l6U0tvb2h3bkNGcW1qbXdzVXZzVVBOb2
o5ZzBGeCJ9LCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-ecdh_aeskw-cek}});
* Initialization vector/nonce ({{jwe-ecdh_aeskw-iv}}); and
* Protected JWE header ({{jwe-ecdh_aeskw-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-ecdh_aeskw-ciphertext}}.
* Authentication tag from {{jwe-ecdh_aeskw-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0mrq_t5WQS5R5zILVgvmfP3Z9wnKpwszfPQnWkuBOJJqGPD7DaZuE4qbrA0ZKj
TCMkzubvprw7F1UF919xymmdzNynT5DS9IgUwDtIFv9V1nevvq5YcFbrCoSPOC
MGLq9j6SG3AJtv1cku1uuVGIuVI2l8_j54Ilc1YogDwSZ24ir-dwNyGKgU94LV
TS6HfCoBlDAwUH_cq1FdWyqILqxEELolDSeqU3IhnAKoY6oJnRAQdW__WbUNlJ
ElEIyQJLwOoeHxG2wn2e07bzFgI4yVVfiFFJyzXXMfIokxij6wUfAOdaE31U89
M-wcDlKXNkAYwIWyX2YDTQNYG3P_N7lz-LcfOsCnKw0v-B-aRacblP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TCFPm0OqERzYZ_jKSTpKBQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-ecdh_aeskw-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-ecdh_aeskw-protected_b64u}})
* Encrypted key ({{jwe-ecdh_aeskw-encdkey}})
* Initialization vector/nonce ({{jwe-ecdh_aeskw-iv}})
* Ciphertext ({{jwe-ecdh_aeskw-ciphertext}})
* Authentication tag ({{jwe-ecdh_aeskw-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
Mzg0IiwieCI6IjJZclh6NTc5YmdiVEs1ZFU0RWFRR0RxRzgySU9EbkhZMUxxaH
NqRHRNbER6MXVmNnF0SlBMNkN3Si1sUE45VDgiLCJ5IjoidlU0d3oxSHZDN2Fa
V2F2MmpmeFlMeXJUZmZGQ1R4Z1gxb0l6U0tvb2h3bkNGcW1qbXdzVXZzVVBOb2
o5ZzBGeCJ9LCJlbmMiOiJBMTI4R0NNIn0
.
ReTzOiM_QJb1Rc2preww1wcKwhGlLWs1
.
pUqhjcicHmll5sMj
.
0mrq_t5WQS5R5zILVgvmfP3Z9wnKpwszfPQnWkuBOJJqGPD7DaZuE4qbrA0ZKj
TCMkzubvprw7F1UF919xymmdzNynT5DS9IgUwDtIFv9V1nevvq5YcFbrCoSPOC
MGLq9j6SG3AJtv1cku1uuVGIuVI2l8_j54Ilc1YogDwSZ24ir-dwNyGKgU94LV
TS6HfCoBlDAwUH_cq1FdWyqILqxEELolDSeqU3IhnAKoY6oJnRAQdW__WbUNlJ
ElEIyQJLwOoeHxG2wn2e07bzFgI4yVVfiFFJyzXXMfIokxij6wUfAOdaE31U89
M-wcDlKXNkAYwIWyX2YDTQNYG3P_N7lz-LcfOsCnKw0v-B-aRacblP
.
TCFPm0OqERzYZ_jKSTpKBQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "ReTzOiM_QJb1Rc2preww1wcKwhGlLWs1"
    }
  ],
  "protected": "eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcm
      VncmluLnRvb2tAdHVja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdH
      kiOiJFQyIsImNydiI6IlAtMzg0IiwieCI6IjJZclh6NTc5YmdiVEs1ZF
      U0RWFRR0RxRzgySU9EbkhZMUxxaHNqRHRNbER6MXVmNnF0SlBMNkN3Si
      1sUE45VDgiLCJ5IjoidlU0d3oxSHZDN2FaV2F2MmpmeFlMeXJUZmZGQ1
      R4Z1gxb0l6U0tvb2h3bkNGcW1qbXdzVXZzVVBOb2o5ZzBGeCJ9LCJlbm
      MiOiJBMTI4R0NNIn0",
  "iv": "pUqhjcicHmll5sMj",
  "ciphertext": "0mrq_t5WQS5R5zILVgvmfP3Z9wnKpwszfPQnWkuBOJJqG
      PD7DaZuE4qbrA0ZKjTCMkzubvprw7F1UF919xymmdzNynT5DS9IgUwDt
      IFv9V1nevvq5YcFbrCoSPOCMGLq9j6SG3AJtv1cku1uuVGIuVI2l8_j5
      4Ilc1YogDwSZ24ir-dwNyGKgU94LVTS6HfCoBlDAwUH_cq1FdWyqILqx
      EELolDSeqU3IhnAKoY6oJnRAQdW__WbUNlJElEIyQJLwOoeHxG2wn2e0
      7bzFgI4yVVfiFFJyzXXMfIokxij6wUfAOdaE31U89M-wcDlKXNkAYwIW
      yX2YDTQNYG3P_N7lz-LcfOsCnKw0v-B-aRacblP",
  "tag": "TCFPm0OqERzYZ_jKSTpKBQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-json title="JSON Serialization"}


## Key Agreement using ECDH-ES with AES-CBC-HMAC-SHA2 ## {#jwe-ecdh}

This example illustrates encrypting content using the "ECDH-ES" (Elliptic Curve Diffie-Hellman Ephemeral-Static) key agreement algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-ecdh-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* EC public key; this example uses the public key from {{jwe-ecdh-key}}.
* "alg" parameter of "ECDH-ES"
* "enc" parameter of "A128CBC-HS256"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "kid": "meriadoc.brandybuck@buckland.example",
  "use": "enc",
  "crv": "P-256",
  "x": "XnXXKEsaUU4hPZza_zSHIbt02UA505B1rDWc7JNlcDE",
  "y": "Md5NqzfiXCytoaMglA-9MstvgOBdMSroXA2Hb6vR6dQ",
  "d": "44eY-VRWsn1zdz3VaWS6idEpOGt1ErydBARq7Iyh9pY"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-key title="Elliptic Curve P-256 Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "crv", "x", and "y" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-ecdh-gen}

The following are generated before encrypting:

* Initialization vector/nonce; this examples uses the initialization vector/nonce from {{jwe-ecdh-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-Mn-fJAUbrPBmliI7UgrsA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-iv title="Initialization Vector, base64url-encoded"}

**NOTE**: The Content Encryption Key (CEK) is not randomly generated; instead it is determined using key agreement.

### Key Agreement ### {#jwe-ecdh-enckey}

The following are generated to agree on a CEK:

* Ephemeral private key; this example uses the private that matches the public key from {{jwe-ecdh-epk}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "crv": "P-256",
  "x": "_HvWE1c6H5AOdcw-fHKpIN49qQLQ8DU8Sa6oTQ_Lpr4",
  "y": "I5o0Nf1SSkgx_D1Nl2fSsGMIf8GWNZ7MDFJRS4yC2k8"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-epk title="Ephemeral public key, in JWK format"}

Performing the ECDH operation using the static EC public key ({{jwe-ecdh-key}}) over the ephemeral private key {{jwe-ecdh-epk}}) produces the following CEK:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
alFuoBYfIZ3inRG9wCF6gW6-PWvgyi7vZGfeTkYaO5M
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-cek title="Agreed-to Content Encryption Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-ecdh-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-ecdh-protected}}, encoded to {{RFC4648}} as {{jwe-ecdh-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ECDH-ES",
  "kid": "meriadoc.brandybuck@buckland.example",
  "epk": {
    "kty": "EC",
    "crv": "P-256",
    "x": "_HvWE1c6H5AOdcw-fHKpIN49qQLQ8DU8Sa6oTQ_Lpr4",
    "y": "I5o0Nf1SSkgx_D1Nl2fSsGMIf8GWNZ7MDFJRS4yC2k8"
  },
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
LCJ4IjoiX0h2V0UxYzZINUFPZGN3LWZIS3BJTjQ5cVFMUThEVThTYTZvVFFfTH
ByNCIsInkiOiJJNW8wTmYxU1NrZ3hfRDFObDJmU3NHTUlmOEdXTlo3TURGSlJT
NHlDMms4In0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-ecdh-cek}});
* Initialization vector/nonce ({{jwe-ecdh-iv}}); and
* Protected JWE header ({{jwe-ecdh-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-ecdh-ciphertext}}.
* Authentication tag from {{jwe-ecdh-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PmBuk86YR72slvVGrVMGI3E9mc_tLK8mpzvCcnk6Jwsdpncl0qDBnjqoW99cs4
mDMhjlHDCXuBSkGHFxpUPQXiwDu8abeD9sGyYfkUvMBDLjSxJQcltX57JzOSvq
T2xUf6uAJ2r-WgTIMRFTzyWS7zUZWkMFdFM5Yg61BpHN_nS87trNEl8z38_NZ0
eubfEQIAFKg3wymMh8LJqNgUop4pBz1Ojhin4IjIaW6v5Pt36iFMxB-xTtNG4x
ZQva3V9t3vzZEXBH7gVK-oXFsP0QEoaWzv67an53BjZx0BJ5K2z6RCRuVXGmya
fLWjOC5JhY_ekdw0CtQ72j3wBHxVf3oV5yHzSi8Szqon72_kdo1a4WUxSMnlhz
05k1NmKHN6GI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TUSVEHqipB7wIOkTC_JJsQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-ecdh-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-ecdh_aeskw-protected_b64u}})
* Initialization vector/nonce ({{jwe-ecdh_aeskw-iv}})
* Ciphertext ({{jwe-ecdh_aeskw-ciphertext}})
* Authentication tag ({{jwe-ecdh_aeskw-tag}})

the resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
LCJ4IjoiX0h2V0UxYzZINUFPZGN3LWZIS3BJTjQ5cVFMUThEVThTYTZvVFFfTH
ByNCIsInkiOiJJNW8wTmYxU1NrZ3hfRDFObDJmU3NHTUlmOEdXTlo3TURGSlJT
NHlDMms4In0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
.
.
-Mn-fJAUbrPBmliI7UgrsA
.
PmBuk86YR72slvVGrVMGI3E9mc_tLK8mpzvCcnk6Jwsdpncl0qDBnjqoW99cs4
mDMhjlHDCXuBSkGHFxpUPQXiwDu8abeD9sGyYfkUvMBDLjSxJQcltX57JzOSvq
T2xUf6uAJ2r-WgTIMRFTzyWS7zUZWkMFdFM5Yg61BpHN_nS87trNEl8z38_NZ0
eubfEQIAFKg3wymMh8LJqNgUop4pBz1Ojhin4IjIaW6v5Pt36iFMxB-xTtNG4x
ZQva3V9t3vzZEXBH7gVK-oXFsP0QEoaWzv67an53BjZx0BJ5K2z6RCRuVXGmya
fLWjOC5JhY_ekdw0CtQ72j3wBHxVf3oV5yHzSi8Szqon72_kdo1a4WUxSMnlhz
05k1NmKHN6GI
.
TUSVEHqipB7wIOkTC_JJsQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-compact title="Compact Serialization"}

the resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected": "eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYn
      JhbmR5YnVja0BidWNrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6Ik
      VDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiX0h2V0UxYzZINUFPZGN3LWZIS3
      BJTjQ5cVFMUThEVThTYTZvVFFfTHByNCIsInkiOiJJNW8wTmYxU1NrZ3
      hfRDFObDJmU3NHTUlmOEdXTlo3TURGSlJTNHlDMms4In0sImVuYyI6Ik
      ExMjhDQkMtSFMyNTYifQ",
  "iv": "-Mn-fJAUbrPBmliI7UgrsA",
  "ciphertext": "PmBuk86YR72slvVGrVMGI3E9mc_tLK8mpzvCcnk6Jwsdp
      ncl0qDBnjqoW99cs4mDMhjlHDCXuBSkGHFxpUPQXiwDu8abeD9sGyYfk
      UvMBDLjSxJQcltX57JzOSvqT2xUf6uAJ2r-WgTIMRFTzyWS7zUZWkMFd
      FM5Yg61BpHN_nS87trNEl8z38_NZ0eubfEQIAFKg3wymMh8LJqNgUop4
      pBz1Ojhin4IjIaW6v5Pt36iFMxB-xTtNG4xZQva3V9t3vzZEXBH7gVK-
      oXFsP0QEoaWzv67an53BjZx0BJ5K2z6RCRuVXGmyafLWjOC5JhY_ekdw
      0CtQ72j3wBHxVf3oV5yHzSi8Szqon72_kdo1a4WUxSMnlhz05k1NmKHN
      6GI",
  "tag": "TUSVEHqipB7wIOkTC_JJsQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-json title="JSON Serialization"}


## Direct Encryption using AES-GCM ## {#jwe-dir_gcm}

This example illustrates encrypting content using a previously exchanged key directly and the "A128GCM" (AES-GCM) content encryption algorithm.

### Input Factors ### {#jwe-dir_gcm-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-dir_gcm-key}}.
* "alg" parameter of "dir"
* "enc" parameter of "A128GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
  "use": "enc",
  "alg": "A128GCM",
  "k": "XctOhJAkA-pD9Lh7ZgW_2A"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-key title="AES 128-bit key, in JWK format"}

### Generated Factors ### {#jwe-dir_gcm-gen}

The following are generated before encrypting:

* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-dir_gcm-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
refa467QzzKx6QAB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Content ### {#jwe-dir_gcm-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-dir_gcm-protected}}, encoded as {{RFC4648}} base64url to produce {{jwe-dir_gcm-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "dir",
  "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-protected title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-dir_gcm-key}});
* Initialization vector/nonce ({{jwe-dir_gcm-iv}}); and
* Protected JWE header ({{jwe-dir_gcm-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-dir_gcm-ciphertext}}.
* Authentication tag from {{jwe-dir_gcm-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JW_i_f52hww_ELQPGaYyeAB6HYGcR559l9TYnSovc23XJoBcW29rHP8yZOZG7Y
hLpT1bjFuvZPjQS-m0IFtVcXkZXdH_lr_FrdYt9HRUYkshtrMmIUAyGmUnd9zM
DB2n0cRDIHAzFVeJUDxkUwVAE7_YGRPdcqMyiBoCO-FBdE-Nceb4h3-FtBP-c_
BIwCPTjb9o0SbdcdREEMJMyZBH8ySWMVi1gPD9yxi-aQpGbSv_F9N4IZAxscj5
g-NJsUPbjk29-s7LJAGb15wEBtXphVCgyy53CoIKLHHeJHXex45Uz9aKZSRSIn
ZI-wjsY0yu3cT4_aQ3i1o-tiE-F8Ios61EKgyIQ4CWao8PFMj8TTnp
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vbb32Xvllea2OtmHAdccRQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-dir_gcm-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-dir_gcm-protected_b64u}})
* Initialization vector/nonce ({{jwe-dir_gcm-iv}})
* Ciphertext ({{jwe-dir_gcm-ciphertext}})
* Authentication tag ({{jwe-dir_gcm-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
.
.
refa467QzzKx6QAB
.
JW_i_f52hww_ELQPGaYyeAB6HYGcR559l9TYnSovc23XJoBcW29rHP8yZOZG7Y
hLpT1bjFuvZPjQS-m0IFtVcXkZXdH_lr_FrdYt9HRUYkshtrMmIUAyGmUnd9zM
DB2n0cRDIHAzFVeJUDxkUwVAE7_YGRPdcqMyiBoCO-FBdE-Nceb4h3-FtBP-c_
BIwCPTjb9o0SbdcdREEMJMyZBH8ySWMVi1gPD9yxi-aQpGbSv_F9N4IZAxscj5
g-NJsUPbjk29-s7LJAGb15wEBtXphVCgyy53CoIKLHHeJHXex45Uz9aKZSRSIn
ZI-wjsY0yu3cT4_aQ3i1o-tiE-F8Ios61EKgyIQ4CWao8PFMj8TTnp
.
vbb32Xvllea2OtmHAdccRQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected": "eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLT
      Q1Y2YtODY3Mi02MTdiNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0",
  "iv": "refa467QzzKx6QAB",
  "ciphertext": "JW_i_f52hww_ELQPGaYyeAB6HYGcR559l9TYnSovc23XJ
      oBcW29rHP8yZOZG7YhLpT1bjFuvZPjQS-m0IFtVcXkZXdH_lr_FrdYt9
      HRUYkshtrMmIUAyGmUnd9zMDB2n0cRDIHAzFVeJUDxkUwVAE7_YGRPdc
      qMyiBoCO-FBdE-Nceb4h3-FtBP-c_BIwCPTjb9o0SbdcdREEMJMyZBH8
      ySWMVi1gPD9yxi-aQpGbSv_F9N4IZAxscj5g-NJsUPbjk29-s7LJAGb1
      5wEBtXphVCgyy53CoIKLHHeJHXex45Uz9aKZSRSInZI-wjsY0yu3cT4_
      aQ3i1o-tiE-F8Ios61EKgyIQ4CWao8PFMj8TTnp",
  "tag": "vbb32Xvllea2OtmHAdccRQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-json title="JSON Serialization"}


## Key Wrap using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2 ## {#jwe-aesgcmkw}

This example illustrates encrypting content using the "A256GCMKW" (AES-256-GCM-KeyWrap) key encryption algorithm with the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-aesgcmkw-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* AES symmetric key; this example uses the key from {{jwe-aesgcmkw-key}}.
* "alg" parameter of "A256GCMKW"
* "enc" parameter of "A128CBC-HS256"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "use": "enc",
  "alg": "A256GCMKW",
  "k": "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-key title="AES 256-bit Key"}

### Generated Factors ### {#jwe-aesgcmkw-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-aesgcmkw-cek}}.
* Initialization vector/nonce for content encryption; this example uses the initilization vector/nonce from {{jwe-aesgcmkw-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UWxARpat23nL9ReIj4WG3D1ee9I4r-Mv5QLuFXdy_rE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gz6NjyEFNm_vm8Gj6FwoFQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-aesgcmkw-keyenc}

The following are generated before encrypting the CEK:

* Initialization vector/nonce for key wrapping; this example uses the initialization vector/nonce from {{jwe-aesgcmkw-kwiv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
KkYT0GX_2jHlfqN_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-kwiv title="Key Wrap Initialization Vector, base64url-encoded"}

Performing the key encryption operation over the CEK ({{jwe-aesgcmkw-cek}}) with the following:

* AES symmetric key ({{jwe-aesgcmkw-key}}); 
* Key wrap initialization vector/nonce ({{jwe-aesgcmkw-kwiv}}); and
* The empty string as authenticated data

produces the following:

* Encrypted Key from {{jwe-aesgcmkw-encdkey}}.
* Key wrap authentication tag from {{jwe-aesgcmkw-kwtag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElLvYNok
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-encdkey title="Encrypted Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kfPduVQ3T3H6vnewt--ksw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-kwtag title="Key Wrap Authentication Tag, base64url-encoded"}

### Encrypting the Content ### {#jwe-aesgcmkw-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-aesgcmkw-protected}}, encoded to {{RFC4648}} base64url as {{jwe-aesgcmkw-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A256GCMKW",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "tag": "kfPduVQ3T3H6vnewt--ksw",
  "iv": "KkYT0GX_2jHlfqN_",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdVZRM1QzSDZ2bmV3dC0ta3N3
IiwiaXYiOiJLa1lUMEdYXzJqSGxmcU5fIiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
J9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-aesgcmkw-cek}});
* Initialization vector/nonce ({{jwe-aesgcmkw-iv}}); and
* Protected JWE header ({{jwe-aesgcmkw-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-aesgcmkw-ciphertext}}.
* Authentication tag from {{jwe-aesgcmkw-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8EqoDZHyFKFBupS8iaE
eVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyWtZKX0gxKdy6HgLvqoGNbZCz
LjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQHLcqAHxy51449xkjZ7ewzZaGV3eFq
hpco8o4DijXaG5_7kp3h2cajRfDgymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hde
b6yhdTynCRmu-kqtO5Dec4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0Jtj
xAj4UPI61oONK7zzFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR
1B-gxpNk3xWU
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DKW7jrb4WaRSNfbXVPlT5g
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-aesgcmkw-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-aesgcmkw-protected_b64u}})
* encrypted key ({{jwe-aesgcmkw-encdkey}})
* Initialization vector/nonce ({{jwe-aesgcmkw-iv}})
* Ciphertext ({{jwe-aesgcmkw-ciphertext}})
* Authentication tag ({{jwe-aesgcmkw-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdVZRM1QzSDZ2bmV3dC0ta3N3
IiwiaXYiOiJLa1lUMEdYXzJqSGxmcU5fIiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
J9
.
lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElLvYNok
.
gz6NjyEFNm_vm8Gj6FwoFQ
.
Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8EqoDZHyFKFBupS8iaE
eVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyWtZKX0gxKdy6HgLvqoGNbZCz
LjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQHLcqAHxy51449xkjZ7ewzZaGV3eFq
hpco8o4DijXaG5_7kp3h2cajRfDgymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hde
b6yhdTynCRmu-kqtO5Dec4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0Jtj
xAj4UPI61oONK7zzFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR
1B-gxpNk3xWU
.
DKW7jrb4WaRSNfbXVPlT5g
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElL
          vYNok"
    }
  ],
  "protected": "eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS
      1iZmE5LTRkOTUtYjIwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdV
      ZRM1QzSDZ2bmV3dC0ta3N3IiwiaXYiOiJLa1lUMEdYXzJqSGxmcU5fIi
      wiZW5jIjoiQTEyOENCQy1IUzI1NiJ9",
  "iv": "gz6NjyEFNm_vm8Gj6FwoFQ",
  "ciphertext": "Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8E
      qoDZHyFKFBupS8iaEeVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyW
      tZKX0gxKdy6HgLvqoGNbZCzLjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQ
      HLcqAHxy51449xkjZ7ewzZaGV3eFqhpco8o4DijXaG5_7kp3h2cajRfD
      gymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hdeb6yhdTynCRmu-kqtO5Dec
      4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0JtjxAj4UPI61oONK7z
      zFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR1B-gxpNk3
      xWU",
  "tag": "DKW7jrb4WaRSNfbXVPlT5g"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-json title="JSON Serialization"}


## Key Wrap using AES-KeyWrap with AES-GCM ## {#jwe-aeskw}

The following example illustrates content encryption using the "A128KW" (AES-128-KeyWrap) key encryption algorithm and the "A128GCM" (AES-128-GCM) content encryption algorithm.

### Input Factors ### {#jwe-aeskw-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* AES symmetric key; this example uses the key from {{jwe-aeskw-key}}.
* "alg" parameter of "A128KW"
* "enc" parameter of "A128GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "use": "enc",
  "alg": "A128KW",
  "k": "GZy6sIZ6wl9NJOKB-jnmVQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-key title="AES 128-Bit Key"}

### Generated Factors ### {#jwe-aeskw-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key; this example uses the key from {{jwe-aeskw-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-aeskw-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aY5_Ghmk9KxWPBLu_glx1w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Qx0pmsDa8KnJc9Jo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-aeskw-keyenc}

Performing the key encryption operation over the CEK ({{jwe-aeskw-cek}}) with the AES key ({{jwe-aeskw-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-aeskw-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-aeskw-protected}}, encoded to {{RFC4648}} base64url as {{jwe-aeskw-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-aeskw-cek}});
* Initialization vector/nonce ({{jwe-aeskw-iv}}); and
* Protected JWE header ({{jwe-aeskw-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-aeskw-ciphertext}}.
* Authentication tag from {{jwe-aeskw-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1bTdhtFJgJxeVmJkLD6
1A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGkd3EkU0vjHi9gTlb90qSYFfe
F0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiYSoYJVSpf7ej6zaYcMv3WwdxDFl8RE
wOhNImk2Xld2JXq6BR53TSFkyT7PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-p
uQsmthc9Zg0ojmJfqqFvETUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRa
a8Z7MOZ7UGxGIMvEmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-ciphertext title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ER7MWJZ1FBI_NKvn7Zb1Lw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-aeskw-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-aeskw-protected_b64u}})
* encrypted key ({{jwe-aeskw-encdkey}})
* Initialization vector/nonce ({{jwe-aeskw-iv}})
* Ciphertext ({{jwe-aeskw-ciphertext}})
* Authentication tag ({{jwe-aeskw-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
.
CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx
.
Qx0pmsDa8KnJc9Jo
.
AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1bTdhtFJgJxeVmJkLD6
1A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGkd3EkU0vjHi9gTlb90qSYFfe
F0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiYSoYJVSpf7ej6zaYcMv3WwdxDFl8RE
wOhNImk2Xld2JXq6BR53TSFkyT7PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-p
uQsmthc9Zg0ojmJfqqFvETUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRa
a8Z7MOZ7UGxGIMvEmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF
.
ER7MWJZ1FBI_NKvn7Zb1Lw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx"
    }
  ],
  "protected": "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz
      MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn
      0",
  "iv": "Qx0pmsDa8KnJc9Jo",
  "ciphertext": "AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1b
      TdhtFJgJxeVmJkLD61A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGk
      d3EkU0vjHi9gTlb90qSYFfeF0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiY
      SoYJVSpf7ej6zaYcMv3WwdxDFl8REwOhNImk2Xld2JXq6BR53TSFkyT7
      PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-puQsmthc9Zg0ojmJfqqFvE
      TUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRaa8Z7MOZ7UGxGIMv
      EmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF",
  "tag": "ER7MWJZ1FBI_NKvn7Zb1Lw"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-json title="JSON Serialization"}


## Compressed Content ## {#jwe-compressed}

This example illustrates encrypting content that is first compressed.  It reuses the AES key, key encryption algorithm, and content encryption algorithm from {{jwe-aeskw}}.

### Input Factors ### {#jwe-compressed-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".
* "zip" parameter as "DEF".

### Generated Factors ### {#jwe-compressed-gen}

The following are generated before encrypting:

* Compressed plaintext from the original plaintext content; compressing {{jwe-plaintext}} using the DEFLATE {{RFC1951}} algorithm produces the compressed plaintext from {{jwe-compressed-plaintext_c}}.
* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-compressed-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-compressed-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eJxtj8ENwjAMRVf5A1TdAQ6sgDimqUOiRjFyHFW9sQMbMgluKg5InBz5___8c-
MG7wpUWlW0CmVUTX7BmjRiM1mjcLtHm_valXl_lffzZVaNhCmpkoDKPOJk6vYH
uRA9LLqhkhdScNhtUo3iM1eLa7TIHu3WpIdOOYw4N_1CC-sPN9MhBefJBG5TJr
jMhYbe9M52KvS_sFEcVhareTWTUD-BIMmq1wEX4ZnHD2MNZEM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-plaintext_c title="Compressed Plaintext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gVktsx0oZ22g4sBxtKAXIA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PzlM5rwyEkQ9O1QF
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-compressed-keyenc}

Performing the key encryption operation over the CEK ({{jwe-compressed-cek}}) with the AES key ({{jwe-aeskw-key) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UCfvTL--SuX31GNhsoyDyNqtWGudNpEj
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-compressed-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-compressed-protected}}, encoded as {{RFC4648}} base64url as {{jwe-compressed-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM",
  "zip": "DEF"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the compressed Plaintext ({{jwe-compressed-plaintext_c}}, encoded as an octet string) with the following:

* CEK ({{jwe-compressed-cek}});
* Initialization vector/nonce ({{jwe-compressed-iv}}); and
* Protected JWE header ({{jwe-compressed-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-compressed-ciphertext}}.
* Authentication tag from {{jwe-compressed-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TkGe8Iu2WhBqRCnkPUktYP5M45MYI3OYikT6XZ52_jlOYLgWR19lelN-xWNyzK
VmFMkzPLsgckIZN--J_4MH9hq5GCvgV0b1e058GWEqihYrZeUkgRU0JGcC72LT
8s2PeR18wqmadgV0gdOgIN7RHS_tbqoxSn5ZM6wF1UuL2InGNwurvN2RaCeCqc
VwOdJXO1dq6HhOX_PnPTuGnNgeFaqRyklhdjyRG-gudlI3nBY
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-ciphertext title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0l3nysmk6K1RQjIC4KtXTw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-compressed-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-compressed-protected_b64u}})
* encrypted key ({{jwe-compressed-encdkey}})
* Initialization vector/nonce ({{jwe-compressed-iv}})
* Ciphertext ({{jwe-compressed-ciphertext}})
* Authentication tag ({{jwe-compressed-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
.
UCfvTL--SuX31GNhsoyDyNqtWGudNpEj
.
PzlM5rwyEkQ9O1QF
.
TkGe8Iu2WhBqRCnkPUktYP5M45MYI3OYikT6XZ52_jlOYLgWR19lelN-xWNyzK
VmFMkzPLsgckIZN--J_4MH9hq5GCvgV0b1e058GWEqihYrZeUkgRU0JGcC72LT
8s2PeR18wqmadgV0gdOgIN7RHS_tbqoxSn5ZM6wF1UuL2InGNwurvN2RaCeCqc
VwOdJXO1dq6HhOX_PnPTuGnNgeFaqRyklhdjyRG-gudlI3nBY
.
0l3nysmk6K1RQjIC4KtXTw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "UCfvTL--SuX31GNhsoyDyNqtWGudNpEj"
    }
  ],
  "protected": "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz
      MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIi
      wiemlwIjoiREVGIn0",
  "iv": "PzlM5rwyEkQ9O1QF",
  "ciphertext": "TkGe8Iu2WhBqRCnkPUktYP5M45MYI3OYikT6XZ52_jlOY
      LgWR19lelN-xWNyzKVmFMkzPLsgckIZN--J_4MH9hq5GCvgV0b1e058G
      WEqihYrZeUkgRU0JGcC72LT8s2PeR18wqmadgV0gdOgIN7RHS_tbqoxS
      n5ZM6wF1UuL2InGNwurvN2RaCeCqcVwOdJXO1dq6HhOX_PnPTuGnNgeF
      aqRyklhdjyRG-gudlI3nBY",
  "tag": "0l3nysmk6K1RQjIC4KtXTw"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-json title="JSON Serialization"}

## Including Additional Authenticated Data ## {#jwe-aad}

This example illustrates encrypting content that includes additional authenticated data. As this example includes an additional top-level property not present in the Compact serialization, only the JSON serialization is possible.

### Input Factors ### {#jwe-aad-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".
* Additional authenticated data; this example uses a {{RFC7095}} vCard from {{jwe-aad-data}}, serialized to UTF-8.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[
  "vcard",
  [
    [ "version", {}, "text", "4.0" ],
    [ "fn", {}, "text", "Meriadoc Brandybuck" ],
    [ "n", {},
      "text", [
        "Brandybuck", "Meriadoc", "Mr.", ""
      ]
    ],
    [ "bday", {}, "text", "TA 2982" ],
    [ "gender", {}, "text", "M" ]
  ]
]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-data title="Additional Authenticated Data, in JSON format"}

**NOTE** whitespace between JSON values added for readability.
 
### Generated Factors ### {#jwe-aad-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-aad-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-aad-iv}}.
* Encoded additional authenticated data (AAD); this example uses the additional authenticated data from {{jwe-aad-data}}, encoded to {{RFC4648}} base64url as {{jwe-aad-data_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
75m1ALsYv10pZTKPWrsqdg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
veCx9ece2orS7c_N
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-iv title="Initialization Vector, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxbImZuIix7fS
widGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4iLHt9LCJ0ZXh0Iixb
IkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIsIiJdXSxbImJkYXkiLHt9LC
J0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVyIix7fSwidGV4dCIsIk0iXV1d
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-data_b64u title="Additional Authenticated Data, base64url-encoded"}

### Encrypting the Key ### {#jwe-aad-keyenc}

Performing the key encryption operation over the CEK ({{jwe-aad-cek}}) with the AES key ({{jwe-aeskw-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4YiiQ_ZzH76TaIkJmYfRFgOV9MIpnx4X
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-aad-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-aad-protected}}, encoded to {{RFC4648}} base64url as {{jwe-aad-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the following:

* CEK ({{jwe-aad-cek}});
* Initialization vector/nonce ({{jwe-aad-iv}}); and
* Concatenation of the protected JWE header ({{jwe-aad-protected_b64u}}), ".", and the {{RFC4648}} base64url encoding of {{jwe-aad-data}} as authenticated data

produces the following:

* Ciphertext from {{jwe-aad-ciphertext}}.
* Authentication tag from {{jwe-aad-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Z_3cbr0k3bVM6N3oSNmHz7Lyf3iPppGf3Pj17wNZqteJ0Ui8p74SchQP8xygM1
oFRWCNzeIa6s6BcEtp8qEFiqTUEyiNkOWDNoF14T_4NFqF-p2Mx8zkbKxI7oPK
8KNarFbyxIDvICNqBLba-v3uzXBdB89fzOI-Lv4PjOFAQGHrgv1rjXAmKbgkft
9cB4WeyZw8MldbBhc-V_KWZslrsLNygon_JJWd_ek6LQn5NRehvApqf9ZrxB4a
q3FXBxOxCys35PhCdaggy2kfUfl2OkwKnWUbgXVD1C6HxLIlqHhCwXDG59weHr
RDQeHyMRoBljoV3X_bUTJDnKBFOod7nLz-cj48JMx3SnCZTpbQAkFV
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vOaH_Rajnpy_3hOtqvZHRA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-aad-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-aad-protected_b64u}})
* encrypted key ({{jwe-aad-encdkey}})
* Initialization vector/nonce ({{jwe-aad-iv}})
* Additional authenticated data ({{jwe-aad-data_b64u}})
* Ciphertext ({{jwe-aad-ciphertext}})
* Authentication tag ({{jwe-aad-tag}})

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "4YiiQ_ZzH76TaIkJmYfRFgOV9MIpnx4X"
    }
  ],
  "protected": "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz
      MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn
      0",
  "iv": "veCx9ece2orS7c_N",
  "aad": "WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxb
      ImZuIix7fSwidGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4i
      LHt9LCJ0ZXh0IixbIkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIs
      IiJdXSxbImJkYXkiLHt9LCJ0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVy
      Iix7fSwidGV4dCIsIk0iXV1d",
  "ciphertext": "Z_3cbr0k3bVM6N3oSNmHz7Lyf3iPppGf3Pj17wNZqteJ0
      Ui8p74SchQP8xygM1oFRWCNzeIa6s6BcEtp8qEFiqTUEyiNkOWDNoF14
      T_4NFqF-p2Mx8zkbKxI7oPK8KNarFbyxIDvICNqBLba-v3uzXBdB89fz
      OI-Lv4PjOFAQGHrgv1rjXAmKbgkft9cB4WeyZw8MldbBhc-V_KWZslrs
      LNygon_JJWd_ek6LQn5NRehvApqf9ZrxB4aq3FXBxOxCys35PhCdaggy
      2kfUfl2OkwKnWUbgXVD1C6HxLIlqHhCwXDG59weHrRDQeHyMRoBljoV3
      X_bUTJDnKBFOod7nLz-cj48JMx3SnCZTpbQAkFV",
  "tag": "vOaH_Rajnpy_3hOtqvZHRA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-json title="JSON Serialization"}


## Protecting Specific Header Fields ## {#jwe-somefields}

This example illustrates encrypting content where only certain JWE header parameters are protected.  As this example includes unprotected JWE header parameters, only the JSON serialization is possible.

### Input Factors ### {#jwe-somefields-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".

### Generated Factors ### {#jwe-somefields-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-somefields-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-somefields-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WDgEptBmQs9ouUvArz6x6g
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WgEJsDS9bkoXQ3nR
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-somefields-keyenc}

Performing the key encryption operation over the CEK ({{jwe-somefields-cek}}) with the AES key ({{jwe-aeskw-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jJIcM9J-hbx3wnqhf5FlkEYos0sHsF0H
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-somefields-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-somefields-protected}}, encoded to {{RFC4648}} base64url as {{jwe-somefields-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the following:

* CEK ({{jwe-somefields-cek}});
* Initialization vector/nonce ({{jwe-somefields-iv}}); and
* Protected JWE header ({{jwe-somefields-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-somefields-ciphertext}}.
* Authentication tag from {{jwe-somefields-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lIbCyRmRJxnB2yLQOTqjCDKV3H30ossOw3uD9DPsqLL2DM3swKkjOwQyZtWsFL
YMj5YeLht_StAn21tHmQJuuNt64T8D4t6C7kC9OCCJ1IHAolUv4MyOt80MoPb8
fZYbNKqplzYJgIL58g8N2v46OgyG637d6uuKPwhAnTGm_zWhqc_srOvgiLkzyF
XPq1hBAURbc3-8BqeRb48iR1-_5g5UjWVD3lgiLCN_P7AW8mIiFvUNXBPJK3nO
WL4teUPS8yHLbWeL83olU4UAgL48x-8dDkH23JykibVSQju-f7e-1xreHWXzWL
Hs1NqBbre0dEwK3HX_xM0LjUz77Krppgegoutpf5qaKg3l-_xMINmf
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fNYLqpUe84KD45lvDiaBAQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-somefields-output}

The following compose the resulting JWE object:

* Unprotected JWE header ({{jwe-somefields-unprotected}})
* Protected JWE header ({{jwe-somefields-protected_b64u}})
* encrypted key ({{jwe-somefields-encdkey}})
* Initialization vector/nonce ({{jwe-somefields-iv}})
* Ciphertext ({{jwe-somefields-ciphertext}})
* Authentication tag ({{jwe-somefields-tag}})

The following unprotected JWE header is generated before assembling the output results:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-unprotected title="Unprotected JWE Header JSON"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "jJIcM9J-hbx3wnqhf5FlkEYos0sHsF0H"
    }
  ],
  "unprotected": {
    "alg": "A128KW",
    "kid": "81b20965-8332-43d9-a468-82160ad91ac8"
  },
  "protected": "eyJlbmMiOiJBMTI4R0NNIn0",
  "iv": "WgEJsDS9bkoXQ3nR",
  "ciphertext": "lIbCyRmRJxnB2yLQOTqjCDKV3H30ossOw3uD9DPsqLL2D
      M3swKkjOwQyZtWsFLYMj5YeLht_StAn21tHmQJuuNt64T8D4t6C7kC9O
      CCJ1IHAolUv4MyOt80MoPb8fZYbNKqplzYJgIL58g8N2v46OgyG637d6
      uuKPwhAnTGm_zWhqc_srOvgiLkzyFXPq1hBAURbc3-8BqeRb48iR1-_5
      g5UjWVD3lgiLCN_P7AW8mIiFvUNXBPJK3nOWL4teUPS8yHLbWeL83olU
      4UAgL48x-8dDkH23JykibVSQju-f7e-1xreHWXzWLHs1NqBbre0dEwK3
      HX_xM0LjUz77Krppgegoutpf5qaKg3l-_xMINmf",
  "tag": "fNYLqpUe84KD45lvDiaBAQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-json title="JSON Serialization"}


## Protecting Content Only ## {#jwe-nofields}

This example illustrates encrypting content where none of the JWE header parameters are protected.  As this example includes only unprotected JWE header parameters, only the JSON serialization is possible.

### Input Factors ### {#jwe-nofields-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".

### Generated Factors ### {#jwe-nofields-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key; this example the key from {{jwe-nofields-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-nofields-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
KBooAFl30QPV3vkcZlXnzQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YihBoVOGsR1l7jCD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-nofields-keyenc}

Performing the key encryption operation over the CEK ({{jwe-nofields-cek}} with the AES key ({{jwe-aeskw-key}} produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
244YHfO_W7RMpQW81UjQrZcq5LSyqiPv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-nofields-contentenc}

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-nofields-cek}});
* Initialization vector/nonce ({{jwe-nofields-iv}}); and
* Empty string as authenticated data

produces the following:

* Ciphertext from {{jwe-nofields-ciphertext}}.
* Authenticated data from {{jwe-nofields-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
qtPIMMaOBRgASL10dNQhOa7Gqrk7Eal1vwht7R4TT1uq-arsVCPaIeFwQfzrSS
6oEUWbBtxEasE0vC6r7sphyVziMCVJEuRJyoAHFSP3eqQPb4Ic1SDSqyXjw_L3
svybhHYUGyQuTmUQEDjgjJfBOifwHIsDsRPeBz1NomqeifVPq5GTCWFo5k_MNI
QURR2Wj0AHC2k7JZfu2iWjUHLF8ExFZLZ4nlmsvJu_mvifMYiikfNfsZAudISO
a6O73yPZtL04k_1FI7WDfrb2w7OqKLWDXzlpcxohPVOLQwpA3mFNRKdY-bQz4Z
4KX9lfz1cne31N4-8BKmojpw-OdQjKdLOGkC445Fb_K1tlDQXw2sBF
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
e2m0Vm7JvjK2VpCKXS-kyg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-nofields-output}

The following unprotected JWE header is generated before assembling the output results:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-unprotected title="Unprotected JWE Header JSON"}

The following compose the resulting JWE object:

* Unprotected JWE header ({{jwe-nofields-unprotected}})
* encrypted key ({{jwe-nofields-encdkey}})
* Initialization vector/nonce ({{jwe-nofields-iv}})
* Ciphertext ({{jwe-nofields-ciphertext}})
* Authentication tag ({{jwe-nofields-tag}})

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "244YHfO_W7RMpQW81UjQrZcq5LSyqiPv"
    }
  ],
  "unprotected": {
    "alg": "A128KW",
    "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
    "enc": "A128GCM"
  },
  "iv": "YihBoVOGsR1l7jCD",
  "ciphertext": "qtPIMMaOBRgASL10dNQhOa7Gqrk7Eal1vwht7R4TT1uq-
      arsVCPaIeFwQfzrSS6oEUWbBtxEasE0vC6r7sphyVziMCVJEuRJyoAHF
      SP3eqQPb4Ic1SDSqyXjw_L3svybhHYUGyQuTmUQEDjgjJfBOifwHIsDs
      RPeBz1NomqeifVPq5GTCWFo5k_MNIQURR2Wj0AHC2k7JZfu2iWjUHLF8
      ExFZLZ4nlmsvJu_mvifMYiikfNfsZAudISOa6O73yPZtL04k_1FI7WDf
      rb2w7OqKLWDXzlpcxohPVOLQwpA3mFNRKdY-bQz4Z4KX9lfz1cne31N4
      -8BKmojpw-OdQjKdLOGkC445Fb_K1tlDQXw2sBF",
  "tag": "e2m0Vm7JvjK2VpCKXS-kyg"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-json title="JSON Serialization"}


## Encrypting to Multiple Recipients ## {#jwe-multi}

This example illustrates encryption content for multiple recipients. As this example has multiple recipients, only the JSON serialization is possible.

### Input Factors ### {#jwe-multi-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the plaintext from {{jwe-plaintext}}.
* Recipient keys; this example uses the following:

  + The RSA public key from {{jwe-rsa15-key}} for the first recipient.
  + The EC public key from {{jwe-ecdh_aeskw-key}} for the second recipient.
  + The AES symmetric key from {{jwe-aesgcmkw-key}} for the third recipient.

* Key encryption algorithms; this example uses the following:

  + "RSA1_5" for the first recipient.
  + "ECDH-ES+A256KW" for the second recipient.
  + "A256GCMKW" for the third recipient.

* Content encryption algorithm; this example uses "A128CBC-HS256"

### Generated Factors ### {#jwe-multi-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-multi-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-multi-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
imTa76U-OzsJpmzG4_0svCMmlsx6tnK-YvzvtJAHjFM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fJDfI_iwk1eJJOBLi_gt8Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key to the First Recipient ### {#jwe-multi-keyenc_1}

Performing the "RSA1_5" key encryption operation over the CEK ({{jwe-multi-cek}} with the first recipient's RSA key ({{jwe-rsa15-key}} produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jNobCvcQJkXlzTlxJPgD8Y7UgOg9NBu7BAK3IsXzFGTKqri9ULDs83-cm50_pR
cSAzgxuNvmXs_DVj0omJ5BTw5KevOuBQ6Nuvw2u4jpUADBBcPsNem53Fxl1itu
7De0oZeVQT5RhBvw-mGNSYDjvxGBLRxdYbpj2xy35lcnAbBNVt5AtyVZfDeRRI
i4iEqm_0PZkLTX_KnZaz37URhc3ZdHq97_1zZVoE6fuoDmu2AJWf7YrhARhpcZ
4bQzOj2v2SUcWmi1Gw3UrtEzUy7iQrU-lygC1CFZNvkkuxbyy67RXsrMzi8W4g
sw95QaUzf6GMtB2RfWIclgV5gIGGnYdQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-encdkey_1 title="Recipient #1 Encrypted Key, base64url-encoded"}

The following are generated after encrypting the CEK for the first recipient:

* Recipient JWE header from {{jwe-multi-rcpt_header_1}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RSA1_5",
  "kid": "frodo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_header_1 title="Recipient #1 JWE Header JSON"}

The following is the assembled first recipient JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "encrypted_key": "jNobCvcQJkXlzTlxJPgD8Y7UgOg9NBu7BAK3IsXzFG
      TKqri9ULDs83-cm50_pRcSAzgxuNvmXs_DVj0omJ5BTw5KevOuBQ6Nuv
      w2u4jpUADBBcPsNem53Fxl1itu7De0oZeVQT5RhBvw-mGNSYDjvxGBLR
      xdYbpj2xy35lcnAbBNVt5AtyVZfDeRRIi4iEqm_0PZkLTX_KnZaz37UR
      hc3ZdHq97_1zZVoE6fuoDmu2AJWf7YrhARhpcZ4bQzOj2v2SUcWmi1Gw
      3UrtEzUy7iQrU-lygC1CFZNvkkuxbyy67RXsrMzi8W4gsw95QaUzf6GM
      tB2RfWIclgV5gIGGnYdQ",
  "header": {
    "alg": "RSA1_5",
    "kid": "frodo.baggins@hobbiton.example"
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_1 title="Recipient #1 JSON"}

### Encrypting the Key to the Second Recipient ### {#jwe-multi-keyenc_2}

The following are generated before encrypting the CEK for the second recipient:

* Ephemeral EC private key on the same curve as the EC public key; this example uses the private key that matches the public key from {{jwe-multi-epk_2}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "crv": "P-384",
  "x": "HfUqgR3hMAmDSK0kle3IyhEYtJ-4q7yCtLWqFTWr05GuaU74HD2JAy
      ntqvgCET43",
  "y": "EDnRsIO7T75etcSlXEbI3VUvzup_uaf9DH7ZBY2QWK7iPAke3hnSgd
      c5GB90v0EK"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-epk_2 title="Ephemeral public key for Recipient #2, in JWK format"}

Performing the "ECDH-ES+A256KW" key encryption operation over the CEK ({{jwe-multi-cek}} with the following:

* Static Elliptic Curve public key ({{jwe-ecdh_aeskw-key}}).
* Ephemeral Elliptic Curve private key ({{jwe-multi-epk_2}}.

produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pmSdrIWvm5IA4z6JgqmnalZbB52CsRMQ_l5Z3VMOPqAhQzNxuOE1HQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-encdkey_2 title="Recipient #2 Encrypted Key, base64url-encoded"}

The following are generated after encrypting the CEK for the second recipient:

* Recipient JWE Header from {{jwe-multi-rcpt_header_2}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ECDH-ES+A256KW",
  "kid": "peregrin.took@tuckborough.example",
  "epk": {
    "kty": "EC",
    "crv": "P-384",
    "x": "HfUqgR3hMAmDSK0kle3IyhEYtJ-4q7yCtLWqFTWr05GuaU74HD2J
        AyntqvgCET43",
    "y": "EDnRsIO7T75etcSlXEbI3VUvzup_uaf9DH7ZBY2QWK7iPAke3hnS
        gdc5GB90v0EK"
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_header_2 title="Recipient #2 JWE Header JSON"}

The following is the assembled second recipient JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "encrypted_key": "pmSdrIWvm5IA4z6JgqmnalZbB52CsRMQ_l5Z3VMOPq
      AhQzNxuOE1HQ",
  "header": {
    "alg": "ECDH-ES+A256KW",
    "kid": "peregrin.took@tuckborough.example",
    "epk": {
      "kty": "EC",
      "crv": "P-384",
      "x": "HfUqgR3hMAmDSK0kle3IyhEYtJ-4q7yCtLWqFTWr05GuaU74HD
          2JAyntqvgCET43",
      "y": "EDnRsIO7T75etcSlXEbI3VUvzup_uaf9DH7ZBY2QWK7iPAke3h
          nSgdc5GB90v0EK"
    }
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_2 title="Recipient #2 JSON"}

### Encrypting the Key to the Third Recipient ### {#jwe-multi-keyenc_3}

The following are generated before encrypting the CEK for the third recipient:

* Initialization vector/nonce for key wrapping; this example uses the initialization vector/nonce from {{jwe-multi-kwiv_3}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_0K_Oef_z5pAaTId
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-kwiv_3}

Performing the "A256GCMKW" key encryption operation over the CEK ({{jwe-multi-cek}}) with the following:

* AES symmetric key ({{jwe-aesgcmkw-key}}; and
* Initialization vector/nonce (({{jwe-multi-kwiv_3}}

produces the following:

* Encrypted key from {{jwe-multi-encdkey_3}}.
* Key wrap authentication tag from {{jwe-multi-kwtag_3}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vkwMn5e_TZFdbD7daulKlzmiIy64RuTY_cI82nNyC0g
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-encdkey_3 title="Recipient #3 Encrypted Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VCbIkk2oDWeEnb-NA_UpUw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-kwtag_3 title="Recipient #3 Authentication Tag, base64url-encoded"}

The following are generated after encrypting the CEK for the third recipient:

* Recipient JWE header; this example uses the header from {{jwe-multi-rcpt_header_3}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A256GCMKW",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "tag": "VCbIkk2oDWeEnb-NA_UpUw",
  "iv": "_0K_Oef_z5pAaTId"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_header_3 title="Recipient #3 JWE Header JSON"}

The following is the assembled third recipient JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "encrypted_key": "vkwMn5e_TZFdbD7daulKlzmiIy64RuTY_cI82nNyC0
      g",
  "header": {
    "alg": "A256GCMKW",
    "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
    "tag": "VCbIkk2oDWeEnb-NA_UpUw",
    "iv": "_0K_Oef_z5pAaTId"
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_3 title="Recipient #3 JSON"}

### Encrypting the Content ### {#jwe-multi-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-multi-protected}}, encoded to {{RFC4648}} base64url as {{jwe-multi-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-protected title="Protected JWE Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-protected_b64u title="Protected JWE Header, base64url-encoded" }

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-multi-cek}}),
* Initialization vector/nonce ({{jwe-multi-iv}}), and
* Protected JWE header ({{jwe-multi-protected_b64u}}) as the authenticated data

produces the following:

* Ciphertext from {{jwe-multi-ciphertext}}
* Authentication tag from {{jwe-multi-tag}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fLYGEQHdAIJsiDY5o5PkqGYdw3mZcW0mdBDSV5bbA2pxA8LvyQibCSNXuwxKS9
bX3MJzZiu85BQV9N-el_8PGq-sZEPS-5r0I5Z3cY0ALnDmztMoU3mPmI8EAk9v
Wbj6tyJKI4XEF9JFqMcolkOKIK8Evul79CEuc06PxBYzPhH0FSkDC1wrSo4g7q
kvOvdlEmRSy0sMKJHB-skmp6KmOC2vsjmol-ME3l46AKeq27CB2LlICxqUhuz6
Vf6GEkGtSGMFgXGIpzW1CHPiij-UL8uyWJBXPkF1vuGOTVL1Q16o3dwj1YreJJ
J4LtlZckMYk9iG076z6LdWyIW1pc3O80ulWZ-qYwRr76GnQtD6JFcQdEqsbYrL
EkCiljav7ZvE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0Uw4HKW8TIBh7IsmmnbQGA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-tag title="Authentication Tag, base64url-encoded"}

The following is generated after encrypting the plaintext:

* Unprotected JWE header parameters; this example uses the header from {{jwe-multi-unprotected}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "cty": "text/plain"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-unprotected title="Unprotected JWE Header JSON"}

### Output Results ### {#jwe-multi-output}

The following compose the resulting JWE object:

* Recipient #1 JSON ({{jwe-multi-rcpt_1}})
* Recipient #2 JSON ({{jwe-multi-rcpt_2}})
* Recipient #3 JSON ({{jwe-multi-rcpt_3}})
* Initialization vector/nonce ({{jwe-multi-iv}})
* Ciphertext ({{jwe-multi-ciphertext}})
* Authentication tag ({{jwe-multi-tag}})

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key": "jNobCvcQJkXlzTlxJPgD8Y7UgOg9NBu7BAK3Is
          XzFGTKqri9ULDs83-cm50_pRcSAzgxuNvmXs_DVj0omJ5BTw5Kev
          OuBQ6Nuvw2u4jpUADBBcPsNem53Fxl1itu7De0oZeVQT5RhBvw-m
          GNSYDjvxGBLRxdYbpj2xy35lcnAbBNVt5AtyVZfDeRRIi4iEqm_0
          PZkLTX_KnZaz37URhc3ZdHq97_1zZVoE6fuoDmu2AJWf7YrhARhp
          cZ4bQzOj2v2SUcWmi1Gw3UrtEzUy7iQrU-lygC1CFZNvkkuxbyy6
          7RXsrMzi8W4gsw95QaUzf6GMtB2RfWIclgV5gIGGnYdQ",
      "header": {
        "alg": "RSA1_5",
        "kid": "frodo.baggins@hobbiton.example"
      }
    },
    {
      "encrypted_key": "pmSdrIWvm5IA4z6JgqmnalZbB52CsRMQ_l5Z3V
          MOPqAhQzNxuOE1HQ",
      "header": {
        "alg": "ECDH-ES+A256KW",
        "kid": "peregrin.took@tuckborough.example",
        "epk": {
          "kty": "EC",
          "crv": "P-384",
          "x": "HfUqgR3hMAmDSK0kle3IyhEYtJ-4q7yCtLWqFTWr05GuaU
              74HD2JAyntqvgCET43",
          "y": "EDnRsIO7T75etcSlXEbI3VUvzup_uaf9DH7ZBY2QWK7iPA
              ke3hnSgdc5GB90v0EK"
        }
      }
    },
    {
      "encrypted_key": "vkwMn5e_TZFdbD7daulKlzmiIy64RuTY_cI82n
          NyC0g",
      "header": {
        "alg": "A256GCMKW",
        "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
        "tag": "VCbIkk2oDWeEnb-NA_UpUw",
        "iv": "_0K_Oef_z5pAaTId"
      }
    }
  ],
  "unprotected": {
    "cty": "text/plain"
  },
  "protected": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
  "iv": "fJDfI_iwk1eJJOBLi_gt8Q",
  "ciphertext": "fLYGEQHdAIJsiDY5o5PkqGYdw3mZcW0mdBDSV5bbA2pxA
      8LvyQibCSNXuwxKS9bX3MJzZiu85BQV9N-el_8PGq-sZEPS-5r0I5Z3c
      Y0ALnDmztMoU3mPmI8EAk9vWbj6tyJKI4XEF9JFqMcolkOKIK8Evul79
      CEuc06PxBYzPhH0FSkDC1wrSo4g7qkvOvdlEmRSy0sMKJHB-skmp6KmO
      C2vsjmol-ME3l46AKeq27CB2LlICxqUhuz6Vf6GEkGtSGMFgXGIpzW1C
      HPiij-UL8uyWJBXPkF1vuGOTVL1Q16o3dwj1YreJJJ4LtlZckMYk9iG0
      76z6LdWyIW1pc3O80ulWZ-qYwRr76GnQtD6JFcQdEqsbYrLEkCiljav7
      ZvE",
  "tag": "0Uw4HKW8TIBh7IsmmnbQGA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-json title="JSON Serialization"}


# Security Considerations # {#security}

This document introduces no new security considerations over those stated in {{I-D.ietf-jose-json-web-algorithms}}, {{I-D.ietf-jose-json-web-encryption}},  {{I-D.ietf-jose-json-web-key}}, and {{I-D.ietf-jose-json-web-signature}}.


# IANA Considerations # {#iana}

This document has no actions for IANA.


--- back

# Acknowledgements

All of the examples herein use quotes and character names found in the novels "The Hobbit"; "The Fellowship of the Ring"; "The Two Towers"; and "Return of the King", written by J. R. R. Tolkien.

Thanks to Richard Barnes and Jim Schaad for providing for their input on the outline for this document.
