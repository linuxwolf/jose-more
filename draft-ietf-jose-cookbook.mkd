---
title: Examples of Protecting Content using JavaScript Object Signing and Encryption (JOSE)
abbrev: JOSE Cookbook
docname: draft-ietf-jose-cookbook-00
date: 
category: info

ipr: trust200902
area: Security
workgroup: JOSE Working Group
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: M. Miller
    name: Matthew Miller
    org: Cisco Systems, Inc.
    street: 1899 Wynkoop Street, Suite 600
    city: Denver
    region: CO
    code: 80202
    country: USA
    phone: +1-303-308-3204
    email: mamille2@cisco.com

informative:
    I-D.ietf-jose-json-web-algorithms:
    I-D.ietf-jose-json-web-encryption:
    I-D.ietf-jose-json-web-key:
    I-D.ietf-jose-json-web-signature:
    RFC1951:
    RFC4648:
    RFC7095:

--- abstract

A set of examples of using JavaScript Object Signing and Encryption (JOSE) to protect data.  This document illustrates a representative sampling of various JSON Web Signature (JWS) and JSON Web Encryption (JWE) results given similar inputs.


--- middle

# Introduction # {#intro}

The JavaScript Object Signing and Encryption (JOSE) technologies -- JSON Web Key (JWK) {{I-D.ietf-jose-json-web-key}}, JSON Web Signature (JWS) {{I-D.ietf-jose-json-web-signature}}, JSON Web Encryption (JWE) {{I-D.ietf-jose-json-web-encryption}}, and JSON Web Algorithms (JWA) {{I-D.ietf-jose-json-web-algorithms}} -- collectively can be used to protect content in a myriad of ways.  The full set of permutations is extremely large, and might be daunting to some.

This document provides a number of examples of signing or encrypting content using JOSE.  While not exhaustive, it does compile together a representative sample of JOSE features.  As much as possible, the same signature payload or encryption plaintext content is used to illustrate differences in various signing and encryption results.

## Conventions Used in this Document ## {#intro-conventions}

All instances of binary octet strings are represented using {{RFC4648}} base64url encoding.

Wherever possible, the examples include both the Compact and JSON serializations.

All of the examples in this document have whitespace added to improve formatting and readability.  Except for plaintext or payload content, whitespace is not part of the cryptographic operations.  Plaintext or payload content does include whitespace (unless otherwise noted), with line breaks (U+000A LINE FEED) added to improve readability.


# Terminology  # {#terms}

This document inherits terminology regarding JSON Web Key (JWK) technology from {{I-D.ietf-jose-json-web-key}}, terminology regarding JSON Web Signature (JWS) technology from {{I-D.ietf-jose-json-web-signature}}, terminology regarding JSON Web Encryption (JWE) technology from {{I-D.ietf-jose-json-web-encryption}}, and terminology regarding algorithms from {{I-D.ietf-jose-json-web-algorithms}}.

# JSON Web Signature Examples # {#jws}

The following sections demonstrate how to generate various JWS objects.

All of the succeeding examples use the following payload plaintext, serialized as UTF-8;  the sequence "\xe2\x80\x99" substituted for (U+2019 RIGHT SINGLE QUOTATION MARK) and line breaks (U+000A LINE FEED) replacing some " " (U+0020 SPACE) to improve readability:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It\xe2\x80\x99s a dangerous business, Frodo, going out your
door. You step onto the road, and if you don't keep your feet,
there\xe2\x80\x99s no knowing where you might be swept off
to.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-payload title="Payload content plaintext" }

The Payload -- with the sequence "\x2x80\x99" replaced with (U+2019 RIGHT SINGLE QUOTATION MARK) and line breaks (U+000A LINE FEED) replaced with " " (U+0020 SPACE) -- encoded as UTF-8 then as {{RFC4648}} base64url:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-payload_b64u title="Payload content, base64url-encoded" }


## RSA v1.5 Signature ## {#jws-rsa}

This example illustrates signing content using the "RS256" (RSASSA-PKCS1-v1_5 with SHA-256) algorithm.

### Input Factors ### {#jws-rsa-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* RSA private key; this example uses the key from {{jws-rsa-key}}.
* "alg" parameter of "RS256".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "bilbo.baggins@hobbiton.example",
  "use": "sig",
  "n": "n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT
      -O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqV
      wGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-
      oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde
      3uhGqC0ZCuEHg8lhzwOHrtIQbS0FVbb9k3-tVTU4fg_3L_vniUFAKwuC
      LqKnS2BYwdq_mzSnbLY7h_qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5g
      HdrNP5zw",
  "e": "AQAB",
  "d": "bWUC9B-EFRIo8kpGfh0ZuyGPvMNKvYWNtB_ikiH9k20eT-O1q_I78e
      iZkpXxXQ0UTEs2LsNRS-8uJbvQ-A1irkwMSMkK1J3XTGgdrhCku9gRld
      Y7sNA_AKZGh-Q661_42rINLRCe8W-nZ34ui_qOfkLnK9QWDDqpaIsA-b
      MwWWSDFu2MUBYwkHTMEzLYGqOe04noqeq1hExBTHBOBdkMXiuFhUq1BU
      6l-DqEiWxqg82sXt2h-LMnT3046AOYJoRioz75tSUQfGCshWTBnP5uDj
      d18kKhyv07lhfSJdrPdM5Plyl21hsFf4L_mHCuoFau7gdsPfHPxxjVOc
      OpBrQzwQ",
  "p": "3Slxg_DwTXJcb6095RoXygQCAZ5RnAvZlno1yhHtnUex_fp7AZ_9nR
      aO7HX_-SFfGQeutao2TDjDAWU4Vupk8rw9JR0AzZ0N2fvuIAmr_WCsmG
      peNqQnev1T7IyEsnh8UMt-n5CafhkikzhEsrmndH6LxOrvRJlsPp6Zv8
      bUq0k",
  "q": "uKE2dh-cTf6ERF4k4e_jy78GfPYUIaUyoSSJuBzp3Cubk3OCqs6grT
      8bR_cu0Dm1MZwWmtdqDyI95HrUeq3MP15vMMON8lHTeZu2lmKvwqW7an
      V5UzhM1iZ7z4yMkuUwFWoBvyY898EXvRD-hdqRxHlSqAZ192zB3pVFJ0
      s7pFc",
  "dp": "B8PVvXkvJrj2L-GYQ7v3y9r6Kw5g9SahXBwsWUzp19TVlgI-YV85q
      1NIb1rxQtD-IsXXR3-TanevuRPRt5OBOdiMGQp8pbt26gljYfKU_E9xn
      -RULHz0-ed9E9gXLKD4VGngpz-PfQ_q29pk5xWHoJp009Qf1HvChixRX
      59ehik",
  "dq": "CLDmDGduhylc9o7r84rEUVn7pzQ6PF83Y-iBZx5NT-TpnOZKF1pEr
      AMVeKzFEl41DlHHqqBLSM0W1sOFbwTxYWZDm6sI6og5iTbwQGIC3gnJK
      bi_7k_vJgGHwHxgPaX2PnvP-zyEkDERuf-ry4c_Z11Cq9AqC2yeL6kdK
      T1cYF8",
  "qi": "3PiqvXQN0zwMeE-sBvZgi289XP9XCQF3VWqPzMKnIgQp7_Tugo6-N
      ZBKCQsMf3HaEGBjTVJs_jcK8-TRXvaKe-7ZMaQj8VfBdYkssbu0NKDDh
      jJ-GtiseaDVWt7dcH0cfwxgFUHpQh7FoCrjFJ6h6ZEpMF6xmujs4qMpP
      z8aaI4"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-key title="RSA 2048-bit Private Key, in JWK format"}

### Signing Operation #### {#jws-rsa-op}

The following are generated to complete the signing operation:

* Protected JWS Header; this example uses the header from {{jws-rsa-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-rsa-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RS256",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-rsa-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmK
ZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4J
IwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8w
W1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluP
xUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_f
cIe8u9ipH84ogoree7vjbU5y18kDquDg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-rsa-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-rsa-protected}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-rsa-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmK
ZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4J
IwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8w
W1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluP
xUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_f
cIe8u9ipH84ogoree7vjbU5y18kDquDg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2
          dpbnNAaG9iYml0b24uZXhhbXBsZSJ9",
      "signature": "MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHo
          xnW2e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII
          7PNDi84wnB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0Rnlt
          uYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPo
          cSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxU
          Ahb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJush
          Z41Axf_fcIe8u9ipH84ogoree7vjbU5y18kDquDg"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsa-json title="JSON Serialization" }

## RSA-PSS Signature ## {#jws-rsapss}

This example illustrates signing content using the "PS256" (RSASSA-PSS with SHA-256) algorithm.

### Input Factors ### {#jws-rsapss-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* RSA private key; this example uses the key from {{jws-rsa-key}}.
* "alg" parameter of "RS256".

### Signing Operation ### {#jws-rsapss-op}

The following are generated to complete the signing operation:

* Protected JWS Header; this example uses the header from {{jws-rsapss-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-rsapss-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "PS384",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-rsapss-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42miAh2qyBzk1xEsnk2I
pN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllVo6_1OLPpcbUrhiUSMxbbXU
vdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRX
e8P_ijQ7p8Vdz0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT
0qI0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a
6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-rsapss-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-rsapss-protected_b64u}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-rsapss-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42miAh2qyBzk1xEsnk2I
pN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllVo6_1OLPpcbUrhiUSMxbbXU
vdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRX
e8P_ijQ7p8Vdz0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT
0qI0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a
6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2
          dpbnNAaG9iYml0b24uZXhhbXBsZSJ9",
      "signature": "cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy
          42miAh2qyBzk1xEsnk2IpN6-tPid6VrklHkqsGqDqHCdP6O8TTB5
          dDDItllVo6_1OLPpcbUrhiUSMxbbXUvdvWXzg-UD8biiReQFlfz2
          8zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRXe8P_ijQ7p8Vd
          z0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT0q
          I0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uT
          OcbH510a6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-rsapss-json title="JSON Serialization" }

## ECDSA Signature ## {#jws-ecdsa}

This example illustrates signing content using the "ES512" (ECDSA with curve P-521 and SHA-512) algorithm.

### Input Factors ### {#jws-ecdsa-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* EC private key on the curve P-521; this example uses the key from {{jws-ecdsa-key}}.
* "alg" parameter of "ES512"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "kid": "bilbo.baggins@hobbiton.example",
  "use": "sig",
  "crv": "P-521",
  "x": "AHKZLLOsCOzz5cY97ewNUajB957y-C-U88c3v13nmGZx6sYl_oJXu9
      A5RkTKqjqvjyekWF-7ytDyRXYgCF5cj0Kt",
  "y": "AdymlHvOiLxXkEhayXQnNCvDX4h9htZaCJN34kfmC6pV5OhQHiraVy
      SsUdaQkAgDPrwQrJmbnX9cwlGfP-HqHZR1",
  "d": "AAhRON2r9cqXX1hg-RoI6R1tX5p2rUAYdmpHZoC1XNM56KtscrX6zb
      KipQrCW9CGZH3T4ubpnoTKLDYJ_fF3_rJt"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-key title="Elliptic Curve P-521 Private Key"}

### Signing Operation ### {#jws-ecdsa-op}

The following are generated before beginning the signature process:

* Protected JWS Header; this example uses the header from {{jws-ecdsa-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-ecdsa-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ES512",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-ecdsa-protected_b64u}}) and Payload content ({{jws-payload_b64u) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EvRCJgYnTh--MujbaxJCs6ulxanF5-XZ1BG2nPSnffu8aTzD9JkFZuGf5eSRoJ
Bmb3as3A_Qg1oSh7VGRYqqIkwZ9RIUM-k66Zf08mnpBxeSzu9KAQ8ZVF3sOPP1
TShgv03CE1Hq0LDvHR2WZvzZJsZClzB_nYaC_-oeNt-oKB7dxQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-ecdsa-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-ecdsa-protected_b64u}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-ecdsa-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX
hhbXBsZSJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
EvRCJgYnTh--MujbaxJCs6ulxanF5-XZ1BG2nPSnffu8aTzD9JkFZuGf5eSRoJ
Bmb3as3A_Qg1oSh7VGRYqqIkwZ9RIUM-k66Zf08mnpBxeSzu9KAQ8ZVF3sOPP1
TShgv03CE1Hq0LDvHR2WZvzZJsZClzB_nYaC_-oeNt-oKB7dxQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2
          dpbnNAaG9iYml0b24uZXhhbXBsZSJ9",
      "signature": "EvRCJgYnTh--MujbaxJCs6ulxanF5-XZ1BG2nPSnff
          u8aTzD9JkFZuGf5eSRoJBmb3as3A_Qg1oSh7VGRYqqIkwZ9RIUM-
          k66Zf08mnpBxeSzu9KAQ8ZVF3sOPP1TShgv03CE1Hq0LDvHR2WZv
          zZJsZClzB_nYaC_-oeNt-oKB7dxQ"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-ecdsa-json title="JSON Serialization" }

## HMAC-SHA2 Integrity Protection ## {#jws-hmac}

This example illustrates integrity protecting content using the "HS256" (HMAC-SHA-256) algorithm.

### Input Factors ### {#jws-hmac-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* AES symmetric key; this example uses the key from {{jws-hmac-key}}.
* "alg" parameter of "HS256".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037",
  "use": "sig",
  "k": "hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-key title="AES 256-bit symmetric key"}

### Signing Operation ### {#jws-hmac-op}

The following are generated before completing the signing operation:

* Protected JWS Header; this example uses the header from {{jws-hmac-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-hmac-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-hmac-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-hmac-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-hmac-protected_b64u}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-hmac-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
.
SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH
lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk
b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm
UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4
.
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-compact title="Compact Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT
          RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-hmac-json title="JSON Serialization" }

## Detached Signature ## {#jws-detached}

This example illustrates a detached signature.  This example is identical others, except the resulting JWS objects do not include the Payload content.  Instead, the application is expected to locate it elsewhere.  For example, the signature might be in a meta-data section, with the payload being the content.

### Input Factors ### {#jws-detached-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing key; this example uses the AES symmetric key from {{jws-hmac-key}}.
* Signing algorithm; this example uses "RS256".

### Signing Operation ### {#jws-detached-op}

The following are generated before completing the signing operation:

* Protected JWS Header; this example uses the header from {{jws-detached-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-detached-protected_b64u}}.

The protected JWS header parameters:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-protected_b64u title="Protected JWS Header, base64url-encoded" }

Performing the signature operation over the combined protected JWS header ({{jws-detached-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-detached-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-detached-protected_b64u}})
* Signature ({{jws-detached-sig}})

The resulting JWS object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
.
.
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-compact title="JSON Serialization" }

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "signatures": [
    {
      "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT
          RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-detached-json title="JSON Serialization" }


## Protecting Specific Header Fields ## {#jws-somefields}

This example illustrates a signature where only certain header parameters are protected.  Since this example contains both unprotected and protected header parameters, only the JSON serialization is possible.

### Input Factors ### {#jws-somefields-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing key; this example uses the AES symmetric key from {{jws-hmac-key}}.
* Signing algorithm; this example uses "RS256".

### Signing Operation ### {#jws-somefields-op}

The following are generated before completing the signing operation:

* Protected JWS Header; this example uses the header from {{jws-somefields-protected}}, encoded using {{RFC4648}} base64url to produce {{jws-somefields-protected_b64u}}.
* Unprotected JWS Header; this example uses the header from {{jws-somefields-unprotected}}.

The protected JWS header parameters:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-protected title="Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-protected_b64u title="Protected JWS Header, base64url-encoded" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-unprotected title="Unprotected JWS Header JSON" }

Performing the signature operation over the combined protected JWS header ({{jws-somefields-protected_b64u}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr20
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-somefields-output}

The following compose the resulting JWS object:

* Protected JWS header ({{jws-somefields-protected_b64u}})
* Unprotected JWS header ({{jws-somefields-unprotected}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-somefields-sig}})

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJIUzI1NiJ9",
      "header": {
        "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature": "bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr2
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-somefields-json title="JSON Serialization" }


## Protecting Content Only ## {#jws-nofields}

This example illustrates a signature where none of the header parameters are protected.  Since this example contains only unprotected header parameters, only the JSON serialization is possible.

### Input Factors ### {#jws-nofields-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing key; this example uses the AES key from {{jws-hmac-key}}.
* Signing algorithm; this example uses "RS256"

### Signing Operation ### {#jws-nofields-op}

The following are generated before completing the signing operation:

* Unprotected JWS Header; this example uses the header from {{jws-nofields-unprotected}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-nofields-unprotected title="Unprotected JWS Header JSON" }

Performing the signature operation over the combined empty string (as there is no protected JWS header) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZuk
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-nofields-sig title="Signature, base64url-encoded"}

### Output Results ### {#jws-nofields-output}

The following compose the resulting JWS object:

* Unprotected JWS header ({{jws-nofields-unprotected}})
* Payload content ({{jws-payload_b64u}})
* Signature ({{jws-nofields-sig}})

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "header": {
        "alg": "HS256",
        "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
      },
      "signature": "xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZu
          k"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: title="JSON Serialization" }


## Multiple Signatures ## {#jws-multi}

This example illustrates multiple signatures applied to the same payload.  Since this example contains more than one signature, only the JSON serialization is possible.

### Input Factors ### {#jws-multi-input}

The following are supplied before beginning the signing operation:

* Payload content; this example uses the content from {{jws-payload}}, encoded using {{RFC4648}} base64url to produce {{jws-payload_b64u}}.
* Signing keys; this example uses the following:

  + RSA private key from {{jws-rsa-key}} for the first signature
  + EC private key from {{jws-ecdsa-key}} for the second signature
  + AES symmetric key from {{jws-hmac-key}} for the third signature

* Signing algorithms; this example uses the following:

  + "RS256" for the first signature
  + "ES512" for the second signature
  + "HS256" for the third signature

### First Signing Operation ### {#jws-multi-op_1}
 
The following are generated before completing the first signing operation:

* Protected JWS Header; this example uses the header from {{jws-multi-protected_1}}, encoded using {{RFC4648}} base64url to produce {{jws-multi-protected_b64u_1}}.
* Unprotected JWS Header; this example uses the header from {{jws-multi-unprotected_1}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_1 title="Signature #1 Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSUzI1NiJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_b64u_1 title="Signature #1 Protected JWS Header, base64url-encoded" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-unprotected_1 title="Signature #1 JWS Header JSON" }

Performing the first signature operation over the combined protected JWS header ({{jws-multi-protected_b64u_1}}) and the Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5NvyG53uoimic1tcMdSg-qpt
rzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFcryNFiHkSw129EghGpwkpxaTn_THJTC
glNbADko1MZBCdwzJxwqZc-1RlpO2HibUYyXSwO97BSe0_evZKdjvvKSgsIqjy
tKSeAMbhMBdMma622_BG5t4sdbuCHtFjp9iJmkio47AIwqkZV1aIZsv33uPUqB
BCXbYoQJwt7mxPftHmNlGoOSMxR_3thmXTCm4US-xiNOyhbm8afKK64jU6_TPt
QHiJeQJxz9G3Tx-083B745_AfYOnlC9w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_1 title="Signature #1, base64url-encoded"}

The following is the assembled first signature serialized as JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected": "eyJhbGciOiJSUzI1NiJ9",
  "header": {
    "kid": "bilbo.baggins@hobbiton.example"
  },
  "signature": "MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5NvyG53u
      oimic1tcMdSg-qptrzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFcryNFiHkS
      w129EghGpwkpxaTn_THJTCglNbADko1MZBCdwzJxwqZc-1RlpO2HibUY
      yXSwO97BSe0_evZKdjvvKSgsIqjytKSeAMbhMBdMma622_BG5t4sdbuC
      HtFjp9iJmkio47AIwqkZV1aIZsv33uPUqBBCXbYoQJwt7mxPftHmNlGo
      OSMxR_3thmXTCm4US-xiNOyhbm8afKK64jU6_TPtQHiJeQJxz9G3Tx-0
      83B745_AfYOnlC9w"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_sig_1 title="Signature #1 JSON"}

### Second Signing Operation ### {#jws-multi-op_2}

The following are generated before completing the second signing operation:

* Unprotected JWS Header; this example uses the header from {{jws-multi-unprotected_2}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ES512",
  "kid": "bilbo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-unprotected_2 title="Signature #2 JWS Header JSON" }

Performing the second signature operation over the combined empty string (as there is no protected JWS header) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GjTxjbTg7oJxNl3UJISdCPHZjEFxrKDutWiXlRPUecb-Glch3dkAtxOxrP1lxO
j3p65-iSVrjuN6RaQDln4-zyQZ_UAJtJdDgauT6q9AROvbsQac5IRX21pj7XyT
XuAnL-kqaSR0NeTw3SoEcUdns4YR-12V_iFSruMsVtrawJ2w-w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_2 title="Signature #2, base64url-encoded"}

The following is the assembled second signature serialized as JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "header": {
    "alg": "ES512",
    "kid": "bilbo.baggins@hobbiton.example"
  },
  "signature": "GjTxjbTg7oJxNl3UJISdCPHZjEFxrKDutWiXlRPUecb-Gl
      ch3dkAtxOxrP1lxOj3p65-iSVrjuN6RaQDln4-zyQZ_UAJtJdDgauT6q
      9AROvbsQac5IRX21pj7XyTXuAnL-kqaSR0NeTw3SoEcUdns4YR-12V_i
      FSruMsVtrawJ2w-w"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_sig_2 title="Signature #2 JSON"}

### Third Signing Operation ### {#jws-multi-op_3}

The following are generated before completing the third signing operation:

* Protected JWS Header; this example uses the header from {{jws-multi-protected_3}}, encoded using {{RFC4648}} base64url to produce {{jws-multi-protected_b64u_3}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "HS256",
  "kid": "018c0ae5-4d9b-471b-bfd6-eef314bc7037"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_3 title="Signature #3 Protected JWS Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW
VlZjMxNGJjNzAzNyJ9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-protected_b64u_3 title="Signature #3 Protected JWS Header, base64url-encoded" }

Performing the third signature operation over the combined protected JWS header ({{jws-multi-protected_b64u_3}}) and Payload content ({{jws-payload_b64u}}) produces the following signature:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_3 title="Signature #3, base64url-encoded"}

The following is the assembled third signature serialized as JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOW
      ItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
  "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-sig_sig_3 title="Signature #3 JSON"}

### Output Results ### {#jws-multi-output}

The following compose the resulting JWS object:

* Payload content ({{jws-payload_b64u}})
* Signature #1 JSON ({{jws-multi-sig_sig_1}})
* Signature #2 JSON ({{jws-multi-sig_sig_2}})
* Signature #3 JSON ({{jws-multi-sig_sig_3}})

The resulting JWS object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "payload": "SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg
      Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h
      ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi
      gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m
      ZiB0by4",
  "signatures": [
    {
      "protected": "eyJhbGciOiJSUzI1NiJ9",
      "header": {
        "kid": "bilbo.baggins@hobbiton.example"
      },
      "signature": "MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5Nvy
          G53uoimic1tcMdSg-qptrzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFc
          ryNFiHkSw129EghGpwkpxaTn_THJTCglNbADko1MZBCdwzJxwqZc
          -1RlpO2HibUYyXSwO97BSe0_evZKdjvvKSgsIqjytKSeAMbhMBdM
          ma622_BG5t4sdbuCHtFjp9iJmkio47AIwqkZV1aIZsv33uPUqBBC
          XbYoQJwt7mxPftHmNlGoOSMxR_3thmXTCm4US-xiNOyhbm8afKK6
          4jU6_TPtQHiJeQJxz9G3Tx-083B745_AfYOnlC9w"
    },
    {
      "header": {
        "alg": "ES512",
        "kid": "bilbo.baggins@hobbiton.example"
      },
      "signature": "GjTxjbTg7oJxNl3UJISdCPHZjEFxrKDutWiXlRPUec
          b-Glch3dkAtxOxrP1lxOj3p65-iSVrjuN6RaQDln4-zyQZ_UAJtJ
          dDgauT6q9AROvbsQac5IRX21pj7XyTXuAnL-kqaSR0NeTw3SoEcU
          dns4YR-12V_iFSruMsVtrawJ2w-w"
    },
    {
      "protected": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT
          RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9",
      "signature": "s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p
          0"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jws-multi-json title="JSON Serialization" }


# JSON Web Encryption Examples # {#jwe}

The following sections demonstrate how to generate various JWE objects.

All of the succeeding examples (unless otherwise noted) use the following plaintext content, serialized as UTF-8, with line breaks (U+000A LINE FEED) replacing some " " (U+0020 SPACE) characters to improve formatting:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can trust us to stick with you through thick and thin--to
the bitter end. And you can trust us to keep any secret of
yours--closer than you keep it yourself. But you cannot trust
us to let you face trouble alone, and go off without a word.
We are your friends, Frodo.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-plaintext title="Plaintext content" }


## Key Encryption using RSA v1.5 and AES-HMAC-SHA2 ## {#jwe-rsa15}

This example illustrates encrypting content using the "RSA1_5" (RSAES-PKCS1-v1_5) key encryption algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-rsa15-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* RSA public key; this example uses the key from {{jwe-rsa15-key}}.
* "alg" parameter of "RSA1_5".
* "enc" parameter of "A128CBC-HS256".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "frodo.baggins@hobbiton.example",
  "use": "enc",
  "n":   "maxhbsmBtdQ3CNrKvprUE6n9lYcregDMLYNeTAWcLj8NnPU9XIYe
          gTHVHQjxKDSHP2l-F5jS7sppG1wgdAqZyhnWvXhYNvcM7RfgKxqN
          x_xAHx6f3yy7s-M9PSNCwPC2lh6UAkR4I00EhV9lrypM9Pi4lBUo
          p9t5fS9W5UNwaAllhrd-osQGPjIeI1deHTwx-ZTHu3C60Pu_LJIl
          6hKn9wbwaUmA4cR5Bd2pgbaY7ASgsjCUbtYJaNIHSoHXprUdJZKU
          MAzV0WOKPfA6OPI4oypBadjvMZ4ZAj3BnXaSYsEZhaueTXvZB4eZ
          OAjIyh2e_VOIKVMsnDrJYAVotGlvMQ",
  "e":   "AQAB",
  "d":   "Kn9tgoHfiTVi8uPu5b9TnwyHwG5dK6RE0uFdlpCGnJN7ZEi963R7
          wybQ1PLAHmpIbNTztfrheoAniRV1NCIqXaW_qS461xiDTp4ntEPn
          qcKsyO5jMAji7-CL8vhpYYowNFvIesgMoVaPRYMYT9TW63hNM0aW
          s7USZ_hLg6Oe1mY0vHTI3FucjSM86Nff4oIENt43r2fspgEPGRrd
          E6fpLc9Oaq-qeP1GFULimrRdndm-P8q8kvN3KHlNAtEgrQAgTTgz
          80S-3VD0FgWfgnb1PNmiuPUxO8OpI9KDIfu_acc6fg14nsNaJqXe
          6RESvhGPH2afjHqSy_Fd2vpzj85bQQ",
  "p":    "2DwQmZ43FoTnQ8IkUj3BmKRf5Eh2mizZA5xEJ2MinUE3sdTYKSL
          taEoekX9vbBZuWxHdVhM6UnKCJ_2iNk8Z0ayLYHL0_G21aXf9-un
          ynEpUsH7HHTklLpYAzOOx1ZgVljoxAdWNn3hiEFrjZLZGS7lOH-a
          3QQlDDQoJOJ2VFmU",
  "q":   "te8LY4-W7IyaqH1ExujjMqkTAlTeRbv0VLQnfLY2xINnrWdwiQ93
          _VF099aP1ESeLja2nw-6iKIe-qT7mtCPozKfVtUYfz5HrJ_XY2kf
          exJINb9lhZHMv5p1skZpeIS-GPHCC6gRlKo1q-idn_qxyusfWv7W
          AxlSVfQfk8d6Et0",
  "dp":  "UfYKcL_or492vVc0PzwLSplbg4L3-Z5wL48mwiswbpzOyIgd2xHT
          HQmjJpFAIZ8q-zf9RmgJXkDrFs9rkdxPtAsL1WYdeCT5c125Fkdg
          317JVRDo1inX7x2Kdh8ERCreW8_4zXItuTl_KiXZNU5lvMQjWbIw
          2eTx1lpsflo0rYU",
  "dq":  "iEgcO-QfpepdH8FWd7mUFyrXdnOkXJBCogChY6YKuIHGc_p8Le9M
          bpFKESzEaLlN1Ehf3B6oGBl5Iz_ayUlZj2IoQZ82znoUrpa9fVYN
          ot87ACfzIG7q9Mv7RiPAderZi03tkVXAdaBau_9vs5rS-7HMtxkV
          rxSUvJY14TkXlHE",
  "qi":  "kC-lzZOqoFaZCr5l0tOVtREKoVqaAYhQiqIRGL-MzS4sCmRkxm5v
          ZlXYx6RtE1n_AagjqajlkjieGlxTTThHD8Iga6foGBMaAr5uR1hG
          QpSc7Gl7CF1DZkBJMTQN6EshYzZfxW08mIO8M6Rzuh0beL6fG9mk
          DcIyPrBXx2bQ_mM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-key title="RSA 2048-bit Key, in JWK format"}

(**NOTE**: While the key includes the private parameters, only the public parameters "e" and "n" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-rsa15-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-rsa15-cek}}
* Initialization vector/nonce; this example uses the initialization vector from {{jwe-rsa15-iv}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vQ6_Pof-pnIBBB_qhAxzuusbc25hFCB1pJuBIN7yMNU
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mR-7lneQlGq9vxe_udL4LA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-rsa15-keyenc}

Performing the key encryption operation over the CEK ({{jwe-rsa15-cek}}) with the RSA key ({{jwe-rsa15-key}}) results in the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4sJ7xpNo
vR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1vQuC_TYslbSDLHx
nnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJmvWt_XrDp9tBby0xyjdwd
teAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2AKyuE10KEMbBo8EJVf1PP1JSS73qy
UqEt8oo0OHlYTicOwwwwhyiNshdrA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJa
B-u6qkDMAwA1tJEch4R58z9WsYKyrhAw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-rsa15-contentenc}

The following are generated before encrypting the plaintext:

* Protected JWE Header; this example uses the header from {{jwe-rsa15-protected}}, encoded using {{RFC4648}} base64url to produce {{jwe-rsa15-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RSA1_5",
  "kid": "frodo.baggins@hobbiton.example",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-rsa15-cek}});
* Initialization vector/nonce ({{jwe-rsa15-iv}}); and
* Protected JWE header ({{jwe-rsa15-protected}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-rsa15-ciphertext}}.
* Authentication tag from {{jwe-rsa15-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7zqSkl
a_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVweYeYc_l7m2
vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8-PSEXb4GlBi22iQ
goXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maWZiglK4XckGv7-whchA42
VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--aTLxGtl9sR7z1ZgAyfRqoSs0S
op9J35heE89JveLIAjnuXH2ShsF0lW6T4HEYXFh9QsAF4TRdnpRs4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3AIdtJkgAkWuhBdFo8iL8A
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-rsa15-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-rsa15-protected_b64u}}).
* Encrypted Key ({{jwe-rsa15-encdkey}}).
* Initialization vector/nonce ({{jwe-rsa15-iv}}).
* Ciphertext ({{jwe-rsa15-ciphertext}}).
* Authentication Tag ({{jwe-rsa15-tag}}).

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm
V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0
.
IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4sJ7xpNo
vR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1vQuC_TYslbSDLHx
nnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJmvWt_XrDp9tBby0xyjdwd
teAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2AKyuE10KEMbBo8EJVf1PP1JSS73qy
UqEt8oo0OHlYTicOwwwwhyiNshdrA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJa
B-u6qkDMAwA1tJEch4R58z9WsYKyrhAw
.
mR-7lneQlGq9vxe_udL4LA
.
LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7zqSkl
a_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVweYeYc_l7m2
vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8-PSEXb4GlBi22iQ
goXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maWZiglK4XckGv7-whchA42
VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--aTLxGtl9sR7z1ZgAyfRqoSs0S
op9J35heE89JveLIAjnuXH2ShsF0lW6T4HEYXFh9QsAF4TRdnpRs4
.
3AIdtJkgAkWuhBdFo8iL8A
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": {
    "encrypted_key":
      "IDNYysyXa21oifTY_cy7sB7vAa9oHkE4RZZ78r88TdrGlKWbzltMJw4
       sJ7xpNovR8KZDHLeJUwiaQKIjWBFs2Dytdk4gHhVDc2rx9F2vHN2S1v
       QuC_TYslbSDLHxnnZkH2_ymlJz2saY5RJAjh-9OHCMcTJI-j7hJpMEJ
       mvWt_XrDp9tBby0xyjdwdteAtwyJxD5nyzBUGTsfaCzfqZTF_3BJu2A
       KyuE10KEMbBo8EJVf1PP1JSS73qyUqEt8oo0OHlYTicOwwwwhyiNshd
       rA4zQSeC2M0yxzDcQvXswQHQs1bXA8K-KJaB-u6qkDMAwA1tJEch4R5
       8z9WsYKyrhAw"
  },
  "protected":
    "eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpd
     G9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
  "iv":
    "mR-7lneQlGq9vxe_udL4LA",
  "ciphertext":
    "LecEGK89HoOzWbbh97km04mExBgZp0kO8LMFTJgfTqNjHW5VSPh0QMww7
     zqSkla_8ZPoWIzm1Y6xGtKLA9enpRFTrHZxZxTH9eG9P9PjsIC20NsGVw
     eYeYc_l7m2vyC_E1BzTQ9jb3wS1DxrqSX6YRjJ5mqx8ZX3tJW-wWVZfW8
     -PSEXb4GlBi22iQgoXfx8yHYfv-lXWlaQ2HjDWl21Mab41aW4ZYKt8maW
     ZiglK4XckGv7-whchA42VB4pNOQMY7e9BTyvm-DwVSS3Ul2bX3jz9kB--
     aTLxGtl9sR7z1ZgAyfRqoSs0Sop9J35heE89JveLIAjnuXH2ShsF0lW6T
     4HEYXFh9QsAF4TRdnpRs4",
  "tag":
    "3AIdtJkgAkWuhBdFo8iL8A"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa15-json title="JSON Serialization"}

## Key Encryption using RSA-OAEP with A256GCM ## {#jwe-rsa_oaep}

This example illustrates encrypting content using the "RSA-OAEP" (RSAES-OAEP) key encryption algorithm and the "A256GCM" (AES-GCM) content encryption algorithm.

### Input Factors ### {#jwe-rsa_oaep-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the plaintext from {{jwe-plaintext}}.
* RSA public key; this example uses the key from {{jwe-rsa_oaep-key}}.
* "alg" parameter of "RSA-OAEP"
* "enc" parameter of "A256GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "RSA",
  "kid": "samwise.gamgee@hobbiton.example",
  "use": "enc",
  "alg": "RSA-OAEP",
  "n":   "wbdxI55VaanZXPY29Lg5hdmv2XhvqAhoxUkanfzf2-5zVUxa6prH
          RrI4pP1AhoqJRlZfYtWWd5mmHRG2pAHIlh0ySJ9wi0BioZBl1XP2
          e-C-FyXJGcTy0HdKQWlrfhTm42EW7Vv04r4gfao6uxjLGwfpGrZL
          arohiWCPnkNrg71S2CuNZSQBIPGjXfkmIy2tl_VWgGnL22GplyXj
          5YlBLdxXp3XeStsqo571utNfoUTU8E4qdzJ3U1DItoVkPGsMwlmm
          nJiwA7sXRItBCivR4M5qnZtdw-7v4WuR4779ubDuJ5nalMv2S66-
          RPcnFAzWSKxtBDnFJJDGIUe7Tzizjg1nms0Xq_yPub_UOlWn0ec8
          5FCft1hACpWG8schrOBeNqHBODFskYpUc2LC5JA2TaPF2dA67dg1
          TTsC_FupfQ2kNGcE1LgprxKHcVWYQb86B-HozjHZcqtauBzFNV5t
          bTuB-TpkcvJfNcFLlH3b8mb-H_ox35FjqBSAjLKyoeqfKTpVjvXh
          d09knwgJf6VKq6UC418_TOljMVfFTWXUxlnfhOOnzW6HSSzD1c9W
          rCuVzsUMv54szidQ9wf1cYWf3g5qFDxDQKis99gcDaiCAwM3yEBI
          zuNeeCa5dartHDb1xEB_HcHSeYbghbMjGfasvKn0aZRsnTyC0xhW
          BlsolZE",
  "e":   "AQAB",
  "d":   "n7fzJc3_WG59VEOBTkayzuSMM780OJQuZjN_KbH8lOZG25ZoA7T4
          Bxcc0xQn5oZE5uSCIwg91oCt0JvxPcpmqzaJZg1nirjcWZ-oBtVk
          7gCAWq-B3qhfF3izlbkosrzjHajIcY33HBhsy4_WerrXg4MDNE4H
          Yojy68TcxT2LYQRxUOCf5TtJXvM8olexlSGtVnQnDRutxEUCwiew
          fmmrfveEogLx9EA-KMgAjTiISXxqIXQhWUQX1G7v_mV_Hr2YuImY
          cNcHkRvp9E7ook0876DhkO8v4UOZLwA1OlUX98mkoqwc58A_Y2lB
          YbVx1_s5lpPsEqbbH-nqIjh1fL0gdNfihLxnclWtW7pCztLnImZA
          yeCWAG7ZIfv-Rn9fLIv9jZ6r7r-MSH9sqbuziHN2grGjD_jfRluM
          Ha0l84fFKl6bcqN1JWxPVhzNZo01yDF-1LiQnqUYSepPf6X3a2SO
          dkqBRiquE6EvLuSYIDpJq3jDIsgoL8Mo1LoomgiJxUwL_GWEOGu2
          8gplyzm-9Q0U0nyhEf1uhSR8aJAQWAiFImWH5W_IQT9I7-yrindr
          _2fWQ_i1UgMsGzA7aOGzZfPljRy6z-tY_KuBG00-28S_aWvjyUc-
          Alp8AUyKjBZ-7CWH32fGWK48j1t-zomrwjL_mnhsPbGs0c9WsWgR
          zI-K8gE",
  "p":   "7_2v3OQZzlPFcHyYfLABQ3XP85Es4hCdwCkbDeltaUXgVy9l9etK
          ghvM4hRkOvbb01kYVuLFmxIkCDtpi-zLCYAdXKrAK3PtSbtzld_X
          Z9nlsYa_QZWpXB_IrtFjVfdKUdMz94pHUhFGFj7nr6NNxfpiHSHW
          FE1zD_AC3mY46J961Y2LRnreVwAGNw53p07Db8yD_92pDa97vqcZ
          OdgtybH9q6uma-RFNhO1AoiJhYZj69hjmMRXx-x56HO9cnXNbmzN
          SCFCKnQmn4GQLmRj9sfbZRqL94bbtE4_e0Zrpo8RNo8vxRLqQNwI
          y85fc6BRgBJomt8QdQvIgPgWCv5HoQ",
  "q":   "zqOHk1P6WN_rHuM7ZF1cXH0x6RuOHq67WuHiSknqQeefGBA9PWs6
          ZyKQCO-O6mKXtcgE8_Q_hA2kMRcKOcvHil1hqMCNSXlflM7WPRPZ
          u2qCDcqssd_uMbP-DqYthH_EzwL9KnYoH7JQFxxmcv5An8oXUtTw
          k4knKjkIYGRuUwfQTus0w1NfjFAyxOOiAQ37ussIcE6C6ZSsM3n4
          1UlbJ7TCqewzVJaPJN5cxjySPZPD3Vp01a9YgAD6a3IIaKJdIxJS
          1ImnfPevSJQBE79-EXe2kSwVgOzvt-gsmM29QQ8veHy4uAqca5dZ
          zMs7hkkHtw1z0jHV90epQJJlXXnH8Q",
  "dp":  "19oDkBh1AXelMIxQFm2zZTqUhAzCIr4xNIGEPNoDt1jK83_FJA-x
          nx5kA7-1erdHdms_Ef67HsONNv5A60JaR7w8LHnDiBGnjdaUmmuO
          8XAxQJ_ia5mxjxNjS6E2yD44USo2JmHvzeeNczq25elqbTPLhUpG
          o1IZuG72FZQ5gTjXoTXC2-xtCDEUZfaUNh4IeAipfLugbpe0JAFl
          FfrTDAMUFpC3iXjxqzbEanflwPvj6V9iDSgjj8SozSM0dLtxvu0L
          IeIQAeEgT_yXcrKGmpKdSO08kLBx8VUjkbv_3Pn20Gyu2YEuwpFl
          M_H1NikuxJNKFGmnAq9LcnwwT0jvoQ",
  "dq":  "S6p59KrlmzGzaQYQM3o0XfHCGvfqHLYjCO557HYQf72O9kLMCfd_
          1VBEqeD-1jjwELKDjck8kOBl5UvohK1oDfSP1DleAy-cnmL29DqW
          mhgwM1ip0CCNmkmsmDSlqkUXDi6sAaZuntyukyflI-qSQ3C_BafP
          yFaKrt1fgdyEwYa08pESKwwWisy7KnmoUvaJ3SaHmohFS78TJ25c
          fc10wZ9hQNOrIChZlkiOdFCtxDqdmCqNacnhgE3bZQjGp3n83ODS
          z9zwJcSUvODlXBPc2AycH6Ci5yjbxt4Ppox_5pjm6xnQkiPgj01G
          psUssMmBN7iHVsrE7N2iznBNCeOUIQ",
  "qi":  "FZhClBMywVVjnuUud-05qd5CYU0dK79akAgy9oX6RX6I3IIIPckC
          ciRrokxglZn-omAY5CnCe4KdrnjFOT5YUZE7G_Pg44XgCXaarLQf
          4hl80oPEf6-jJ5Iy6wPRx7G2e8qLxnh9cOdf-kRqgOS3F48Ucvw3
          ma5V6KGMwQqWFeV31XtZ8l5cVI-I3NzBS7qltpUVgz2Ju021eyc7
          IlqgzR98qKONl27DuEES0aK0WE97jnsyO27Yp88Wa2RiBrEocM89
          QZI1seJiGDizHRUP4UZxw9zsXww46wy0P6f9grnYp7t8LkyDDk8e
          oI4KX6SNMNVcyVS9IWjlq8EzqZEKIA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-key title="RSA 4096-bit Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "e" and "n" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-rsa_oaep-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption CEK (CEK); this example uses the key from {{jwe-rsa_oaep-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-rsa_oaep-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
09EnDWfdf6KCP09QbQQdhhoyFE5GoGAjdShgLGLol8k
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MKccO3TLKaMB67zj
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-rsa_oaep-keyenc}

Performing the key encryption operation over the CEK ({{jwe-rsa_oaep-cek}})) with the RSA key ({{jwe-rsa_oaep-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRhYoujIOFlt
i0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyORiMca925XxPItbOE6v
8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAUbtreKpG8yD17YYyKw9qedx7BrSc
9TCvNH8ahrC93O1Qp_rZIPdkt92A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg
5S_zPlpqmd5-BrpUIGmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfM
eceRRhhGaG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaUw
ZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61RC8K4IJWnWB
zGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW9EikKXcE21Jc716oRfF
EeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1xqYW1JnfLKklIemtznHTXvq7de6Vx
eSucwBklB24oafBFSeMEGBqKFQPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8
ikwSP2dG3grGlrl6EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05S
A
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-rsa_oaep-contentenc}

The following are generated before encrypting the plaintext:

* Protected JWE Header; this example uses the the header from {{jwe-rsa_oaep-protected}}, encoded using {{RFC4648}} base64url to produce {{jwe-rsa_oaep-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RSA-OAEP",
  "kid": "samwise.gamgee@hobbiton.example",
  "enc": "A256GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-rsa_oaep-cek}});
* Initialization vector/nonce ({{jwe-rsa_oaep-iv}}); and
* Protected JWE Header ({{jwe-rsa_oaep-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-rsa_oaep-ciphertext}}.
* Authentication tag from {{jwe-rsa_oaep-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_qhZgJ
3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJTfI1Gxzm-J
PJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5hVhP2HrqIVG0j1S
b5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUiC3wQP53pZRtqmwmACyq_
uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83WgkarkJbSkA0ZoVtebBJ_XvwNlfe1
VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWKj6C4UNSWgla8zhousjSQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vCmVSWBtadRAKUhtizP5tw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-rsa_oaep-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-rsa_oaep-protected_b64u}})
* Encrypted key ({{jwe-rsa_oaep-encdkey}})
* Initialization vector/nonce ({{jwe-rsa_oaep-iv}})
* Ciphertext ({{jwe-rsa_oaep-ciphertext}})
* Authentication tag ({{jwe-rsa_oaep-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG
9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0
.
WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRhYoujIOFlt
i0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyORiMca925XxPItbOE6v
8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAUbtreKpG8yD17YYyKw9qedx7BrSc
9TCvNH8ahrC93O1Qp_rZIPdkt92A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg
5S_zPlpqmd5-BrpUIGmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfM
eceRRhhGaG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaUw
ZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61RC8K4IJWnWB
zGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW9EikKXcE21Jc716oRfF
EeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1xqYW1JnfLKklIemtznHTXvq7de6Vx
eSucwBklB24oafBFSeMEGBqKFQPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8
ikwSP2dG3grGlrl6EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05S
A
.
MKccO3TLKaMB67zj
.
dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_qhZgJ
3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJTfI1Gxzm-J
PJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5hVhP2HrqIVG0j1S
b5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUiC3wQP53pZRtqmwmACyq_
uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83WgkarkJbSkA0ZoVtebBJ_XvwNlfe1
VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWKj6C4UNSWgla8zhousjSQ
.
vCmVSWBtadRAKUhtizP5tw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "WaQnEArx6u7NRlv6o08qNgsMpo-UFVXs_ALqEbAhQJVOXMyNqacRh
         YoujIOFlti0u_ofz6Yh93Pu83iTZYIGk0fFD4C62-kSiX5Enl-UyO
         RiMca925XxPItbOE6v8sbzwzTBC-rzPXN9qrfPvKCdrlWbJv6oQAU
         btreKpG8yD17YYyKw9qedx7BrSc9TCvNH8ahrC93O1Qp_rZIPdkt9
         2A8yhAje_cxMMaMHZ4YmlN_u05120iJhp6bg5S_zPlpqmd5-BrpUI
         GmH0hwuBk2Z5Djbm47YlosNZUWIB69JBFazaDhGGRhsfMeceRRhhG
         aG94gP2uZS42h1fZjYDH9zNxvXXHJ-4zqj8sM-LHLH16uDTVkvYaU
         wZPTUAj55fBKBs-o8o7rLCce8AWXEDBuqm-8rTnakLss5_Hc7l61R
         C8K4IJWnWBzGLFlM1jRApbEwA5HZO61ku45WLGC64NLDdnyGahFxW
         9EikKXcE21Jc716oRfFEeiOXaZGtJhYTjsuPr5IYJr8fWX_NC1y1x
         qYW1JnfLKklIemtznHTXvq7de6VxeSucwBklB24oafBFSeMEGBqKF
         QPhCBaAqCdJL1NkMhA9D6gqJkjluT1Aj0_Dq8ikwSP2dG3grGlrl6
         EtTuhA-j_ArrqLzvSoJU51Nu_1k3usrvgIWLZ89i8Zt05SA"
    }
  ],
  "protected":
    "eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvY
     mJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0",
  "iv":
    "MKccO3TLKaMB67zj",
  "ciphertext":
    "dLMYOKvvtY8Adfc8Tg4lSKElvvzBi2MJcSKDssll-jj0S_NIjI3P956z_
     qhZgJ3bVLTVPr1p8JcThDcqTZtrA4ShYpyyTrBnEzOOyyzv4h6WWiuoCJ
     TfI1Gxzm-JPJNdPYifgOS0E5RKk5L64yDtotBP9AMTZZ4WjatyAlRcgD5
     hVhP2HrqIVG0j1Sb5g5tz4fi5vmSwIhGOeOxwgLvuryjn-8ECi_5LkdUi
     C3wQP53pZRtqmwmACyq_uXvTpbUWSGna1LKaup-UC1PkOUGvHFa83Wgka
     rkJbSkA0ZoVtebBJ_XvwNlfe1VRDk8hxh0AmPvvsMiantgQ4oE6LCjOWK
     j6C4UNSWgla8zhousjSQ",
  "tag":
    "vCmVSWBtadRAKUhtizP5tw"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-rsa_oaep-json title="JSON Serialization"}


## Key Wrap using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2 ## {#jwe-pbes2}

The example illustrates encrypting content using the "PBES2-HS512+A256KW" (PBES2 Password-based Encryption using HMAC-SHA-512 and AES-256-KeyWrap) key encryption algorithm with the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-pbes2-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the plaintext from {{jwe-pbes2-plaintext}} (**NOTE** all whitespace added for readability)
* Password; this example uses the password from {{jwe-pbes2-pwd}}
* "alg" parameter of "PBES2-HS512+A256KW"
* "enc" parameter of "A128CBC-HS256"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "keys": [
    {
      "kty": "oct",
      "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
      "use": "enc",
      "alg": "A128GCM",
      "k":   "XctOhJAkA-pD9Lh7ZgW_2A"
    },
    {
      "kty": "oct",
      "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
      "use": "enc",
      "alg": "A128KW",
      "k":   "GZy6sIZ6wl9NJOKB-jnmVQ"
    },
    {
      "kty": "oct",
      "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
      "use": "enc",
      "alg": "A256GCMKW",
      "k":   "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
    }
  ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-plaintext title="Plaintext Content"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
entrap_o_peter_long_credit_tun
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-pwd title="Password"}

### Generated Factors ### {#jwe-pbes2-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-pbes2-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-pbes2-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LbIgtUgy3OYW-gpNaXZro-2naGkhnyw9NnXDrijI4EI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HnJqms6_fz9N6mpsML9NHA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-pbes2-keyenc}

The following are generated before encrypting the CEK:

* Salt; this example uses the salt from {{jwe-pbes2-p2s}}.
* Iteration count; this example uses the interaction count 8192.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
8Q1SzinasR3xchYz6ZZcHA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-p2s title="Salt, base64url-encoded"}

Performing the key encryption operation over the CEK ({{jwe-pbes2-cek}})) with the following:

* Password ({{jwe-pbes2-pwd}};
* Salt ({{jwe-pbes2-p2s}}), encoded as an octet string; and
* Iteration count (8192)

produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WY1x1MsMrbQogWOeXDasyESSjYi-3iS4p8UjlWMwNJOS0j7_KFQE0w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-pbes2-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-pbes2-protected}}, encoded using {{RFC4648}} base64url to produce {{jwe-pbes2-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "p2s": "8Q1SzinasR3xchYz6ZZcHA",
  "p2c": 8192,
  "alg": "PBES2-HS256+A128KW",
  "cty": "JWK-SET+JSON",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJwMnMiOiI4UTFTemluYXNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJhbG
ciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjdHkiOiJKV0stU0VUK0pTT04iLCJl
bmMiOiJBMTI4Q0JDLUhTMjU2In0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext ({{jwe-pbes2-plaintext}}) with the the following:

* CEK ({{jwe-pbes2-cek}});
* Initialization vector/nonce ({{jwe-pbes2-iv}}); and
* Protected JWE header ({{jwe-pbes2-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-pbes2-ciphertext}}.
* Authentication tag from {{jwe-pbes2-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
B39o2LfmeYhS_FiszP560P1VkHWNS6vukmQrUL2DdoQgzwz8debUcWgo1A9JXE
BUk4rr4ALHcn8wA1yRuzWOUlpk0LNBmBfrvdRpgItUQiknWa5U1KY_PqWIZKpJ
J-Gq0QTaBTsfnffUbk3BD7eillUdg3poI7EFHLsE7GN3nyuJKaCCdIkFngEekt
jM2WMUPPMuXracPftXsxJDPnUAwtCAEsShnHozPEUpMIIgWnnlM8dlofYaDewX
WySoYn321leWpLGCZVaJIEEgAttFH2iZpbb3MNV1UifDMgMCUS-Xbq4ohDcgu3
dv9xWg81PNib-GyXoFU93HN9HEblg8iZ6CfKVZ_KKvNS1oCVaoMKqPIf6Jgo-i
G4S_bblOma9esofjwIp-RU9h3fpx-taoMRvjb2pLEm1FQrYXkx5i3hfN0ESsHR
BW1WyCWnVK8M7mHJUHQqBL0FWZMKjpgWa00uZOnpZteZO4eyQKYSsBgyMRSuhF
6tceKFfxIWtclIno
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YLeY6UpSeM3dUNqg5lEu0Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-pbes2-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-pbes2-protected_b64u}})
* Encrypted key ({{jwe-pbes2-encdkey}})
* Initialization vector/nonce ({{jwe-pbes2-iv}})
* Ciphertext ({{jwe-pbes2-ciphertext}})
* Authentication tag ({{jwe-pbes2-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJwMnMiOiI4UTFTemluYXNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJhbG
ciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjdHkiOiJKV0stU0VUK0pTT04iLCJl
bmMiOiJBMTI4Q0JDLUhTMjU2In0
.
WY1x1MsMrbQogWOeXDasyESSjYi-3iS4p8UjlWMwNJOS0j7_KFQE0w
.
HnJqms6_fz9N6mpsML9NHA
.
B39o2LfmeYhS_FiszP560P1VkHWNS6vukmQrUL2DdoQgzwz8debUcWgo1A9JXE
BUk4rr4ALHcn8wA1yRuzWOUlpk0LNBmBfrvdRpgItUQiknWa5U1KY_PqWIZKpJ
J-Gq0QTaBTsfnffUbk3BD7eillUdg3poI7EFHLsE7GN3nyuJKaCCdIkFngEekt
jM2WMUPPMuXracPftXsxJDPnUAwtCAEsShnHozPEUpMIIgWnnlM8dlofYaDewX
WySoYn321leWpLGCZVaJIEEgAttFH2iZpbb3MNV1UifDMgMCUS-Xbq4ohDcgu3
dv9xWg81PNib-GyXoFU93HN9HEblg8iZ6CfKVZ_KKvNS1oCVaoMKqPIf6Jgo-i
G4S_bblOma9esofjwIp-RU9h3fpx-taoMRvjb2pLEm1FQrYXkx5i3hfN0ESsHR
BW1WyCWnVK8M7mHJUHQqBL0FWZMKjpgWa00uZOnpZteZO4eyQKYSsBgyMRSuhF
6tceKFfxIWtclIno
.
YLeY6UpSeM3dUNqg5lEu0Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "WY1x1MsMrbQogWOeXDasyESSjYi-3iS4p8UjlWMwNJOS0j7_KFQE0
         w"
    }
  ],
  "protected":
    "eyJwMnMiOiI4UTFTemluYXNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyL
     CJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJjdHkiOiJKV0stU0VUK0
     pTT04iLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
  "iv":
    "HnJqms6_fz9N6mpsML9NHA",
  "ciphertext":
    "B39o2LfmeYhS_FiszP560P1VkHWNS6vukmQrUL2DdoQgzwz8debUcWgo1
     A9JXEBUk4rr4ALHcn8wA1yRuzWOUlpk0LNBmBfrvdRpgItUQiknWa5U1K
     Y_PqWIZKpJJ-Gq0QTaBTsfnffUbk3BD7eillUdg3poI7EFHLsE7GN3nyu
     JKaCCdIkFngEektjM2WMUPPMuXracPftXsxJDPnUAwtCAEsShnHozPEUp
     MIIgWnnlM8dlofYaDewXWySoYn321leWpLGCZVaJIEEgAttFH2iZpbb3M
     NV1UifDMgMCUS-Xbq4ohDcgu3dv9xWg81PNib-GyXoFU93HN9HEblg8iZ
     6CfKVZ_KKvNS1oCVaoMKqPIf6Jgo-iG4S_bblOma9esofjwIp-RU9h3fp
     x-taoMRvjb2pLEm1FQrYXkx5i3hfN0ESsHRBW1WyCWnVK8M7mHJUHQqBL
     0FWZMKjpgWa00uZOnpZteZO4eyQKYSsBgyMRSuhF6tceKFfxIWtclIno",
  "tag":
    "YLeY6UpSeM3dUNqg5lEu0Q"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-pbes2-json title="JSON Serialization"}


## Key Agreement with Key Wrapping using ECDH-ES and AES-KeyWrap with AES-GCM ## {#jwe-ecdh_aeskw}

This example illustrates encrypting content using the "ECDH-ES+A128KW" (Elliptic Curve Diffie-Hellman Ephemeral-Static with AES-128-KeyWrap) key encryption algorithm and the "A128GCM" (AES-GCM) content encryption algorithm.

### Input Factors ### {#jwe-ecdh_aeskw-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}
* EC public key; this example uses the public key from {{jwe-ecdh_aeskw-key}}
* "alg" parameter of "ECDH-ES+A128KW"
* "enc" parameter of "A128GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "kid": "peregrin.took@tuckborough.example",
  "use": "enc",
  "crv": "P-384",
  "x":   "YU4rRUzdmVqmRtWOs2OpDE_T5fsNIodcG8G5FWPrTPMyxpzsSOGa
          QLpe2FpxBmu2",
  "y":   "A8-yxCHxkfBz3hKZfI1jUYMjUhsEveZ9THuwFjH2sCNdtksRJU7D
          5-SkgaFL1ETP",
  "d":   "iTx2pk7wW-GqJkHcEkFQb2EFyYcO7RugmaW3mRrQVAOUiPommT0I
          dnYK2xDlZh-j"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-key title="Elliptic Curve P-384 Key, in JWK format"}

(**NOTE**: While the key includes the private parameters, only the public parameters "crv", "x", and "y" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-ecdh_aeskw-gen}

The following are generated before encrypting:

* Symmetric AES key as the Content Encryption Key (CEK); this example uses the key from {{jwe-ecdh_aeskw-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-ecdh_aeskw-iv}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C3eS2iNXmSTA7W8tBpjs3w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ubzqaTluloMJR8Ec
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-ecdh_aeskw-keyenc}

To encrypt the Content Encryption Key, the following are generated:

* Ephemeral EC private key on the same curve as the EC public key; this example uses the private key that matches the public key from {{jwe-ecdh_aeskw-epk}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "crv": "P-384",
  "x":   "qMz7Lgb3Bc1GNuVn4ZSxLDeDpihGWRwqA2fA1-2IJwDQtKMdpKY0
          XjNqBbjigcL-",
  "y":   "Ygt6Bc_o29f-DJ_5O3YCMoX2tXXz1ysj9MFRnucByIQoR0y3SVmq
          BBwQISq9grWe"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-epk title="Ephemeral Elliptic Curve P-384 Key, in JWK format"}

Performing the key encryption operation over the CEK ({{jwe-ecdh_aeskw-cek}}) with the following:

* The static Elliptic Curve public key ({{jwe-ecdh_aeskw-key}}); and
* The ephemeral Elliptic Curve private key ({{jwe-ecdh_aeskw-epk}});

produces the following JWE encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-ecdh_aeskw-contentenc}

The following are generated before encrypting the content:

* Protected JWE header; this example uses the header from {{jwe-ecdh_aeskw-protected}}, encoded to {{RFC4648}} base64url as {{jwe-ecdh_aeskw-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ECDH-ES+A128KW",
  "kid": "peregrin.took@tuckborough.example",
  "epk": {
    "kty": "EC",
    "crv": "P-384",
    "x":   "qMz7Lgb3Bc1GNuVn4ZSxLDeDpihGWRwqA2fA1-2IJwDQtKMdpK
            Y0XjNqBbjigcL-",
    "y":   "Ygt6Bc_o29f-DJ_5O3YCMoX2tXXz1ysj9MFRnucByIQoR0y3SV
            mqBBwQISq9grWe"
  },
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
Mzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHBpaEdXUndxQTJmQT
EtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5IjoiWWd0NkJjX28yOWYt
REpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQnlJUW9SMHkzU1ZtcUJCd1FJU3
E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-ecdh_aeskw-cek}});
* Initialization vector/nonce ({{jwe-ecdh_aeskw-iv}}); and
* Protected JWE header ({{jwe-ecdh_aeskw-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-ecdh_aeskw-ciphertext}}.
* Authentication tag from {{jwe-ecdh_aeskw-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqKa-xC2
Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbgf0_TQqG9PK
vFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-JlnQ3pssAqQLpUV
_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToPq57d2Q99N10WfPmXVQ38
htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE3Bb8IJ1a04LzqB4Xmp_wgbwHC
VR-bqTKgth3h_NoDLqCxQ0QcG9E78i36iPJuLAzVgS0ChHzo5ULw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5cJTRUT3kQRrw_UGwtMtDQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-ecdh_aeskw-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-ecdh_aeskw-protected_b64u}})
* Encrypted key ({{jwe-ecdh_aeskw-encdkey}})
* Initialization vector/nonce ({{jwe-ecdh_aeskw-iv}})
* Ciphertext ({{jwe-ecdh_aeskw-ciphertext}})
* Authentication tag ({{jwe-ecdh_aeskw-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH
Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt
Mzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHBpaEdXUndxQTJmQT
EtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5IjoiWWd0NkJjX28yOWYt
REpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQnlJUW9SMHkzU1ZtcUJCd1FJU3
E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn0
.
zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY
.
ubzqaTluloMJR8Ec
.
zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqKa-xC2
Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbgf0_TQqG9PK
vFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-JlnQ3pssAqQLpUV
_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToPq57d2Q99N10WfPmXVQ38
htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE3Bb8IJ1a04LzqB4Xmp_wgbwHC
VR-bqTKgth3h_NoDLqCxQ0QcG9E78i36iPJuLAzVgS0ChHzo5ULw
.
5cJTRUT3kQRrw_UGwtMtDQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "zPCB2OMxJSGs6zA7zIYO2cUE4Yz5p7TY"
    }
  ],
  "protected":
    "eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb
     2tAdHVja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsIm
     NydiI6IlAtMzg0IiwieCI6InFNejdMZ2IzQmMxR051Vm40WlN4TERlRHB
     paEdXUndxQTJmQTEtMklKd0RRdEtNZHBLWTBYak5xQmJqaWdjTC0iLCJ5
     IjoiWWd0NkJjX28yOWYtREpfNU8zWUNNb1gydFhYejF5c2o5TUZSbnVjQ
     nlJUW9SMHkzU1ZtcUJCd1FJU3E5Z3JXZSJ9LCJlbmMiOiJBMTI4R0NNIn
     0",
  "iv":
    "ubzqaTluloMJR8Ec",
  "ciphertext":
    "zQVvyDdwBRvUVkPxQCHD0YtCihhKu462TdE4s4U8VDsCEvJ2t24YRChqK
     a-xC2Ai-l1AvpPIYpwWYgwk3r9QBDTXsHbyn7FVhoVes0YAMthhmnLgbg
     f0_TQqG9PKvFOki83X3aZ2PIHGcjSifIT6OQqxXE9YhdXwD0bXpkXUlq-
     JlnQ3pssAqQLpUV_-4Ne6lZj4gFLunBEDGVcfhLiviyAF2BjlJG7mhToP
     q57d2Q99N10WfPmXVQ38htg8thQ2qcenxi5Axd2PJXNjDsDroleU-ObLE
     3Bb8IJ1a04LzqB4Xmp_wgbwHCVR-bqTKgth3h_NoDLqCxQ0QcG9E78i36
     iPJuLAzVgS0ChHzo5ULw",
  "tag":
    "5cJTRUT3kQRrw_UGwtMtDQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh_aeskw-json title="JSON Serialization"}


## Key Agreement using ECDH-ES with AES-CBC-HMAC-SHA2 ## {#jwe-ecdh}

This example illustrates encrypting content using the "ECDH-ES" (Elliptic Curve Diffie-Hellman Ephemeral-Static) key agreement algorithm and the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-ecdh-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* EC public key; this example uses the public key from {{jwe-ecdh-key}}.
* "alg" parameter of "ECDH-ES"
* "enc" parameter of "A128CBC-HS256"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "kid": "meriadoc.brandybuck@buckland.example",
  "use": "enc",
  "crv": "P-256",
  "x":   "XnXXKEsaUU4hPZza_zSHIbt02UA505B1rDWc7JNlcDE",
  "y":   "Md5NqzfiXCytoaMglA-9MstvgOBdMSroXA2Hb6vR6dQ",
  "d":   "44eY-VRWsn1zdz3VaWS6idEpOGt1ErydBARq7Iyh9pY"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-key title="Elliptic Curve P-256 Key"}

(**NOTE**: While the key includes the private parameters, only the public parameters "crv", "x", and "y" are necessary for the encryption operation.)

### Generated Factors ### {#jwe-ecdh-gen}

The following are generated before encrypting:

* Initialization vector/nonce; this examples uses the initialization vector/nonce from {{jwe-ecdh-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BMbSNYW2uC7RX3xql1gbQw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-iv title="Initialization Vector, base64url-encoded"}

**NOTE**: The Content Encryption Key (CEK) is not randomly generated; instead it is determined using key agreement.

### Key Agreement ### {#jwe-ecdh-enckey}

The following are generated to agree on a CEK:

* Ephemeral private key; this example uses the private that matches the public key from {{jwe-ecdh-epk}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "crv": "P-256",
  "x":   "h_ImuH3OW5JxZNQZWIWCFTYAIigZYs1-QzsQR9tCEQ4",
  "y":   "4ZWJVVrTOWdEVbH266nb4Wy2QiwH_9XAcdpNh4S2oX0"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-epk title="Ephemeral public key, in JWK format"}

Performing the ECDH operation using the static EC public key ({{jwe-ecdh-key}}) over the ephemeral private key {{jwe-ecdh-epk}}) produces the following CEK:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
W7j3XePj-Id6Zn71dv1b_QUQaNqJSMuxWhutlLqxLFE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-cek title="Agreed-to Content Encryption Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-ecdh-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-ecdh-protected}}, encoded to {{RFC4648}} as {{jwe-ecdh-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ECDH-ES",
  "kid": "meriadoc.brandybuck@buckland.example",
  "epk": {
    "kty": "EC",
    "crv": "P-256",
    "x":   "h_ImuH3OW5JxZNQZWIWCFTYAIigZYs1-QzsQR9tCEQ4",
    "y":   "4ZWJVVrTOWdEVbH266nb4Wy2QiwH_9XAcdpNh4S2oX0"
  },
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
LCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWllzMS1RenNRUjl0Q0
VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRXeTJRaXdIXzlYQWNkcE5o
NFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-ecdh-cek}});
* Initialization vector/nonce ({{jwe-ecdh-iv}}); and
* Protected JWE header ({{jwe-ecdh-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-ecdh-ciphertext}}.
* Authentication tag from {{jwe-ecdh-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgjSaGPM
M7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWlQZrQz77Ie
dSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGdWbyDnPMvp6eGL
T6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOww4E5zKW9Xycx3mkh_
gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb29frJCFI-rYfahoVz6QhN
QXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNAdBKgSa9JZfc21dSw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kqeubaGyskAjcj8mDymY6A
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-ecdh-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-ecdh_aeskw-protected_b64u}})
* Initialization vector/nonce ({{jwe-ecdh_aeskw-iv}})
* Ciphertext ({{jwe-ecdh_aeskw-ciphertext}})
* Authentication tag ({{jwe-ecdh_aeskw-tag}})

the resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW
NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi
LCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWllzMS1RenNRUjl0Q0
VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRXeTJRaXdIXzlYQWNkcE5o
NFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ
.
.
BMbSNYW2uC7RX3xql1gbQw
.
mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgjSaGPM
M7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWlQZrQz77Ie
dSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGdWbyDnPMvp6eGL
T6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOww4E5zKW9Xycx3mkh_
gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb29frJCFI-rYfahoVz6QhN
QXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNAdBKgSa9JZfc21dSw
.
kqeubaGyskAjcj8mDymY6A
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-compact title="Compact Serialization"}

the resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected":
    "eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja
     0BidWNrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2Ij
     oiUC0yNTYiLCJ4IjoiaF9JbXVIM09XNUp4Wk5RWldJV0NGVFlBSWlnWll
     zMS1RenNRUjl0Q0VRNCIsInkiOiI0WldKVlZyVE9XZEVWYkgyNjZuYjRX
     eTJRaXdIXzlYQWNkcE5oNFMyb1gwIn0sImVuYyI6IkExMjhDQkMtSFMyN
     TYifQ",
  "iv":
    "BMbSNYW2uC7RX3xql1gbQw",
  "ciphertext":
    "mwSOHtsJDtD1R4Y4r0Ads9Bc8nTgk_Y4wVe_4pJsb7RERAgnfFRYRmlgj
    SaGPMM7PytxfLss6clZI7YW366xh8DiqOWUavR7VFGLZIOHkrMsTPaehWl
    QZrQz77IedSM20wSGVj-E4T0KRtX3CrZsEPjtXqNbm_EmDPgxVYTaTthGd
    WbyDnPMvp6eGLT6gsMkctSLIHgaGvI2VWB0oNYdKnCRU-p2JFkLu5XQfOw
    w4E5zKW9Xycx3mkh_gA1dFU28Zs_boX-mm4UYseIJfaZAX_eqs7NDMpbrb
    29frJCFI-rYfahoVz6QhNQXQMNmzL93pDo5QE_i9pIzR4KJu-uaItKTKNA
    dBKgSa9JZfc21dSw",
  "tag":
    "kqeubaGyskAjcj8mDymY6A"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-ecdh-json title="JSON Serialization"}


## Direct Encryption using AES-GCM ## {#jwe-dir_gcm}

This example illustrates encrypting content using a previously exchanged key directly and the "A128GCM" (AES-GCM) content encryption algorithm.

### Input Factors ### {#jwe-dir_gcm-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-dir_gcm-key}}.
* "alg" parameter of "dir"
* "enc" parameter of "A128GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
  "use": "enc",
  "alg": "A128GCM",
  "k":   "XctOhJAkA-pD9Lh7ZgW_2A"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-key title="AES 128-bit key, in JWK format"}

### Generated Factors ### {#jwe-dir_gcm-gen}

The following are generated before encrypting:

* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-dir_gcm-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OI-fESJKbHHk1-rA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Content ### {#jwe-dir_gcm-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-dir_gcm-protected}}, encoded as {{RFC4648}} base64url to produce {{jwe-dir_gcm-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "dir",
  "kid": "77c7e2b8-6e13-45cf-8672-617b5b45243a",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-protected title="Protected JWE Header JSON"}

Encoded as {{RFC4648}} base64url:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the encryption operation on the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-dir_gcm-key}});
* Initialization vector/nonce ({{jwe-dir_gcm-iv}}); and
* Protected JWE header ({{jwe-dir_gcm-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-dir_gcm-ciphertext}}.
* Authentication tag from {{jwe-dir_gcm-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GVG_3Dz
-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5fFlRiEr9is
8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEISWu3Pf4yugvVMpLR
DxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjUHROjh2_QVqpTUwzx2qto
3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5l5XnoqCT0ioaFzeW9zbiAMj_o
1gvWgPLv8HRD9OxMERTCwbJt4O3baG9Roz-5We10hx-sb2EKtN0g
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mBCmmmn0W0j4BS7ln3nxVA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-dir_gcm-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-dir_gcm-protected_b64u}})
* Initialization vector/nonce ({{jwe-dir_gcm-iv}})
* Ciphertext ({{jwe-dir_gcm-ciphertext}})
* Authentication tag ({{jwe-dir_gcm-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT
diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0
.
.
OI-fESJKbHHk1-rA
.
18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GVG_3Dz
-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5fFlRiEr9is
8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEISWu3Pf4yugvVMpLR
DxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjUHROjh2_QVqpTUwzx2qto
3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5l5XnoqCT0ioaFzeW9zbiAMj_o
1gvWgPLv8HRD9OxMERTCwbJt4O3baG9Roz-5We10hx-sb2EKtN0g
.
mBCmmmn0W0j4BS7ln3nxVA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "protected":
    "eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3M
     i02MTdiNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "OI-fESJKbHHk1-rA",
  "ciphertext":
    "18KNUnRDhesDLn7Ec4ui6q0aptYFNkbx6Vf64wWItX7hMQe2XgbNTt-GV
     G_3Dz-5mscM9bKe0TkgEecWAovlTFkuwhL-TZhbcnYdMXtaNtqYe2TEZ5
     fFlRiEr9is8gBeJ7YOwazxwtE8O6FwwqeAOnR-PI8M30ODcq9B8UVzEIS
     Wu3Pf4yugvVMpLRDxJEbyVDVr5MjiXsXpOkEdc7uUisJ0H0ygoP_mjSjU
     HROjh2_QVqpTUwzx2qto3KVDj-MZehUb2FivjT7FecB3Yz-m-KhYXvXR5
     l5XnoqCT0ioaFzeW9zbiAMj_o1gvWgPLv8HRD9OxMERTCwbJt4O3baG9R
     oz-5We10hx-sb2EKtN0g",
  "tag":
    "mBCmmmn0W0j4BS7ln3nxVA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-dir_gcm-json title="JSON Serialization"}


## Key Wrap using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2 ## {#jwe-aesgcmkw}

This example illustrates encrypting content using the "A256GCMKW" (AES-256-GCM-KeyWrap) key encryption algorithm with the "A128CBC-HS256" (AES-128-CBC-HMAC-SHA-256) content encryption algorithm.

### Input Factors ### {#jwe-aesgcmkw-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* AES symmetric key; this example uses the key from {{jwe-aesgcmkw-key}}.
* "alg" parameter of "A256GCMKW"
* "enc" parameter of "A128CBC-HS256"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "use": "enc",
  "alg": "A256GCMKW",
  "k":   "qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-key title="AES 256-bit Key"}

### Generated Factors ### {#jwe-aesgcmkw-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-aesgcmkw-cek}}.
* Initialization vector/nonce for content encryption; this example uses the initilization vector/nonce from {{jwe-aesgcmkw-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a2gN8ASDdVKI86lMJC8rKI8RV8U8OltRlVzygIo48NA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Z3wPFyzW8czy88sUmzcnlg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-aesgcmkw-keyenc}

The following are generated before encrypting the CEK:

* Initialization vector/nonce for key wrapping; this example uses the initialization vector/nonce from {{jwe-aesgcmkw-kwiv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3llIgu3y7Vu5dZW7
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-kwiv title="Key Wrap Initialization Vector, base64url-encoded"}

Performing the key encryption operation over the CEK ({{jwe-aesgcmkw-cek}}) with the following:

* AES symmetric key ({{jwe-aesgcmkw-key}}); 
* Key wrap initialization vector/nonce ({{jwe-aesgcmkw-kwiv}}); and
* The empty string as authenticated data

produces the following:

* Encrypted Key from {{jwe-aesgcmkw-encdkey}}.
* Key wrap authentication tag from {{jwe-aesgcmkw-kwtag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-encdkey title="Encrypted Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7qiY1gOLorD7ro67FZqYRw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-kwtag title="Key Wrap Authentication Tag, base64url-encoded"}

### Encrypting the Content ### {#jwe-aesgcmkw-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-aesgcmkw-protected}}, encoded to {{RFC4648}} base64url as {{jwe-aesgcmkw-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A256GCMKW",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "tag": "7qiY1gOLorD7ro67FZqYRw",
  "iv":  "3llIgu3y7Vu5dZW7",
  "enc": "A128CBC-HS256"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybzY3RlpxWVJ3
IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
J9
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-aesgcmkw-cek}});
* Initialization vector/nonce ({{jwe-aesgcmkw-iv}}); and
* Protected JWE header ({{jwe-aesgcmkw-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-aesgcmkw-ciphertext}}.
* Authentication tag from {{jwe-aesgcmkw-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_HEs-Tu
5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLLO4n5LFK0mI
TQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu3Evj2GmvvPIm1WZ
K3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNzc8PRMavtkBO64zmpWTfy
tMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL7RlkXU12fOCc7VJ2X5TtYPPr_
bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7AIcf3KpfzapJmZ3kdZgOg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
d7dahIDc06hrpWqDiQzaXQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-aesgcmkw-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-aesgcmkw-protected_b64u}})
* encrypted key ({{jwe-aesgcmkw-encdkey}})
* Initialization vector/nonce ({{jwe-aesgcmkw-iv}})
* Ciphertext ({{jwe-aesgcmkw-ciphertext}})
* Authentication tag ({{jwe-aesgcmkw-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj
IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybzY3RlpxWVJ3
IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTEyOENCQy1IUzI1Ni
J9
.
cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE
.
Z3wPFyzW8czy88sUmzcnlg
.
YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_HEs-Tu
5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLLO4n5LFK0mI
TQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu3Evj2GmvvPIm1WZ
K3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNzc8PRMavtkBO64zmpWTfy
tMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL7RlkXU12fOCc7VJ2X5TtYPPr_
bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7AIcf3KpfzapJmZ3kdZgOg
.
W7cYYn27uUYttxShJ2yYhQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "cfBkmK29hCy31FM6VhHHgqbGa2DQvXZgnqSSl8zcOsE"
    }
  ],
  "protected":
    "eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkO
     TUtYjIwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiI3cWlZMWdPTG9yRDdybz
     Y3RlpxWVJ3IiwiaXYiOiIzbGxJZ3UzeTdWdTVkWlc3IiwiZW5jIjoiQTE
     yOENCQy1IUzI1NiJ9",
  "iv":
    "Z3wPFyzW8czy88sUmzcnlg",
  "ciphertext":
    "YSoJLPEGGMUoFM7zbKAwZivdakcAZWsyoQycpRG-4haDdLdXXGtLCev_H
     Es-Tu5xRlK-4FFIQJ8l6bfSTR9glEa2FaVS8tgkZO1X9BbPAY9_4SCuLL
     O4n5LFK0mITQ8WOgpa0FTfG_1ml76MWGVtgADHGzvqSib9xoW39YsIdOu
     3Evj2GmvvPIm1WZK3HjQhQkvfKbpSFLFRkH3xsHyYYkKiH2PEOCZOzHNz
     c8PRMavtkBO64zmpWTfytMshzm0sgbroEBFU-vCHWzt5fVx_A9oUn5szL
     7RlkXU12fOCc7VJ2X5TtYPPr_bM4z6KB5FBLS3hVVfHZee83e9IDrk0k7
     AIcf3KpfzapJmZ3kdZgOg",
  "tag":
    "W7cYYn27uUYttxShJ2yYhQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aesgcmkw-json title="JSON Serialization"}


## Key Wrap using AES-KeyWrap with AES-GCM ## {#jwe-aeskw}

The following example illustrates content encryption using the "A128KW" (AES-128-KeyWrap) key encryption algorithm and the "A128GCM" (AES-128-GCM) content encryption algorithm.

### Input Factors ### {#jwe-aeskw-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* AES symmetric key; this example uses the key from {{jwe-aeskw-key}}.
* "alg" parameter of "A128KW"
* "enc" parameter of "A128GCM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "oct",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "use": "enc",
  "alg": "A128KW",
  "k":   "GZy6sIZ6wl9NJOKB-jnmVQ"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-key title="AES 128-Bit Key"}

### Generated Factors ### {#jwe-aeskw-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key; this example uses the key from {{jwe-aeskw-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-aeskw-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'Hv3Kmjt7vR2in57dLm-Pfw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wxdDTG0-QnGvBZew
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-aeskw-keyenc}

Performing the key encryption operation over the CEK ({{jwe-aeskw-cek}}) with the AES key ({{jwe-aeskw-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RMMWwegPo5GY-5DeqC51gevcIOQpc4CH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-aeskw-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-aeskw-protected}}, encoded to {{RFC4648}} base64url as {{jwe-aeskw-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-aeskw-cek}});
* Initialization vector/nonce ({{jwe-aeskw-iv}}); and
* Protected JWE header ({{jwe-aeskw-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-aeskw-ciphertext}}.
* Authentication tag from {{jwe-aeskw-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTipfOin
86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9XxxEs8zw9YPX
baILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5JaojvqXF5F3jkZAaJwa4u
IjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P_VYEb8ptUWmgz4Gg1YFF
tGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9gnAqYnWKLaE3E2hzhxcgtNwNKf
lLSfmV247xbRYZhR8NeJ_GoKCjrH7isFvUM0Uzx43cPpPDypyiGA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-ciphertext title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
N7CDBxgruPcQozgqPeihlw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-aeskw-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-aeskw-protected_b64u}})
* encrypted key ({{jwe-aeskw-encdkey}})
* Initialization vector/nonce ({{jwe-aeskw-iv}})
* Ciphertext ({{jwe-aeskw-ciphertext}})
* Authentication tag ({{jwe-aeskw-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
.
RMMWwegPo5GY-5DeqC51gevcIOQpc4CH
.
wxdDTG0-QnGvBZew
.
DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTipfOin
86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9XxxEs8zw9YPX
baILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5JaojvqXF5F3jkZAaJwa4u
IjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P_VYEb8ptUWmgz4Gg1YFF
tGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9gnAqYnWKLaE3E2hzhxcgtNwNKf
lLSfmV247xbRYZhR8NeJ_GoKCjrH7isFvUM0Uzx43cPpPDypyiGA
.
N7CDBxgruPcQozgqPeihlw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "RMMWwegPo5GY-5DeqC51gevcIOQpc4CH"
    }
  ],
  "protected":
    "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
     TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "wxdDTG0-QnGvBZew",
  "ciphertext":
    "DoM1vi13RWus_t3EsvGWk4gDH3F8TGRnBo4p3uImtmboRrT1pniDLDQTi
     pfOin86hMl343jhxcRObGyiKgIyPI-tG8M9E92VkHeOE8O77-s6wRj9Xx
     xEs8zw9YPXbaILJYTbR5aWyRLpTwlEhAf5_DVL2b5vnvTNctEp5Jaojvq
     XF5F3jkZAaJwa4uIjhqGd7gJvf7zKbwF7Is_GbSm9rf9Z0dacH5LQQn2P
     _VYEb8ptUWmgz4Gg1YFFtGg16H5JAutG9a6GqFUdkSZ-mKSothgDEHv9g
     nAqYnWKLaE3E2hzhxcgtNwNKflLSfmV247xbRYZhR8NeJ_GoKCjrH7isF
     vUM0Uzx43cPpPDypyiGA",
  "tag":
    "N7CDBxgruPcQozgqPeihlw"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aeskw-json title="JSON Serialization"}


## Compressed Content ## {#jwe-compressed}

This example illustrates encrypting content that is first compressed.  It reuses the AES key, key encryption algorithm, and content encryption algorithm from {{jwe-aeskw}}.

### Input Factors ### {#jwe-compressed-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".
* "zip" parameter as "DEF".

### Generated Factors ### {#jwe-compressed-gen}

The following are generated before encrypting:

* Compressed plaintext from the original plaintext content; compressing {{jwe-plaintext}} using the DEFLATE {{RFC1951}} algorithm produces the compressed plaintext from {{jwe-compressed-plaintext_c}}.
* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-compressed-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-compressed-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eJxtj0EOwyAMBL-yD0jyh_bQL1Q9EmICCsKVMYry-zpEPVTqycizu15e3OBdgU
qrilahjKrJb9iTRhyGNQq3Ndo8164s56uMoyk1EuakSgIqy4SbweNP4kb0NueB
Sl5IweGUSR1Hn7maW6M5TmdXJr0w5TDh3vSbWVh_YjNdKDhPBrjNmeAyFxp6z5
XtUug_YUtx2Fms5dNEQv0EgiRrXgc8hBeePt1uYQ0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-plaintext_c title="Compressed Plaintext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
03x4Y5d1Lk0K2VbMmePmMw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9UnGd0z8-Yx3BFV3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-compressed-keyenc}

Performing the key encryption operation over the CEK ({{jwe-compressed-cek}}) with the AES key ({{jwe-aeskw-key) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-compressed-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-compressed-protected}}, encoded as {{RFC4648}} base64url as {{jwe-compressed-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM",
  "zip": "DEF"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the compressed Plaintext ({{jwe-compressed-plaintext_c}}, encoded as an octet string) with the following:

* CEK ({{jwe-compressed-cek}});
* Initialization vector/nonce ({{jwe-compressed-iv}}); and
* Protected JWE header ({{jwe-compressed-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-compressed-ciphertext}}.
* Authentication tag from {{jwe-compressed-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0dnlB0y
ZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZLaCf6TjK46C
UfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FHpYevNXuE7hokcim
LRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-ciphertext title="Ciphertext, base64url-encoded"}

And authentication tag:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Im5q_DU2ZafibIuj5GNI5Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-compressed-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-compressed-protected_b64u}})
* encrypted key ({{jwe-compressed-encdkey}})
* Initialization vector/nonce ({{jwe-compressed-iv}})
* Ciphertext ({{jwe-compressed-ciphertext}})
* Authentication tag ({{jwe-compressed-tag}})

The resulting JWE object using the Compact serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0
.
fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5
.
9UnGd0z8-Yx3BFV3
.
b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0dnlB0y
ZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZLaCf6TjK46C
UfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FHpYevNXuE7hokcim
LRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q
.
Im5q_DU2ZafibIuj5GNI5Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-compact title="Compact Serialization"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "fUGYywsd6dWWr5JpNP0EMMN2XkXk8_h5"
    }
  ],
  "protected":
    "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
     TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiRE
     VGIn0",
  "iv":
    "9UnGd0z8-Yx3BFV3",
  "ciphertext":
    "b962BmHXeA9iYY8u9GnpxtXnme1MNm7vhhBqcxJHof08hGn1ltC7Mpf0d
     nlB0yZqAlqBWDJrGs3eVseTlFEFm0pDHDlIven74xwZPdJdEylDKPTeZL
     aCf6TjK46CUfWJBajPZ2wiupjQJb5FYz_1KsWYCXAE4k6xt9v5wkwm_FH
     pYevNXuE7hokcimLRiCi1R_xjnG7sHCTWKb56L0ZsqacWn_52jkO9B3Q",
  "tag":
    "Im5q_DU2ZafibIuj5GNI5Q"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-compressed-json title="JSON Serialization"}

## Including Additional Authenticated Data ## {#jwe-aad}

This example illustrates encrypting content that includes additional authenticated data. As this example includes an additional top-level property not present in the Compact serialization, only the JSON serialization is possible.

### Input Factors ### {#jwe-aad-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".
* Additional authenticated data; this example uses a {{RFC7095}} vCard from {{jwe-aad-data}}, serialized to UTF-8.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[
  "vcard",
  [
    [ "version", {}, "text", "4.0" ],
    [ "fn", {}, "text", "Meriadoc Brandybuck" ],
    [ "n", {},
      "text", [
        "Brandybuck", "Meriadoc", "Mr.", ""
      ]
    ],
    [ "bday", {}, "text", "TA 2982" ],
    [ "gender", {}, "text", "M" ]
  ]
]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-data title="Additional Authenticated Data, in JSON format"}

**NOTE** whitespace between JSON values added for readability.
 
### Generated Factors ### {#jwe-aad-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-aad-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-aad-iv}}.
* Encoded additional authenticated data (AAD); this example uses the additional authenticated data from {{jwe-aad-data}}, encoded to {{RFC4648}} base64url as {{jwe-aad-data_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uGL3QU7R3HMR3ik-oTW82w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HorZstLCLfNNC7TN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-iv title="Initialization Vector, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxbImZuIix7fS
widGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4iLHt9LCJ0ZXh0Iixb
IkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIsIiJdXSxbImJkYXkiLHt9LC
J0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVyIix7fSwidGV4dCIsIk0iXV1d
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-data_b64u title="Additional Authenticated Data, base64url-encoded"}

### Encrypting the Key ### {#jwe-aad-keyenc}

Performing the key encryption operation over the CEK ({{jwe-aad-cek}}) with the AES key ({{jwe-aeskw-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-aad-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-aad-protected}}, encoded to {{RFC4648}} base64url as {{jwe-aad-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC
04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the following:

* CEK ({{jwe-aad-cek}});
* Initialization vector/nonce ({{jwe-aad-iv}}); and
* Concatenation of the protected JWE header ({{jwe-aad-protected_b64u}}), ".", and the {{RFC4648}} base64url encoding of {{jwe-aad-data}} as authenticated data

produces the following:

* Ciphertext from {{jwe-aad-ciphertext}}.
* Authentication tag from {{jwe-aad-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
36qblaXJa6XlM7EHkAWVcrAvUA-w0zUsaSiK9ajj1CsPp-oHpElk7bktsA2u9p
b_T0yeXpjeaGKc0tWO6VKMIpIEJed-reIzaHva_JrHKt63tKWRmGDtQ9EHDCgw
Vv_0EwUoVW_RzfugR-71IsoTSYeziVi2XL_nsHpcVGFQOgD2C-nvwqo4_8f9pZ
_bmK_kj0eAc54qp2laNG7odWGOSpOvW4Vr2ujW8QnHQlaKUNUqh0ODvCu0hFWN
pzxEgja4X6UlSkY6uTQR-mBBpwlA4rAnjP-pn0zuq0T13vkCplokt2GKhRLysE
6UqLjnyfexHGjC349nzsBHoCXk2tKJwrqPpssCnsqPaffU
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tp_Idm6BMHn3iJQ86T4sRA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-aad-output}

The following compose the resulting JWE object:

* Protected JWE header ({{jwe-aad-protected_b64u}})
* encrypted key ({{jwe-aad-encdkey}})
* Initialization vector/nonce ({{jwe-aad-iv}})
* Additional authenticated data ({{jwe-aad-data_b64u}})
* Ciphertext ({{jwe-aad-ciphertext}})
* Authentication tag ({{jwe-aad-tag}})

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "Aa2ArPkcYIHxdlA3lsGWtcC9sBkqTYHr"
    }
  ],
  "protected":
    "eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktY
     TQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "HorZstLCLfNNC7TN",
  "aad":
    "WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxbImZuI
    ix7fSwidGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4iLHt9LCJ
    0ZXh0IixbIkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIsIiJdXSxbI
    mJkYXkiLHt9LCJ0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVyIix7fSwidGV
    4dCIsIk0iXV1d",
  "ciphertext":
    "36qblaXJa6XlM7EHkAWVcrAvUA-w0zUsaSiK9ajj1CsPp-oHpElk7bkts
     A2u9pb_T0yeXpjeaGKc0tWO6VKMIpIEJed-reIzaHva_JrHKt63tKWRmG
     DtQ9EHDCgwVv_0EwUoVW_RzfugR-71IsoTSYeziVi2XL_nsHpcVGFQOgD
     2C-nvwqo4_8f9pZ_bmK_kj0eAc54qp2laNG7odWGOSpOvW4Vr2ujW8QnH
     QlaKUNUqh0ODvCu0hFWNpzxEgja4X6UlSkY6uTQR-mBBpwlA4rAnjP-pn
     0zuq0T13vkCplokt2GKhRLysE6UqLjnyfexHGjC349nzsBHoCXk2tKJwr
     qPpssCnsqPaffU",
  "tag":
    "tp_Idm6BMHn3iJQ86T4sRA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-aad-json title="JSON Serialization"}


## Protecting Specific Header Fields ## {#jwe-somefields}

This example illustrates encrypting content where only certain JWE header parameters are protected.  As this example includes unprotected JWE header parameters, only the JSON serialization is possible.

### Input Factors ### {#jwe-somefields-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".

### Generated Factors ### {#jwe-somefields-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-somefields-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-somefields-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
uGL3QU7R3HMR3ik-oTW82w
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HorZstLCLfNNC7TN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-somefields-keyenc}

Performing the key encryption operation over the CEK ({{jwe-somefields-cek}}) with the AES key ({{jwe-aeskw-key}}) produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-somefields-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-somefields-protected}}, encoded to {{RFC4648}} base64url as {{jwe-somefields-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-protected title="Protected JWE Header JSON"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-protected_b64u title="Protected JWE Header, base64url-encoded"}

Performing the content encryption operation over the Plaintext with the following:

* CEK ({{jwe-somefields-cek}});
* Initialization vector/nonce ({{jwe-somefields-iv}}); and
* Protected JWE header ({{jwe-somefields-protected_b64u}}) as authenticated data

produces the following:

* Ciphertext from {{jwe-somefields-ciphertext}}.
* Authentication tag from {{jwe-somefields-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XR98Or5bnT-qBoQ0-K8WbR6hphUsSoJZdE6W0c3CYJ2kSk-6NuycqF4ZrKy6YC
-Gs3jfCwkCmW955kmDgTIlc-fSQ-w__kwrM8wepy1h61OeY2HCM8-vJpK3yHcW
HrbJhuqJExRWlnR6l9y9kcAzc3F1YWBJ5B5uY0PvbbbiQnRL5d9VFxKZFjF8qT
a6T1OsXR22bKkb-oG8JWSiefhxZlGQCpqRUfmYDRMZhfakIa1hXVDaLZIapkka
gpw510A5yt0E5W8qkcCrezJZtCSFeHTJFqspCcnTvdfDqkGVQwo1cxKr0Wu-2K
wb3dP8TlZJ2dMSOxXyMQav1nqZcfKn2qg4xI87D5mhfCrW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hjccc2tFAQi12LH6FF-jFA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-somefields-output}

The following compose the resulting JWE object:

* Unprotected JWE header ({{jwe-somefields-unprotected}})
* Protected JWE header ({{jwe-somefields-protected_b64u}})
* encrypted key ({{jwe-somefields-encdkey}})
* Initialization vector/nonce ({{jwe-somefields-iv}})
* Ciphertext ({{jwe-somefields-ciphertext}})
* Authentication tag ({{jwe-somefields-tag}})

The following unprotected JWE header is generated before assembling the output results:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-unprotected title="Unprotected JWE Header JSON"}

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "MJjYoJ6DKa__0KTJP5PT8pR0T_tybLRc"
    }
  ],
  "unprotected": {
    "alg": "A128KW",
    "kid": "81b20965-8332-43d9-a468-82160ad91ac8"
  },
  "protected":
    "eyJlbmMiOiJBMTI4R0NNIn0",
  "iv":
    "HorZstLCLfNNC7TN",
  "ciphertext":
    "XR98Or5bnT-qBoQ0-K8WbR6hphUsSoJZdE6W0c3CYJ2kSk-6NuycqF4Zr
     Ky6YC-Gs3jfCwkCmW955kmDgTIlc-fSQ-w__kwrM8wepy1h61OeY2HCM8
     -vJpK3yHcWHrbJhuqJExRWlnR6l9y9kcAzc3F1YWBJ5B5uY0PvbbbiQnR
     L5d9VFxKZFjF8qTa6T1OsXR22bKkb-oG8JWSiefhxZlGQCpqRUfmYDRMZ
     hfakIa1hXVDaLZIapkkagpw510A5yt0E5W8qkcCrezJZtCSFeHTJFqspC
     cnTvdfDqkGVQwo1cxKr0Wu-2Kwb3dP8TlZJ2dMSOxXyMQav1nqZcfKn2q
     g4xI87D5mhfCrW",
  "tag":
    "Hjccc2tFAQi12LH6FF-jFA"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-somefields-json title="JSON Serialization"}


## Protecting Content Only ## {#jwe-nofields}

This example illustrates encrypting content where none of the JWE header parameters are protected.  As this example includes only unprotected JWE header parameters, only the JSON serialization is possible.

### Input Factors ### {#jwe-nofields-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the content from {{jwe-plaintext}}.
* Recipient encryption key; this example uses the key from {{jwe-aeskw-key}}.
* Key encryption algorithm; this example uses "A128KW".
* Content encryption algorithm; this example uses "A128GCM".

### Generated Factors ### {#jwe-nofields-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key; this example the key from {{jwe-nofields-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-nofields-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5UVirgqilMhbWpSnM3alUQ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
zdbIl4BrrziYK55_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key ### {#jwe-nofields-keyenc}

Performing the key encryption operation over the CEK ({{jwe-nofields-cek}} with the AES key ({{jwe-aeskw-key}} produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
yyuirCy7Hd_nY0gL5Jfq6sJ7RXRR0DtF
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-encdkey title="Encrypted Key, base64url-encoded"}

### Encrypting the Content ### {#jwe-nofields-contentenc}

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) using the following:

* CEK ({{jwe-nofields-cek}});
* Initialization vector/nonce ({{jwe-nofields-iv}}); and
* Empty string as authenticated data

produces the following:

* Ciphertext from {{jwe-nofields-ciphertext}}.
* Authenticated data from {{jwe-nofields-tag}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3MtsMr7GhYafTv6KNiWMEg5vl4tE2FHfmvfxhTJnioynNBD7G6LEEI6uLDHK-p
A2vINROgEAEiN9srAPN2qxl1kxJs4FBBin21pErXalJF_yqotv5OX-sXpyMSd2
X4peV29PRKVI2gaeVH8QjhuV5ar1UYaFW9qTqxwsN_NrbN8x709Exvhl3LoX6H
5XH9KFAc0nEk_AXvAvtYbq3GpWu3OONrXQuq6Oy7LCvBwCjlSKUEMR094sPim5
GVB7p_CX_xDuWGkPiaCTru0qJOfPjIbzzAjnf5m4Nw9kB1bMmYl4k_nvBSbUa1
-ybdYyGcK1ldGbWzYsCYZFII4DmK8rXHYDHRA1jR8StGEo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0qbCArWBoY_iqVMwfjNC4Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-tag title="Authentication Tag, base64url-encoded"}

### Output Results ### {#jwe-nofields-output}

The following unprotected JWE header is generated before assembling the output results:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A128KW",
  "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-unprotected title="Unprotected JWE Header JSON"}

The following compose the resulting JWE object:

* Unprotected JWE header ({{jwe-nofields-unprotected}})
* encrypted key ({{jwe-nofields-encdkey}})
* Initialization vector/nonce ({{jwe-nofields-iv}})
* Ciphertext ({{jwe-nofields-ciphertext}})
* Authentication tag ({{jwe-nofields-tag}})

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "yyuirCy7Hd_nY0gL5Jfq6sJ7RXRR0DtF"
    }
  ],
  "unprotected": {
    "alg": "A128KW",
    "kid": "81b20965-8332-43d9-a468-82160ad91ac8",
    "enc": "A128GCM"
  },
  "iv":
    "zdbIl4BrrziYK55_",
  "ciphertext":
    "3MtsMr7GhYafTv6KNiWMEg5vl4tE2FHfmvfxhTJnioynNBD7G6LEEI6uL
     DHK-pA2vINROgEAEiN9srAPN2qxl1kxJs4FBBin21pErXalJF_yqotv5O
     X-sXpyMSd2X4peV29PRKVI2gaeVH8QjhuV5ar1UYaFW9qTqxwsN_NrbN8
     x709Exvhl3LoX6H5XH9KFAc0nEk_AXvAvtYbq3GpWu3OONrXQuq6Oy7LC
     vBwCjlSKUEMR094sPim5GVB7p_CX_xDuWGkPiaCTru0qJOfPjIbzzAjnf
     5m4Nw9kB1bMmYl4k_nvBSbUa1-ybdYyGcK1ldGbWzYsCYZFII4DmK8rXH
     YDHRA1jR8StGEo",
  "tag":
    "0qbCArWBoY_iqVMwfjNC4Q"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-nofields-json title="JSON Serialization"}


## Encrypting to Multiple Recipients ## {#jwe-multi}

This example illustrates encryption content for multiple recipients. As this example has multiple recipients, only the JSON serialization is possible.

### Input Factors ### {#jwe-multi-input}

The following are supplied before beginning the encryption process:

* Plaintext content; this example uses the plaintext from {{jwe-plaintext}}.
* Recipient keys; this example uses the following:

  + The RSA public key from {{jwe-rsa15-key}} for the first recipient.
  + The EC public key from {{jwe-ecdh_aeskw-key}} for the second recipient.
  + The AES symmetric key from {{jwe-aesgcmkw-key}} for the third recipient.

* Key encryption algorithms; this example uses the following:

  + "RSA1_5" for the first recipient.
  + "ECDH-ES+A256KW" for the second recipient.
  + "A256GCMKW" for the third recipient.

* Content encryption algorithm; this example uses "A128CBC-HS256"

### Generated Factors ### {#jwe-multi-gen}

The following are generated before encrypting:

* AES symmetric key as the Content Encryption Key (CEK); this example uses the key from {{jwe-multi-cek}}.
* Initialization vector/nonce; this example uses the initialization vector/nonce from {{jwe-multi-iv}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OYs79m0f3LEuMZzmWBCywRn4u8B09BVidJb9j0ojDsY
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-cek title="Content Encryption Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nY-xFgdef1LrsU7u
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-iv title="Initialization Vector, base64url-encoded"}

### Encrypting the Key to the First Recipient ### {#jwe-multi-keyenc_1}

Performing the "RSA1_5" key encryption operation over the CEK ({{jwe-multi-cek}} with the first recipient's RSA key ({{jwe-rsa15-key}} produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t0JkvxtKiO
xibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5MnyQ69GBkMU6Poie-Ct
Q2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSftk7KKjyw38LBuvSOVdokkHWMP4p
VLeUJB1ovbT4M1j3pxUzyM2426sD6LfjorQhY8vsChyDaFST0Oe8uBvcRyA5ma
bEyRYlUet8PRH_CjINMipv7LCDRsKVnr3oHwZEfCJFGNC-w_-Qn4xcmkmxyaz1
-kZEpS_t2kWJsFqx3mg7QAXJBxdGmy6A
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-encdkey_1 title="Recipient #1 Encrypted Key, base64url-encoded"}

The following are generated after encrypting the CEK for the first recipient:

* Recipient JWE header from {{jwe-multi-rcpt_header_1}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "RSA1_5",
  "kid": "frodo.baggins@hobbiton.example"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_header_1 title="Recipient #1 JWE Header JSON"}

The following is the assembled first recipient JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "encrypted_key":
    "EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t0Jkv
     xtKiOxibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5MnyQ69GBk
     MU6Poie-CtQ2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSftk7KKjyw38LB
     uvSOVdokkHWMP4pVLeUJB1ovbT4M1j3pxUzyM2426sD6LfjorQhY8vsCh
     yDaFST0Oe8uBvcRyA5mabEyRYlUet8PRH_CjINMipv7LCDRsKVnr3oHwZ
     EfCJFGNC-w_-Qn4xcmkmxyaz1-kZEpS_t2kWJsFqx3mg7QAXJBxdGmy6A",
  "header": {
    "alg": "RSA1_5",
    "kid": "frodo.baggins@hobbiton.example"
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_1 title="Recipient #1 JSON"}

### Encrypting the Key to the Second Recipient ### {#jwe-multi-keyenc_2}

The following are generated before encrypting the CEK for the second recipient:

* Ephemeral EC private key on the same curve as the EC public key; this example uses the private key that matches the public key from {{jwe-multi-epk_2}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "kty": "EC",
  "crv": "P-384",
  "x":   "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkwH
          mwlMi4AxCVzG_I",
  "y":   "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5GM
          CwXwxtgkNeZ32T"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-epk_2 title="Ephemeral public key for Recipient #2, in JWK format"}

Performing the "ECDH-ES+A256KW" key encryption operation over the CEK ({{jwe-multi-cek}} with the following:

* Static Elliptic Curve public key ({{jwe-ecdh_aeskw-key}}).
* Ephemeral Elliptic Curve private key ({{jwe-multi-epk_2}}.

produces the following encrypted key:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YOw
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-encdkey_2 title="Recipient #2 Encrypted Key, base64url-encoded"}

The following are generated after encrypting the CEK for the second recipient:

* Recipient JWE Header from {{jwe-multi-rcpt_header_2}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "ECDH-ES+A256KW",
  "kid": "peregrin.took@tuckborough.example",
  "epk": {
    "kty": "EC",
    "crv": "P-384",
    "x":   "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkwH
            mwlMi4AxCVzG_I",
    "y":   "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5GM
            CwXwxtgkNeZ32T"
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_header_2 title="Recipient #2 JWE Header JSON"}

The following is the assembled second recipient JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "encrypted_key":
    "Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YOw",
  "header": {
    "alg": "ECDH-ES+A256KW",
    "kid": "peregrin.took@tuckborough.example",
    "epk": {
      "kty": "EC",
      "crv": "P-384",
      "x":   "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbk
              wHmwlMi4AxCVzG_I",
      "y":   "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5
              GMCwXwxtgkNeZ32T"
    }
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_2 title="Recipient #2 JSON"}

### Encrypting the Key to the Third Recipient ### {#jwe-multi-keyenc_3}

The following are generated before encrypting the CEK for the third recipient:

* Initialization vector/nonce for key wrapping; this example uses the initialization vector/nonce from {{jwe-multi-kwiv_3}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kZtitxRDXfzCS6ZK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-kwiv_3}

Performing the "A256GCMKW" key encryption operation over the CEK ({{jwe-multi-cek}}) with the following:

* AES symmetric key ({{jwe-aesgcmkw-key}}; and
* Initialization vector/nonce (({{jwe-multi-kwiv_3}}

produces the following:

* Encrypted key from {{jwe-multi-encdkey_3}}.
* Key wrap authentication tag from {{jwe-multi-kwtag_3}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iiVL4XCDCnsWCSZCTysGxl41vdnJqIThbumNa9wSQBo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-encdkey_3 title="Recipient #3 Encrypted Key, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DOVpODvbotRWOHEqTRcXkg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-kwtag_3 title="Recipient #3 Encrypted Key, base64url-encoded"}

The following are generated after encrypting the CEK for the third recipient:

* Recipient JWE header; this example uses the header from {{jwe-multi-rcpt_header_3}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "alg": "A256GCMKW",
  "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
  "tag": "DOVpODvbotRWOHEqTRcXkg",
  "iv":  "kZtitxRDXfzCS6ZK"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_header_3 title="Recipient #3 JWE Header JSON"}

The following is the assembled third recipient JSON:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "encrypted_key":
    "DOVpODvbotRWOHEqTRcXkg",
  "header": {
    "alg": "A256GCMKW",
    "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
    "tag": "DOVpODvbotRWOHEqTRcXkg",
    "iv":  "kZtitxRDXfzCS6ZK"
  }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-rcpt_3 title="Recipient #3 JSON"}

### Encrypting the Content ### {#jwe-multi-contentenc}

The following are generated before encrypting the content:

* Protected JWE Header; this example uses the header from {{jwe-multi-protected}}, encoded to {{RFC4648}} base64url as {{jwe-multi-protected_b64u}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "enc": "A128GCM"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-protected title="Protected JWE Header JSON" }

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
eyJlbmMiOiJBMTI4R0NNIn0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-protected_b64u title="Protected JWE Header, base64url-encoded" }

Performing the content encryption operation over the Plaintext ({{jwe-plaintext}}) with the following:

* CEK ({{jwe-multi-cek}}),
* Initialization vector/nonce ({{jwe-multi-iv}}), and
* Protected JWE header ({{jwe-multi-protected_b64u}}) as the authenticated data

produces the following:

* Ciphertext from {{jwe-multi-ciphertext}}
* Authentication tag from {{jwe-multi-tag}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aG6vvrUIPIE5AunujYfPvgO1ypah6leCfYeW721swK9Nr8ERrKJn-HFkEkcx2r
HnLgp33hKX6jPBWlSwilwGl2e2xg3SxQiA9OYncXBkpUcUK4KoIg7qCvtTsVFp
sVRJYTBDqpGuecYdYOeZPWUuB1vX4jrCFIpHh3BIraAE6iTxdmxhHP-OXGZQpU
N4Y2qcromUQP2jSreVGp2Gn9b4bWELfLny4WqRVmB_bySnyUxdglzGAQEse7s_
o1s_6i1fOZnB5WzcoNo2aTZIKWLjJ347XL95KcF9aYwMAZSi7N4n41Zs2Yaa8-
u07LpV9fQ7ubDQj1fQ4clpxPv_IDbHJ3tgdlH2lWSHwZADwgpIOA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-ciphertext title="Ciphertext, base64url-encoded"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ESZx8edqbU4osp8P8H0a5Q
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-tag title="Authentication Tag, base64url-encoded"}

The following is generated after encrypting the plaintext:

* Unprotected JWE header parameters; this example uses the header from {{jwe-multi-unprotected}}.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "cty": "text/plain"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-unprotected title="Unprotected JWE Header JSON"}

### Output Results ### {#jwe-multi-output}

The following compose the resulting JWE object:

* Recipient #1 JSON ({{jwe-multi-rcpt_1}})
* Recipient #2 JSON ({{jwe-multi-rcpt_2}})
* Recipient #3 JSON ({{jwe-multi-rcpt_3}})
* Initialization vector/nonce ({{jwe-multi-iv}})
* Ciphertext ({{jwe-multi-ciphertext}})
* Authentication tag ({{jwe-multi-tag}})

The resulting JWE object using the JSON serialization:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  "recipients": [
    {
      "encrypted_key":
        "EBbDunXtz-j0Gn0q4c9vtueHlb0E-oBkSMno9PUg8eR7Y5T71aU9t
         0JkvxtKiOxibNkeeUSYPLPGvxslWAYgmqYW--uP_R64hQFp2fcB5M
         nyQ69GBkMU6Poie-CtQ2y9Z3Mv9-NMbT7LO99A_2EUEXuxzGnHYSf
         tk7KKjyw38LBuvSOVdokkHWMP4pVLeUJB1ovbT4M1j3pxUzyM2426
         sD6LfjorQhY8vsChyDaFST0Oe8uBvcRyA5mabEyRYlUet8PRH_CjI
         NMipv7LCDRsKVnr3oHwZEfCJFGNC-w_-Qn4xcmkmxyaz1-kZEpS_t
         2kWJsFqx3mg7QAXJBxdGmy6A",
      "header": {
        "alg": "RSA1_5",
        "kid": "frodo.baggins@hobbiton.example"
      }
    },
    {
      "encrypted_key":
        "Dd1kQYNhhSIlKEAyE9UYhjtUBGahteiYVnRUg_tWf8S9VJZKL_8YO
         w",
      "header": {
        "alg": "ECDH-ES+A256KW",
        "kid": "peregrin.took@tuckborough.example",
        "epk": {
          "kty": "EC",
          "crv": "P-384",
          "x":
            "-fcIsKguXqJTTsWdHbJ4iRY_xARz9O_JdAxVEJnrxo7sJRbkw
             HmwlMi4AxCVzG_I",
          "y":
            "JcuN_3pD0dbTjry07BoFoJ-_W-SumUHH9XIAvXkKeFkJV4s5G
             MCwXwxtgkNeZ32T"
        }
      }
    },
    {
      "encrypted_key":
        "iiVL4XCDCnsWCSZCTysGxl41vdnJqIThbumNa9wSQBo",
      "header": {
        "alg": "A256GCMKW",
        "kid": "18ec08e1-bfa9-4d95-b205-2b4dd1d4321d",
        "tag": "DOVpODvbotRWOHEqTRcXkg",
        "iv":  "kZtitxRDXfzCS6ZK"
      }
    }
  ],
  "protected": "eyJlbmMiOiJBMTI4R0NNIn0",
  "unprotected": {
    "cty": "text/plain"
  },
  "iv":
    "nY-xFgdef1LrsU7u",
  "ciphertext":
    "aG6vvrUIPIE5AunujYfPvgO1ypah6leCfYeW721swK9Nr8ERrKJn-HFkE
     kcx2rHnLgp33hKX6jPBWlSwilwGl2e2xg3SxQiA9OYncXBkpUcUK4KoIg
     7qCvtTsVFpsVRJYTBDqpGuecYdYOeZPWUuB1vX4jrCFIpHh3BIraAE6iT
     xdmxhHP-OXGZQpUN4Y2qcromUQP2jSreVGp2Gn9b4bWELfLny4WqRVmB_
     bySnyUxdglzGAQEse7s_o1s_6i1fOZnB5WzcoNo2aTZIKWLjJ347XL95K
     cF9aYwMAZSi7N4n41Zs2Yaa8-u07LpV9fQ7ubDQj1fQ4clpxPv_IDbHJ3
     tgdlH2lWSHwZADwgpIOA",
  "tag":
    "ESZx8edqbU4osp8P8H0a5Q"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #jwe-multi-json title="JSON Serialization"}


# Security Considerations # {#security}

This document introduces no new security considerations over those stated in {{I-D.ietf-jose-json-web-algorithms}}, {{I-D.ietf-jose-json-web-encryption}},  {{I-D.ietf-jose-json-web-key}}, and {{I-D.ietf-jose-json-web-signature}}.


# IANA Considerations # {#iana}

This document has no actions for IANA.


--- back

# Acknowledgements

All of the examples herein use quotes and character names found in the novels "The Hobbit"; "The Fellowship of the Ring"; "The Two Towers"; and "Return of the King", written by J. R. R. Tolkien.

Thanks to Richard Barnes and Jim Schaad for providing for their input on the outline for this document.
